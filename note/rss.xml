<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Notes</title>
    <link>nil</link>
    <description>RSS feed for my notes</description>
    <lastBuildDate>Thu, 22 Apr 2021 01:38:45 -0400</lastBuildDate>
<item>
<title>Construct an Undo Tree From a Linear Undo History</title>
<link>https://archive.casouri.cat/note/2021/visual-undo-tree</link>
<guid>https://archive.casouri.cat/note/2021/visual-undo-tree</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#How-does-undo-work-in-Emacs">1. How does undo work in Emacs</a></li>
<li><a href="#Constructing-the-tree">2. Constructing the tree</a></li>
<li><a href="#Moving-around-the-tree">3. Moving around the tree</a></li>
<li><a href="#Show-me-the-code">4. Show me the code</a></li>
</ul>
</div>
</div>
<div class="parabox"><div class="parabox-10">
</div><div class="parabox-90">
<p>
Emacs comes with a powerful but arguably strange undo system, it considers the action of undo themselves undo-able, so instead of redo, you just undo a previous undo. This allows you to return to every previous buffer state, something a conventional undo system doesn’t guarantee. But Emacs’s undo history can easily get out of hand when you undo, then undo that undo, then undo the undo of undo&#x2026; You lose your mental model of the undo history very quickly and end up holding the undo button until you see the desired buffer state.
</p>

<p>
One idea to take advantage of both worlds is to use an undo tree. An undo tree is easy to navigate and understand. The ubiquitous <a href="https://www.dr-qubit.org/undo-tree.html">undo-tree.el</a> is exactly for that. As a coding challenge, I have been thinking about how to construct a tree out of the linear undo record. That way we can avoid keeping an internal data structure of undos like undo-tree does. This post describes the way I figured out to do that.
</p>
</div></div>

<div id="outline-container-How-does-undo-work-in-Emacs" class="outline-2">
<h2 id="How-does-undo-work-in-Emacs"><span class="section-number-2">1</span> How does undo work in Emacs</h2>
<div class="outline-text-2" id="text-1">
<div class="parabox"><div class="parabox-40">
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">An example of `</span><span style="color: #A8289C;">buffer-undo-list</span><span style="color: #9a9ea2;">'.</span>
<span style="color: #2C79F5;">(</span>nil
 <span style="color: #A8289C;">(</span>11369 . 11377<span style="color: #A8289C;">)</span> <span style="color: #9a9ea2;">; </span><span style="color: #9a9ea2;">Insertion from 11369 to 11377.</span>
 nil
 <span style="color: #A8289C;">(</span>11332 . 11344<span style="color: #A8289C;">)</span> <span style="color: #9a9ea2;">; </span><span style="color: #9a9ea2;">Insertion from 11332 to 11344.</span>
 <span style="color: #A8289C;">(</span><span style="color: #489446;">"&lt;li"</span> . 11332<span style="color: #A8289C;">)</span> <span style="color: #9a9ea2;">; </span><span style="color: #9a9ea2;">Deleteion of "&lt;li" to 11322.</span>
 nil
 <span style="color: #A8289C;">(</span>t 24653 33109 208947 953000<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div><div class="parabox-50">
<p>
Emacs keeps undo records in <code>buffer-undo-list</code>. Every time the buffer content changes, Emacs pushes multiple entries onto the list, each representing a change like insertion, deletion, etc. These entries are grouped by the <code>nil</code> entries as delimiters, so multiple actions can be undone at once. Here I’ll call a group of entries a “modification”.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="orgb827827" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-1.png" alt="figure-1.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
For example, if I insert “ABCDE” into a buffer <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>, and undo twice, I’ll see “ABC” in the buffer, and two undo modifications would be pushed onto <code>buffer-undo-list</code>, one for deleting “E” and the other “D”. If we keep undoing, we will keep going back until all edits are undone.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org8663807" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-2.png" alt="figure-2.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
To stop undo and start redo, we press <code>C-g</code> which breaks the undo chain <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>. All the undo records we just created are now considered ordinary modifications and further undo undoes these previous undo’s. So if we undo twice, we are back to “ABCDE”.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org51a924c" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-3.png" alt="figure-3.png" />
</p>
</div>


<div id="orga0c522b" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-4.png" alt="figure-4.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
How does this “undo chain” work? When we invoke the first undo command, it sets <code>pending-undo-list</code> to the value of <code>buffer-undo-list</code>; further undo commands pop modifications from <code>pending-undo-list</code> and extend <code>buffer-undo-list</code>. And when we break the undo chain, the next undo command will once again set <code>pending-undo-list</code> to the value of <code>buffer-undo-list</code>.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="orga13ffb5" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-5.png" alt="figure-5.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Here’s what happens when branching occurs: if we undo to “ABC”, and insert “F”. Emacs simply pushes a new modification to <code>buffer-undo-list</code>, just like before.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org60b00a9" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-6.png" alt="figure-6.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Besides extending <code>buffer-undo-list</code>, Emacs also maps buffer states to their equivalents. After Emacs undid a modification, it maps the tip of <code>buffer-undo-list</code> to the tip of <code>pending-undo-list</code> in <code>undo-equiv-table</code>. This is the key to construct a tree from the linear undo list.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org62e13dc" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-7.png" alt="figure-7.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
BTW, as shown in the figure, <code>pending-undo-list</code> and <code>buffer-undo-list</code> are really pointing to the same list object, just different cons cells in that list.
</p>
</div></div>
</div>
</div>

<div id="outline-container-Constructing-the-tree" class="outline-2">
<h2 id="Constructing-the-tree"><span class="section-number-2">2</span> Constructing the tree</h2>
<div class="outline-text-2" id="text-2">
<div class="parabox"><div class="parabox-50">

<div id="org713ef96" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-8.png" alt="figure-8.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Here is an example undo tree and the corresponding undo list. The undo list can be viewed as “wrapping around” the tree. To “construct” the tree out of the undo list, we need to know:
</p>
<ol class="org-ol">
<li>Which node to show. In the list, node 5 and 6 are duplicates of earlier nodes and don’t need to appear in the tree.</li>
<li>Establish parent-child relationships between nodes. Starting with node 0, it needs to know node 1 is its child, node 1 needs to know 2 is its child, and so on.</li>
</ol>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="orgc31df0a" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-9.png" alt="figure-9.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Both are easy to figure out with the help of <code>undo-equvi-table</code>: For a modification <i>m</i> (the modification that creates buffer state <i>m</i>), if it is an ordinary change, buffer state <i>m</i> must be a child of <i>m-1</i>; if <i>m</i> is an undo change, then buffer state <i>m</i> must be equivalent to a previous node, say, <i>n</i>. <i>m</i> equivalent to <i>n</i> means 1) we don’t draw <i>m</i> in the tree, only <i>n</i>, and 2) children of <i>m</i> are children of <i>n</i>.
</p>

<p>
In this example, 2 is an ordinary modification, so 2 is a child of 1. 6 is an undo modification and is equivalent to 2, so we don’t draw 6, only 2; and 6’s child, 7, becomes 2’s child.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">
</div><div class="parabox-50">
<p>
So it turns out that constructing the tree is simple: we first go over <code>buffer-undo-list</code> to generate a list of modifications. Then we go over the modification list, identify equivalent nodes and establish parent-child relationships. In the end, we can draw out the tree starting from the first node, either depth-first or breadth-first.
</p>
</div></div>
</div>
</div>

<div id="outline-container-Moving-around-the-tree" class="outline-2">
<h2 id="Moving-around-the-tree"><span class="section-number-2">3</span> Moving around the tree</h2>
<div class="outline-text-2" id="text-3">
<div class="parabox"><div class="parabox-50">
</div><div class="parabox-50">
<p>
Drawing out the tree is only half the story, the undo tree isn’t of any use if we can’t go back and forth in time by moving around on the tree. Say we are at node <i>m</i> and want to move to node <i>n</i>. What should Emacs do to bring us back?
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org06f7aa4" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-11.png" alt="figure-11.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
My immediate thought is to just repeatedly call <code>undo</code> until we are at node <i>n</i>. It works, but only within 10 yards: simple movements could easily explode the undo list. For example, suppose we are at node 1 and move back to node 0, what happens to the undo list?
</p>
</div></div>

<div class="parabox"><div class="parabox-50">

<div id="orgea7d4ac" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-12.png" alt="figure-12.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
We need to undo from 9 all the way back to 0, going back and forth between 1 and 3. Worse, if we now want to go from 0 to 1, we need to undo from 18 to 1. The undo list doubles every time we move back and forth between 0 and 1.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org2d6a244" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-13.png" alt="figure-13.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Hmm, if we are in an undo chain, undoing from 1 to 0 would be so much easier: <code>pending-undo-list</code> would point at 1 (instead of 9), and we simply undo modification 1. Why don’t we just do that, regardless of whether we are in an undo chain? During chained undo, <code>undo</code> pops modifications from <code>pending-undo-list</code> and feeds them into <code>primitive-undo</code>. We can similarly find the modification between 0 and 1 and just feed it to <code>primitive-undo</code>.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="orgde86600" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-17.png" alt="figure-17.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Let’s look at it more closely. If I want to go from buffer state 1 to 2, how do I find a list of modifications to feed to <code>primitive-undo</code>? We can feed it modification 5 to go 5–4, or modification 9 to go 9–8, both of them move us back to the buffer state at node 2. Or we can even go 9–8–7–6–5–4, or 5–4–3–2.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">
</div><div class="parabox-50">
<p>
So, to find a valid “route” from <i>m</i> to <i>n</i>, it needs to satisfy: 1) the start is equivalent to <i>m</i> and the destination is equivalent to <i>n</i>, and 2) the start is older than the destination, i.e., <i>start</i> &gt; <i>end</i>, because <code>primitive-undo</code> can only take us backwards in the undo list. Once we found all the valid routes, we pick the shortest one and feed it to <code>primitive-undo</code>, teleport!
</p>
</div></div>
</div>

<div id="outline-container-A-small-problem" class="outline-3">
<h3 id="A-small-problem"><span class="section-number-3">3.1</span> A small problem</h3>
<div class="outline-text-3" id="text-3-1">
<div class="parabox"><div class="parabox-50">

<div id="org8622aee" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-18.png" alt="figure-18.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Even though we can move between nodes with minimum steps, it is still possible to extend the undo list indefinitely by simply moving around. For example, jiggling between nodes 0 and 1 in this tree keeps growing the undo list.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org7c44ff7" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-19.png" alt="figure-19.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
The previous example looks innocuous because there is only one modification between 0 and 1. It is another story, however, to move between two distant nodes. Consider this example: moving between the tip of the two branches, node 4 and node 387, appends hundreds of modifications to the undo list. If we move back and forth between them, <code>buffer-undo-list</code> quickly grows to thousands of modifications and slows down the processing of it. Worse, because the capacity of <code>buffer-undo-list</code> is limited, we might lose old records.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="org05683ca" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-18.png" alt="figure-18.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Let’s come back to this tree. Don’t all those modifications on the bottom look excessive? We don’t lose any information if we trim them off. The question is, how to identify nodes that can be trimmed off without damaging the undo tree?
</p>
</div></div>


<div class="parabox"><div class="parabox-50">
</div><div class="parabox-50">
<p>
We have mentioned that there are two types of modifications: ordinary modifications created by the user doing some edit, and undo modifications by undoing a previous modification. Among these two types, only ordinary modifications create new buffer states. Undo modifications, on the other hand, only bring us back to previous states. That means the complete undo tree is preserved as long as our undo list preserves all the ordinary modifications.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="orge77865d" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-20.png" alt="figure-20.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Consider this tree where black circles represent ordinary modifications and white circles represent undo modifications. The node <i>m</i> is the last ordinary modification in the undo list. We only need to preserve the undo list from the beginning to <i>m</i> to preserve the undo tree, plus the undo list from <i>m</i> to the green node to bring us to the current position. Any modifications beyond the green node is dispensable. In other words, we keep all the ordinary modifications in the undo list and trim after that at the earliest node corresponding to the current position.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">
</div><div class="parabox-50">
<p>
Now we can move around the tree efficiently, and the length of <code>buffer-undo-list</code> is bound. My crystal ball tells me there is only one problem left.
</p>
</div></div>
</div>
</div>

<div id="outline-container-Another-small-problem" class="outline-3">
<h3 id="Another-small-problem"><span class="section-number-3">3.2</span> Another small problem</h3>
<div class="outline-text-3" id="text-3-2">
<div class="parabox"><div class="parabox-50">
</div><div class="parabox-50">
<p>
As a bonus service for its loyal customers, the garbage collector trims <code>buffer-undo-list</code> automatically.
</p>

<p>
I’m flattered, does that mean some cons cells will quietly disappear when the lisp machine decides to collect some garbage in the middle of my code? Luckily, that’s not the case. The garbage collector doesn’t release cells in <code>buffer-undo-list</code> when there are references to them besides <code>buffer-undo-list</code> <sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>. Since the data structure we generated refers to cons cells in the undo list, the boys are safe as long as we hold on to our data structures.
</p>
</div></div>


<div class="parabox"><div class="parabox-50">

<div id="orga782471" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-21.png" alt="figure-21.png" />
</p>
</div>


<div id="orgd8bbf44" class="figure">
<p><img src="/note/2021/visual-undo-tree/img/figure-22.png" alt="figure-22.png" />
</p>
</div>
</div><div class="parabox-50">
<p>
Of course, we can’t let the undo tree grow forever. And when we let the garbage collector trim the undo list, it inevitably damages our precious little tree.
</p>

<p>
Consider this undo tree, if the garbage collector releases the first two modifications, then they don’t end up in our modification list. In this case, we don’t regard the last two modifications as undos anymore, they are now normal edits. This is a bit weird as we now have two branches, but that’s just the fact of life.
</p>
</div></div>
</div>
</div>
</div>

<div id="outline-container-Show-me-the-code" class="outline-2">
<h2 id="Show-me-the-code"><span class="section-number-2">4</span> Show me the code</h2>
<div class="outline-text-2" id="text-4">
<div class="parabox"><div class="parabox-40">
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Simplified definition of `</span><span style="color: #A8289C;">vundo-m</span><span style="color: #9a9ea2;">'.</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">cl-defstruct</span> <span style="color: #987816;">vundo-m</span>
  <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">As a modification in the mod list:</span>
  idx
  undo-list
  <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">A doubly-linked list of equivalent states:</span>
  prev-eqv
  next-eqv
  <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">As a node in the tree:</span>
  children
  parent
  point<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div><div class="parabox-50">
<p>
<a href="https://github.com/casouri/vundo">Github,</a> and <a href="file:///note/2021/visual-undo-tree/vundo.el">local backup.</a> The package requires the current development branch of Emacs, i.e., Emacs 28. The flow of the program is roughly:
</p>
<ol class="org-ol">
<li>Kick-start the process in <code>vundo--refresh-buffer</code>. It determines if we are generating everything from scratch, or incrementally updating our data.</li>
<li>Generate a list of modifications from <code>buffer-undo-list</code> by <code>vundo--mod-list-from</code>.</li>
<li>Build the tree by <code>vundo--build-tree</code></li>
<li>Draw the tree by <code>vundo--draw-tree</code>.</li>
<li>Move around by <code>vundo--move-to-node</code>. It also trims <code>buffer-undo-list</code>.</li>
</ol>

<p>
Each modification is stored in a <code>vundo-m</code> struct, it also represents the corresponding buffer state and the corresponding node in the tree.
</p>
</div></div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Normally when you insert “ABCDE”, the individual changes are amalgamated into one. Here, for demonstration’s sake, we assume each insertion creates a separate record.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Any command other than <code>undo</code> breaks the undo chain.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
Although the cons cells are not released, <code>buffer-undo-list</code> does shrink. That’s fine because all the information we need are stored in our data structures, which don’t change.
</p></div></div>


</div>
</div>]]></description>
<pubDate>Wed, 24 Feb 2021 00:00:00 -0500</pubDate>
</item>
<item>
<title>How Long Should a Paragraph Be on the Web?</title>
<link>https://archive.casouri.cat/note/2021/blog-header</link>
<guid>https://archive.casouri.cat/note/2021/blog-header</guid>
<description><![CDATA[<p>
I often find that a screen full of text on the web is much more confusing and tiring to read than a page full of text in a physical book, even though the latter usually contains much more text. My theory is that when reading a physical book, you have (or at least feel) more control of your location and surroundings: you are presented with two pages side-by-side and can easily flip to previous and next page.
</p>

<p>
On the other hand, when you read an article in a browser, you see the article only through this small window, that’s far less scope than a physical book. And if you think of the prose as a map, you are given a much smaller map and naturally feels less clear of your location and surroundings.
</p>

<p>
Worse, instead of flipping pages and seeing the pages with no lag, you have to scroll to see the other parts. Scrolling is less precise, slower and harder keep track of mentally: at least for me, it is not easy to keep track of how far did I scroll, what I scrolled over, etc.
</p>

<p>
In a word, comparing to reading on a physical book, you mental map of the prose is greatly obfuscated when you scroll over it in a browser.
</p>

<p>
To mitigate this, I try to place landmarks around the prose to help readers keep track of their position and surrounding, or at least give them the feeling of in control. I try to make sure at any given moment, the reader can see at least one headers, images, or anything other than a blob of text in the screen. That, in my experience, makes reading in a browser more comfortable.
</p>
]]></description>
<pubDate>Mon, 01 Feb 2021 00:00:00 -0500</pubDate>
</item>
<item>
<title>Adding a Like Button to My Static Blog</title>
<link>https://archive.casouri.cat/note/2021/like-button</link>
<guid>https://archive.casouri.cat/note/2021/like-button</guid>
<description><![CDATA[<p>
Many times when I read other’s blogs, I wish I can “like” their post to express my appreciation. Of course, most posts don’t, and the ones that do often requires login for liking the post. Since I also want to know if anyone likes my posts (or rather “is anyone reading them?”), I decided to add like buttons to my posts, ones that don’t require login.
</p>

<p>
The idea is simple: add a button that makes a POST request to my server. For example, this button makes a POST request to <code>/like</code> with <code>PATH</code> = <code>/note/2021/disappearing-image/index.html</code>:
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #A8289C;">form</span> <span style="color: #A8289C;">action</span>=<span style="color: #489446;">"/like"</span> <span style="color: #A8289C;">method</span>=<span style="color: #489446;">"post"</span>&gt;
  &lt;<span style="color: #A8289C;">input</span> <span style="color: #A8289C;">type</span>=<span style="color: #489446;">"text"</span> <span style="color: #A8289C;">name</span>=<span style="color: #489446;">"path"</span> <span style="color: #A8289C;">hidden</span>=<span style="color: #489446;">""</span>
         <span style="color: #A8289C;">value</span>=<span style="color: #489446;">"/note/2021/disappearing-image/index.html"</span>&gt;
  &lt;<span style="color: #A8289C;">button</span> <span style="color: #A8289C;">class</span>=<span style="color: #489446;">"like"</span> <span style="color: #A8289C;">type</span>=<span style="color: #489446;">"submit"</span>&gt;&#10084; Like&lt;/<span style="color: #A8289C;">button</span>&gt;
&lt;/<span style="color: #A8289C;">form</span>&gt;
</pre>
</div>

<p>
My server then records this like to my database, and I can query how many likes I received:
</p>

<pre class="example">
sqlite3 database.sqlite3 -box "select uri, count(*) as c \
from like \
group by uri order by c;"
┌─────────────────────────────┬───┐
│             uri             │ c │
├─────────────────────────────┼───┤
│ /rock/day/day-56/index.html │ 3 │
└─────────────────────────────┴───┘
</pre>

<p>
For the confirmation screen, I had a few options:
</p>


<div id="orgf54e5be" class="figure">
<p><img src="/note/2021/like-button/design1.png" alt="design1.png" />
</p>
<p><span class="figure-number">Figure 1: </span>Helvetica Neue Ultra Condensed</p>
</div>


<div id="org032a369" class="figure">
<p><img src="/note/2021/like-button/design2.png" alt="design2.png" />
</p>
<p><span class="figure-number">Figure 2: </span>Helvetica Neue Ultra Condensed, white on black</p>
</div>


<div id="org32ef2af" class="figure">
<p><img src="/note/2021/like-button/design3.png" alt="design3.png" />
</p>
<p><span class="figure-number">Figure 3: </span>Mechanically condensed Helvetica, white on black</p>
</div>


<div id="org90ac546" class="figure">
<p><img src="/note/2021/like-button/design4.png" alt="design4.png" />
</p>
<p><span class="figure-number">Figure 4: </span>Helvetica Ultra Condensed, white on pink</p>
</div>

<p>
I first came up with figure 1. Then I wanted to give the reader a surprise, so I inverted the background to increase contrast in figure 2. Then I thought about using mechanically condensed font instead of normal condense to further increase contrast and tension in figure 3. Comparing figure 2 and 3, you can clearly feel the unnaturalness and discomfort of mechanically condensed fonts. No wonder EVA used it. But then I thought I just want to surprise the reader, not to make them uncomfortable, so I didn’t use figure 3 in the end.
</p>

<p>
But hey, like should be positive and warm and happy, what’s with the solemn black &amp; white? My blog is already kinda boring with so less color. So I ended up changing the background to a warm pink.
</p>
]]></description>
<pubDate>Sat, 09 Jan 2021 00:00:00 -0500</pubDate>
</item>
<item>
<title>Schrödinger’s Image: a File That Both Exists and Not</title>
<link>https://archive.casouri.cat/note/2021/disappearing-image</link>
<guid>https://archive.casouri.cat/note/2021/disappearing-image</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Who-killed-Mr.-M?">1. Who killed Mr. M?</a></li>
<li><a href="#What-really-happened">2. What really happened</a></li>
</ul>
</div>
</div>
<p>
Here is an Image that should appear broken to you:
</p>

<p><img style="width: 200px;" src="./Alba-Armengou--Meditaçao.png"
alt="Alba-Armengou--Meditaçao.png"/></p>

<p>
But if you right click the image and copy its address, and open that URL in a new tab (don’t just “open in new tab”, copy the address), it magically appears. I have had this problem on my music blog for some time: When I preview the web pages on my machine, everything looks fine, but once I pushed it onto GitHub Pages, some images didn’t appear. Yet I could still see them if I copy the address out and load it in a new tab.
</p>

<div id="outline-container-Who-killed-Mr.-M?" class="outline-2">
<h2 id="Who-killed-Mr.-M?"><span class="section-number-2">1</span> Who killed Mr. M?</h2>
<div class="outline-text-2" id="text-1">
<p>
My initial guess was that GitHub Pages had some bug with Unicode addresses. Because all the problematic images has Unicode filenames and since I could see the files in a new tab, they obviously exist. Plus I can view them fine on my machine.
</p>

<p>
Turns out that GitHub was not the problem: after switching to self-hosting my blog, the images were still missing. It wasn’t due to not encoding Unicode characters in the URL either, encoding the address didn’t solve it.
</p>

<p>
Ok, I have access to the server now, maybe I can figure out what’s going on. My server is in Common Lisp, so I can just attach to the REPL and type:
</p>

<div class="org-src-container">
<pre class="src src-common-lisp">&#8203;* <span style="color: #2C79F5;">(</span>probe-file #p<span style="color: #489446;">"~/blog/rock/day/album/Alba-Armengou--Meditac&#807;ao.png"</span><span style="color: #2C79F5;">)</span>
NIL
</pre>
</div>

<p>
So the server couldn’t find the file, that’s why it replied with 404. But I know the file exists, right?
</p>

<div class="org-src-container">
<pre class="src src-shell">$ cd ~/blog/rock/day/album
$ file Alba-Armengou--Meditac&#807;ao.png
Alba-Armengou--Meditac&#807;ao.png: cannot open <span style="color: #ff00ff;">`Alba-Armengou--Meditac&#807;ao.png'</span>
<span style="color: #ff00ff;">(No such file or directory)</span>
</pre>
</div>

<p>
Oops, <code>file</code> couldn’t find it either, but if I list all the files:
</p>

<div class="org-src-container">
<pre class="src src-shell">$ ls
Alba-Armengou--I-feel-pretty.png
Alba-Armengou--Medita&#231;ao.png
alba-armengou--shiny-stockings.png
beatles--abbey-road.jpg
beatles--the-beatles.jpg
bob-dylan--the-freewheelin-bob-dylan.png
buffalo-springfield--for-what-its-worth.png
...
</pre>
</div>

<p>
I can see it right at the second line. What the hell? Maybe there is a type? I copied the filename out and tried the command again:
</p>

<div class="org-src-container">
<pre class="src src-shell">$ file Alba-Armengou--Medita&#231;ao.png
Alba-Armengou--Medita&#231;ao.png: PNG image data, 2560 x 1435,
8-bit/color RGBA, non-interlaced
</pre>
</div>

<p>
This time <code>file</code> found the image. But the two filenames are identical:
</p>


<div id="org8daaae4" class="figure">
<p><img src="/note/2021/disappearing-image/two-commands.png" alt="two-commands.png" />
</p>
</div>

<p>
Clearly, those two strings has something in different. I echo’ed them into two files and inspected them with Emacs:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #A8289C;">echo</span> Alba-Armengou--Meditac&#807;ao.png &gt; ~/bad
<span style="color: #A8289C;">echo</span> Alba-Armengou--Medita&#231;ao.png &gt; ~/good
Emacs
</pre>
</div>

<p>
Turns out the “ç” in the bad one is composed by two “characters”:
</p>

<p style="font-size: 40px; margin: 0 0 0;">c + ◌̧ = ç</p>

<p>
And the good one has a single character “ç”. The two “ç” looks identical but have different byte representations.
</p>

<p style="font-size: 40px; margin: 0 0 0;">ç ≠ ç</p>
</div>
</div>


<div id="outline-container-What-really-happened" class="outline-2">
<h2 id="What-really-happened"><span class="section-number-2">2</span> What really happened</h2>
<div class="outline-text-2" id="text-2">
<p>
Here is my guess: When naming the image file, the filesystem automatically normalized the composed character (<a href="https://en.wikipedia.org/wiki/Combining_character">combining character</a>) to a single character (<a href="https://en.wikipedia.org/wiki/Precomposed_character">precomposed character</a>), so the URL containing the combining character doesn’t match the filename and the server cannot find it. And when we copy out the address and paste it back into the browser address bar, the browser automatically normalized the address, the URL matched the filename and the image appeared. Proving the hypothesis is left as an exercise for the reader.
</p>

<p>
The image loads normally on my machine because it runs macOS. <a href="https://eclecticlight.co/2017/07/17/apfs-ios-11-and-high-sierra-will-fix-normalisation-problems/">A post on THE ECLECTIC LIGHT COMPANY</a> says APFS normalizes filenames on macOS since High Sierra. So it can find my image file with the incorrect filename. I didn’t find anything about normalization for ext4 so I assume it doesn’t normalize.
</p>

<p>
According to that blog, there is a Unicode standard on normalization: <a href="https://unicode.org/reports/tr15/">Unicode® Standard Annex #15</a>.
</p>

<p>
In Emacs, there is a built-in package ucs-normalize.el that normalizes text according to Unicode standard. I added it to my blog generator. Now I can happily add images with Unicode text again.
</p>
</div>
</div>
]]></description>
<pubDate>Thu, 07 Jan 2021 19:21:00 -0500</pubDate>
</item>
<item>
<title>Home-brew define-key</title>
<link>https://archive.casouri.cat/note/2020/home-brew-define-key</link>
<guid>https://archive.casouri.cat/note/2020/home-brew-define-key</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Introducing-luna-key.el">1. Introducing luna-key.el</a></li>
<li><a href="#Implementation-details">2. Implementation details</a></li>
<li><a href="#Show-me-the-code">3. Show me the code</a></li>
</ul>
</div>
</div>
<p>
Or, “Home-brew general.el”. If you don’t know yet, <a href="https://github.com/noctuid/general.el">general.el</a> is a package that lets you define keybindings with ease. It lets you define keys like this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>general-define-key
 <span style="color: #A8289C;">:keymaps</span> 'org-mode-map
 <span style="color: #A8289C;">:prefix</span> <span style="color: #489446;">"C-x"</span>
 <span style="color: #489446;">"C-q"</span> 'counsel-org-tag
 ...<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
It has keywords for Evil states and pseudo keymaps like override-map and stuff. Like <code>use-package</code>, it provides an essential feature but is large and external, with a bunch of features I never use. So I decide to write my own, <code>luna-def-key</code>. Unlike <code>luna-load-package</code>, which is identical to <code>use-package</code> for the most part, <code>luna-def-key</code> provides many features of general.el with different approach (and some extra!), and has its distinct characteristics.
</p>

<div id="outline-container-Introducing-luna-key.el" class="outline-2">
<h2 id="Introducing-luna-key.el"><span class="section-number-2">1</span> Introducing luna-key.el</h2>
<div class="outline-text-2" id="text-1">
<p>
Unlike <code>general-define-key</code>, where keywords affect the whole definition form, keywords in <code>luna-def-key</code> only take effect on the definitions below it. For example, in
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>luna-def-key
 <span style="color: #489446;">"C-a"</span> #'fn1
 <span style="color: #A8289C;">:prefix</span> <span style="color: #489446;">"C-c"</span>
 <span style="color: #489446;">"C-a"</span> #'fn2<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
<code>fn1</code> is bound to <code>C-a</code>, <code>fn2</code> is bound to <code>C-c C-a</code>. You can think of <code>luna-def-key</code> as a small stateful machine, where keywords changes the state. Part of the reason why is that I always define all the keybindings together at the beginning of my config file like this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="font-weight: bold;">;;; Keys</span>

<span style="color: #2C79F5;">(</span>luna-def-key
 <span style="color: #489446;">"C-/"</span>     #'undo-only
 <span style="color: #489446;">"C-."</span>     #'undo-redo
 <span style="color: #489446;">"C-s-i"</span>   #'outline-cycle-buffer
 <span style="color: #489446;">"C-c C-h"</span> #'hs-toggle-hiding
 <span style="color: #489446;">"C-="</span>     #'expand-region
 <span style="color: #489446;">"C--"</span>     #'contract-region
 <span style="color: #A8289C;">:keymaps</span> '<span style="color: #A8289C;">(</span>c-mode-map c++-mode-map<span style="color: #A8289C;">)</span>
 <span style="color: #489446;">"M-RET"</span>   #'srefactor-refactor-at-point
 <span style="color: #A8289C;">:keymaps</span> '<span style="color: #A8289C;">(</span>outline-minor-mode-map org-mode-map outline-mode-map<span style="color: #A8289C;">)</span>
 <span style="color: #489446;">"s-i"</span>     #'outline-cycle
 <span style="color: #A8289C;">:keymaps</span> 'override
 <span style="color: #489446;">"C-j"</span>     #'avy-goto-word-1<span style="color: #2C79F5;">)</span>

<span style="font-weight: bold;">;;; Packages</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">load-package</span> avy
  <span style="color: #A8289C;">:commands</span> avy-goto-word-1<span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">load-package</span> ws-butler
  <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">global mode interferes with magit</span>
  <span style="color: #A8289C;">:hook</span> <span style="color: #A8289C;">(</span>prog-mode . ws-butler-mode<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

...

</pre>
</div>

<p>
With <code>luna-def-key</code>, I don’t need to write separate forms for each keymap&#x2026; Weird motivation, I know.
</p>

<p>
Besides keymaps and prefixes, <code>luna-def-key</code> has some other keywords. Here is all of them:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left"><code>:keymaps</code></td>
<td class="org-left">Bind in this keymap</td>
</tr>

<tr>
<td class="org-left"><code>:prefix</code></td>
<td class="org-left">Bind with this prefix  key</td>
</tr>

<tr>
<td class="org-left"><code>:clear</code></td>
<td class="org-left">Clear all states</td>
</tr>

<tr>
<td class="org-left"><code>:---</code></td>
<td class="org-left">Same as <code>:clear</code></td>
</tr>

<tr>
<td class="org-left"><code>:when</code></td>
<td class="org-left">Bind conditional command</td>
</tr>
</tbody>
</table>

<p>
The <code>:when</code> keyword is fun, I can bind keys that only activates under certain condition, like when the region is active. I used to do that with <code>emulation-mode-map-alists</code>, but that’s not as flexible as <code>:when</code>. By flexible I mean this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #A8289C;">:when</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #A8289C;">()</span>
         <span style="color: #A8289C;">(</span><span style="color: #E04E49;">and</span> mark-active
              <span style="color: #489446;">(</span>not <span style="color: #DA7A48;">(</span>derived-mode-p 'magit-status-mode<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Cool, huh?
</p>

<p>
General.el also has a feature called “definer”, basically it’s like macros:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>general-create-definer my-leader-def
  <span style="color: #A8289C;">:prefix</span> <span style="color: #489446;">"C-c"</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">bind "C-c o" to `</span><span style="color: #A8289C;">other-window</span><span style="color: #9a9ea2;">'</span>
<span style="color: #2C79F5;">(</span>my-leader-def <span style="color: #489446;">"o"</span> 'other-window<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
luna-key.el does this by “preset keywords”:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>luna-key-def-preset <span style="color: #A8289C;">:leader</span>
  <span style="color: #A8289C;">:prefix</span> <span style="color: #489446;">"C-c"</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">bind "C-c o" to `</span><span style="color: #A8289C;">other-window</span><span style="color: #9a9ea2;">'</span>
<span style="color: #2C79F5;">(</span>luna-def-key
 <span style="color: #A8289C;">:leader</span>
 <span style="color: #489446;">"o"</span> 'other-window<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
You can think of <code>:leader</code> as equivalent to <code>:prefix "C-c"</code> (spoiler alert: they are literally equivalent).
</p>

<p>
<code>luna-def-key</code> also works for remaps and keyboard macros. IIRC general.el doesn’t allow keyboard macros.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>luna-def-key
 <span style="color: #A8289C;">[</span>remap fn1<span style="color: #A8289C;">]</span> #'fn2
 <span style="color: #489446;">"C-d"</span> <span style="color: #489446;">"woome"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Finally, we have which-key.el support! (Even though I never get to look at which-key panels.)
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>luna-def-key
 <span style="color: #A8289C;">:leader</span>
 <span style="color: #489446;">"b"</span> '<span style="color: #A8289C;">(</span><span style="color: #489446;">"Buffer"</span><span style="color: #A8289C;">)</span>
 <span style="color: #489446;">"bm"</span>  '<span style="color: #A8289C;">(</span><span style="color: #489446;">"goto message buffer"</span> .
         <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">()</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>switch-to-buffer <span style="color: #489446;">"*Messages*"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
 <span style="color: #489446;">"bs"</span>  '<span style="color: #A8289C;">(</span><span style="color: #489446;">"goto scratch buffer"</span> .
         <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">()</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>switch-to-buffer <span style="color: #489446;">"*scratch*"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
This syntax is inline with <code>define-key</code>.
</p>
</div>
</div>

<div id="outline-container-Implementation-details" class="outline-2">
<h2 id="Implementation-details"><span class="section-number-2">2</span> Implementation details</h2>
<div class="outline-text-2" id="text-2">
<p>
When I say you can think of <code>luna-def-key</code> as a little stateful machine, I mean it. It <i>is</i> a little stateful machine, consuming arguments one by one. Here is a slightly simplified definition of <code>luna-def-key</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">luna-def-key</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">&amp;rest</span> args<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span>arg map-list prefix condition<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">while</span> args
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> arg <span style="color: #A8289C;">(</span><span style="color: #E04E49;">pop</span> args<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">pcase</span> arg
        <span style="color: #A8289C;">(</span><span style="color: #A8289C;">:keymaps</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Next argument is either a keymap or a list of them.</span>
         <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> map-list <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">pop</span> args<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #A8289C;">:prefix</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Next argument is a key prefix.</span>
         <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> prefix <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">pop</span> args<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Clear all states.</span>
        <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span><span style="color: #E04E49;">or</span> <span style="color: #A8289C;">:clear</span> <span style="color: #A8289C;">:---</span><span style="color: #987816;">)</span> <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> prefix nil
                                map-list nil
                                condition nil<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #A8289C;">:when</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Next argument is a condition predicate.</span>
         <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> condition <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">pop</span> args<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Preset modifiers.</span>
        <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>pred keywordp<span style="color: #987816;">)</span>
         <span style="color: #987816;">(</span><span style="color: #E04E49;">when-let</span> <span style="color: #2C79F5;">(</span><span style="color: #80a880;">(</span>preset <span style="color: #887070;">(</span>alist-get arg luna-key-preset-alist<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
           <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> args <span style="color: #80a880;">(</span>append preset args<span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Next two arguments are key and value.</span>
        <span style="color: #A8289C;">(</span>_ <span style="color: #987816;">(</span><span style="color: #E04E49;">let</span> <span style="color: #2C79F5;">(</span><span style="color: #80a880;">(</span>key arg<span style="color: #80a880;">)</span>
                 <span style="color: #80a880;">(</span>def <span style="color: #887070;">(</span><span style="color: #E04E49;">pop</span> args<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
             <span style="color: #2C79F5;">(</span>luna-key-define key def map-list prefix condition<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Here <code>args</code> is the arguments <code>luna-def-key</code> receives. We have three states: <code>map-list</code> (<code>:keymaps</code>), <code>prefix</code> (<code>:prefix</code>), and <code>condition</code> (<code>:when</code>). If we see these keywords, we pop next arguments out and set the state to it. If we see <code>:clear</code>, we set all states to <code>nil</code>. If we see other keywords, it must be a preset, and we just get its definitions and push them to the beginning of the argument list (so, literally equivalent). If we see anything else, it must be a key followed by a value, we bind them with current states.
</p>

<p>
There are a bit more hair (and a bit less fun) in <code>luna-key-define</code>. You can have a look if you are interested.
</p>
</div>
</div>

<div id="outline-container-Show-me-the-code" class="outline-2">
<h2 id="Show-me-the-code"><span class="section-number-2">3</span> Show me the code</h2>
<div class="outline-text-2" id="text-3">
<p>
As always, <a href="file:///note/2020/home-brew-define-key/luna-key.el.bak">local backup</a> and <a href="https://github.com/casouri/lunarymacs/blob/master/site-lisp/luna-key.el">GitHub link</a>.
</p>
</div>
</div>
]]></description>
<pubDate>Sun, 13 Sep 2020 14:25:00 -0400</pubDate>
</item>
<item>
<title>Emacs Theme Utility</title>
<link>https://archive.casouri.cat/note/2020/emacs-theme-utility</link>
<guid>https://archive.casouri.cat/note/2020/emacs-theme-utility</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Expand-face-attributes">1. Expand face attributes</a></li>
<li><a href="#Define-a-theme">2. Define a theme</a></li>
</ul>
</div>
</div>
<p>
Here is yet another theme utility for defining themes. I made the wrapper extremely thin and didn’t use any macros. And most of the lines of my theme definition can fit in 70 columns (which matters!).
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>font-lock-builtin-face              <span style="color: #A8289C;">(</span>nil ,violet2<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-comment-face              <span style="color: #A8289C;">(</span>nil ,fg-weak<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-comment-delimiter-face    <span style="color: #A8289C;">(</span>font-lock-comment-face<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-doc-face                  <span style="color: #A8289C;">(</span>font-lock-comment-face<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-constant-face             <span style="color: #A8289C;">(</span>nil ,violet1<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-function-name-face        <span style="color: #A8289C;">(</span>nil ,violet2<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-keyword-face              <span style="color: #A8289C;">(</span>nil ,red<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-string-face               <span style="color: #A8289C;">(</span>nil ,green<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-type-face                 <span style="color: #A8289C;">(</span>nil ,yellow<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-variable-name-face        <span style="color: #A8289C;">(</span>nil ,violet2<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>font-lock-warning-face              <span style="color: #A8289C;">(</span>warning<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
...
</pre>
</div>

<div id="outline-container-Expand-face-attributes" class="outline-2">
<h2 id="Expand-face-attributes"><span class="section-number-2">1</span> Expand face attributes</h2>
<div class="outline-text-2" id="text-1">
<p>
I want to save writing face attribute keywords over and over again. So I decide to use this form:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>face <span style="color: #A8289C;">(</span>inherit foreground background underline weight slant<span style="color: #A8289C;">)</span>
      other-attributes display<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
which determines common attributes by position. Other uncommon attributes are in <code>OTHER-ATTRIBUTES</code> as a plist. <code>DISPLAY</code> allows specifying some display attributes like terminal type or color. For example, 
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>theme-util-make-face-spec
 '<span style="color: #A8289C;">(</span>default <span style="color: #489446;">(</span>nil <span style="color: #489446;">"white"</span> <span style="color: #489446;">"black"</span> t bold<span style="color: #489446;">)</span>
           <span style="color: #489446;">(</span><span style="color: #A8289C;">:family</span> <span style="color: #489446;">"Charter"</span> <span style="color: #A8289C;">:height</span> 150<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
returns
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>default <span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>t <span style="color: #A8289C;">:foreground</span> <span style="color: #489446;">"white"</span> <span style="color: #A8289C;">:background</span> <span style="color: #489446;">"black"</span> <span style="color: #A8289C;">:underline</span> t
             <span style="color: #A8289C;">:weight</span> bold <span style="color: #A8289C;">:family</span> <span style="color: #489446;">"Charter"</span> <span style="color: #A8289C;">:height</span> 150<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
which is a valid face spec that you can feed to <code>custom-theme-set-faces</code>.
</p>

<p>
Let’s try another one with some <code>DISPLAY</code> constraints:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>theme-util-make-face-spec
 '<span style="color: #A8289C;">(</span>default <span style="color: #489446;">(</span>nil <span style="color: #489446;">"white"</span> <span style="color: #489446;">"black"</span> t bold<span style="color: #489446;">)</span>
           nil 
           <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>type ns<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>min-color 256<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
returns
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>default <span style="color: #A8289C;">(</span><span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>type ns<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>min-color 256<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span> 
           <span style="color: #A8289C;">:foreground</span> <span style="color: #489446;">"white"</span> <span style="color: #A8289C;">:background</span> <span style="color: #489446;">"black"</span> 
           <span style="color: #A8289C;">:underline</span> t <span style="color: #A8289C;">:weight</span> bold<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
The expand function is simple:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">theme-util-make-face-spec</span> <span style="color: #A8289C;">(</span>spec<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>face <span style="color: #A8289C;">(</span>nth 0 spec<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>attr <span style="color: #A8289C;">(</span>nth 1 spec<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>rest-attr <span style="color: #A8289C;">(</span>nth 2 spec<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>display <span style="color: #A8289C;">(</span>nth 3 spec<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>inherit <span style="color: #A8289C;">(</span>nth 0 attr<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>fg <span style="color: #A8289C;">(</span>nth 1 attr<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>bg <span style="color: #A8289C;">(</span>nth 2 attr<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>underline <span style="color: #A8289C;">(</span>nth 3 attr<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>weight <span style="color: #A8289C;">(</span>nth 4 attr<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>slant <span style="color: #A8289C;">(</span>nth 5 attr<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    `<span style="color: #489446;">(</span>,face <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>,<span style="color: #987816;">(</span><span style="color: #E04E49;">or</span> display t<span style="color: #987816;">)</span>
              . ,<span style="color: #987816;">(</span>remove
                  nil
                  <span style="color: #2C79F5;">(</span>append <span style="color: #80a880;">(</span><span style="color: #E04E49;">if</span> inherit <span style="color: #887070;">(</span>list <span style="color: #A8289C;">:inherit</span> inherit<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                          <span style="color: #80a880;">(</span><span style="color: #E04E49;">if</span> fg <span style="color: #887070;">(</span>list <span style="color: #A8289C;">:foreground</span> fg<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                          <span style="color: #80a880;">(</span><span style="color: #E04E49;">if</span> bg <span style="color: #887070;">(</span>list <span style="color: #A8289C;">:background</span> bg<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                          <span style="color: #80a880;">(</span><span style="color: #E04E49;">if</span> underline <span style="color: #887070;">(</span>list <span style="color: #A8289C;">:underline</span> underline<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                          <span style="color: #80a880;">(</span><span style="color: #E04E49;">if</span> weight <span style="color: #887070;">(</span>list <span style="color: #A8289C;">:weight</span> weight<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                          <span style="color: #80a880;">(</span><span style="color: #E04E49;">if</span> slant <span style="color: #887070;">(</span>list <span style="color: #A8289C;">:slant</span> slant<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                          rest-attr<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
I could even use <code>pcase-let</code> to pattern match the form, but <code>nth</code> is good enough.
</p>
</div>
</div>

<div id="outline-container-Define-a-theme" class="outline-2">
<h2 id="Define-a-theme"><span class="section-number-2">2</span> Define a theme</h2>
<div class="outline-text-2" id="text-2">
<p>
To define the theme, we just transform each face spec and pipe them to <code>custom-theme-set-faces</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">theme-util-set-faces</span> <span style="color: #A8289C;">(</span>name spec<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>apply #'custom-theme-set-faces
         name
         <span style="color: #489446;">(</span>mapcar #'theme-util-make-face-spec
                 spec<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
In action, it looks like this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>theme-util-set-faces 'light
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">cl-flet</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>darken #'theme-util-darken<span style="color: #DA7A48;">)</span>
            <span style="color: #DA7A48;">(</span>brighten #'theme-util-brighten<span style="color: #DA7A48;">)</span>
            <span style="color: #DA7A48;">(</span>overlay #'theme-util-color-overlay<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>bg        <span style="color: #489446;">"#fafafa"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>bg-alt    <span style="color: #987816;">(</span>darken bg 0.05<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>fg        <span style="color: #489446;">"#2b3239"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>fg-weak   <span style="color: #489446;">"#9a9ea2"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>blue1     <span style="color: #489446;">"#a0bcf8"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>blue2     <span style="color: #489446;">"#4078f2"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>green     <span style="color: #489446;">"#50a14f"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>orange    <span style="color: #489446;">"#da8548"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>red       <span style="color: #489446;">"#e45649"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>yellow    <span style="color: #489446;">"#986801"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>violet1   <span style="color: #489446;">"#b751b6"</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>violet2   <span style="color: #489446;">"#a626a4"</span><span style="color: #A8289C;">)</span>
           <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Note that this is not a cons cell.</span>
           <span style="color: #A8289C;">(</span>tty       '<span style="color: #987816;">(</span><span style="color: #2C79F5;">(</span>type nil<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      `<span style="color: #DA7A48;">(</span><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">builtin faces</span>
        <span style="color: #A8289C;">(</span>default     <span style="color: #987816;">(</span>nil ,fg ,bg<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>region      <span style="color: #987816;">(</span>nil nil ,<span style="color: #2C79F5;">(</span>overlay bg violet1 0.1<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>highlight   <span style="color: #987816;">(</span>nil <span style="color: #489446;">"white"</span> ,blue2<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>cursor      <span style="color: #987816;">(</span>nil <span style="color: #489446;">"white"</span> <span style="color: #489446;">"black"</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>link        <span style="color: #987816;">(</span>nil ,blue2 nil nil<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>match       <span style="color: #987816;">(</span>nil ,green nil nil bold<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>

        ...

        <span style="color: #A8289C;">(</span>font-lock-builtin-face              <span style="color: #987816;">(</span>nil ,violet2<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>font-lock-comment-face              <span style="color: #987816;">(</span>nil ,fg-weak<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>font-lock-comment-delimiter-face    <span style="color: #987816;">(</span>font-lock-comment-face<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>font-lock-doc-face                  <span style="color: #987816;">(</span>font-lock-comment-face<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>font-lock-constant-face             <span style="color: #987816;">(</span>nil ,violet1<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>widget-inactive <span style="color: #987816;">(</span>default<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Note that I used local functions and variables rather than defining macros. It’s tempting to use macros when you can, but many times you don’t really need it, and using macros in fact makes stuff more complicated (look at doom-themes.el).
</p>
</div>
</div>
]]></description>
<pubDate>Sat, 12 Sep 2020 15:09:00 -0400</pubDate>
</item>
<item>
<title>Embed Images in Text Files</title>
<link>https://archive.casouri.cat/note/2020/embed-images-in-text-files</link>
<guid>https://archive.casouri.cat/note/2020/embed-images-in-text-files</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Introducing-iimg.el">1. Introducing iimg.el</a></li>
<li><a href="#Implementation-details">2. Implementation details</a></li>
<li><a href="#Show-me-the-code">3. Show me the code</a></li>
<li><a href="#%E5%BE%8C%E6%97%A5%E8%AB%87%EF%BC%9ABetter-integration-with-Deft">4. 後日談：Better integration with Deft</a></li>
<li><a href="#%E5%BE%8C%E6%97%A5%E8%AB%872%EF%BC%9ASmooth-scrolling-over-images">5. 後日談2：Smooth scrolling over images</a></li>
</ul>
</div>
</div>
<p>
I’ve always wanted to take notes with images in Emacs: to actually embed images into the text file and manipulate and view them as easy as in other rich text editors. Org mode can display images but its image links are quite limited: 1) it is really a file path and you have to keep the file path in sync 2) changing the display size is not convenient, and you can’t control the size of individual images.
</p>

<p>
Since I’m moving from Notes.app to Deft to take notes, I have to have a comparable image support in Emacs. So that I wrote iimg.el. For my note files, I really want to pack all the stuff into one single file and not worry about keeping the paths intact.
</p>

<div id="outline-container-Introducing-iimg.el" class="outline-2">
<h2 id="Introducing-iimg.el"><span class="section-number-2">1</span> Introducing iimg.el</h2>
<div class="outline-text-2" id="text-1">
<p>
iimg.el provides these features:
</p>
<ul class="org-ul">
<li>embedding images as base64 text in text files</li>
<li>easy control of the size of each individual image</li>
<li>rendering the images</li>
</ul>

<p>
Now I can insert an image by <code>iimg-resize</code> and change its displayed size by typing <code>s</code> on the image, and toggle thumbnail display by typing <code>t</code> (inspired by Notes.app). I can resize a image’s width/height to be n characters, n pixels, or n percent of the window width/height. Drag-and-drop is also supported. Lastly, I can export the embedded images out if I want to.
</p>

<p>
Here is a demo (<a href="file:///note/2020/embed-images-in-text-files/iimg.mp4">demo link</a>) (sorry for the flickering, Emacs has bad image scrolling):
</p>
<video controls width="100%">
<source src="./iimg.mp4" type="video/mp4">
</video>
</div>
</div>

<div id="outline-container-Implementation-details" class="outline-2">
<h2 id="Implementation-details"><span class="section-number-2">2</span> Implementation details</h2>
<div class="outline-text-2" id="text-2">
<p>
At first I thought of simply inserting the base64 string, but then there will be this wall of nonsense between meaningful text if you don’t render the image. That doesn’t sound like a good idea: what if someone else needs to view the file and don’t have iimg.el, or I need to view the file on some other places where iimg.el or even Emacs isn’t available? So I split the image into two parts: link and data. Data are the base64 strings and are placed at the end of each file. Links are inline with other normal text, and are rendered as images. This design adds a bit of hair to the implementation but I think it’s worth it.
</p>

<p>
I store the meta data (size, thumbnail state, etc) as plists in the links. A link looks like this:
</p>
<pre class="example">
({iimg-link (:name "hooks" :size (width char 70) :thumbnail t)})
</pre>
<p>
I can simply use <code>read</code> and get all the information about the image and render it accordingly. And all these settings are persistent because they are directly saved to the file.
</p>

<p>
Data looks similar:
</p>
<pre class="example">
({iimg-data (:name "hooks" :data "/9j/4AAQSkZJRgAAEaAAUA...")})
</pre>
<p>
I stored the base64 string literally as a string, and let <code>read</code> do the hard work.
</p>
</div>
</div>

<div id="outline-container-Show-me-the-code" class="outline-2">
<h2 id="Show-me-the-code"><span class="section-number-2">3</span> Show me the code</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/casouri/lunarymacs/blob/master/site-lisp/iimg.el">Link to my site-lisp on GitHub</a>, and a <a href="file:///note/2020/embed-images-in-text-files/iimg.el.bak">local backup</a>.
</p>
</div>
</div>

<div id="outline-container-%E5%BE%8C%E6%97%A5%E8%AB%87%EF%BC%9ABetter-integration-with-Deft" class="outline-2">
<h2 id="%E5%BE%8C%E6%97%A5%E8%AB%87%EF%BC%9ABetter-integration-with-Deft"><span class="section-number-2">4</span> 後日談：Better integration with Deft</h2>
<div class="outline-text-2" id="text-4">
<p>
Deft stores file contents to cache, and storing the gibberish multi-megabyte image data to cache probably isn’t a good idea—it takes up memory and slows down searching. This is what we do:
</p>

<p>
First, define a function that prunes image data in a buffer:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">iimg-clean-data</span> <span style="color: #A8289C;">()</span>
    <span style="color: #9a9ea2;">"Clear any iimg-data in current buffer."</span>
    <span style="color: #A8289C;">(</span>goto-char <span style="color: #489446;">(</span>point-min<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
    <span style="color: #A8289C;">(</span><span style="color: #E04E49;">while</span> <span style="color: #489446;">(</span>re-search-forward iimg--data-regexp nil t<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span><span style="color: #E04E49;">let</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>inhibit-read-only t<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span>delete-region <span style="color: #A8289C;">(</span>match-beginning 0<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>match-end 0<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Second, add a hook to Deft to run our function before saving the file to cache. I forked deft.el and modified <code>deft-cache-newer-file</code> to run a hook before saving buffer content.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">with-temp-buffer</span>
  <span style="color: #A8289C;">(</span>insert-file-contents file nil nil nil t<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>run-hook-with-args 'deft-cache-file-hook<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setq</span> contents <span style="color: #489446;">(</span>buffer-substring-no-properties
                  <span style="color: #DA7A48;">(</span>point-min<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>point-max<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
The definition of the hook:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">deft-cache-file-hook</span> nil
  <span style="color: #9a9ea2;">"Hook run before a file is saved to the cache.</span>
<span style="color: #9a9ea2;">Run in a temp buffer with the file&#8217;s content with no argument."</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Finally, put our function in that hook:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>add-hook 'deft-cache-newer-file #'iimg-clean-data<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-%E5%BE%8C%E6%97%A5%E8%AB%872%EF%BC%9ASmooth-scrolling-over-images" class="outline-2">
<h2 id="%E5%BE%8C%E6%97%A5%E8%AB%872%EF%BC%9ASmooth-scrolling-over-images"><span class="section-number-2">5</span> 後日談2：Smooth scrolling over images</h2>
<div class="outline-text-2" id="text-5">
<p>
Because Emacs cannot partially display a line, inline images jumps in and out of the screen, which is super annoying. One solution is to display the image in multiple lines, so each line displays a strip of the image. I added this feature to iimg.el and now you can toggle between single and multi-line display by typing <code>m</code> on the image. Here is a demo scrolling over multi-line images (<a href="file:///note/2020/embed-images-in-text-files/multi-line.mp4">video link</a>):
</p>

<video controls width="100%">
<source src="./multi-line.mp4" type="video/mp4">
</video>

<p>
My Emacs finally looks like a modern editor, yay!
</p>

<p>
Here is another <a href="file:///note/2020/embed-images-in-text-files/iimg.el.bak2">local backup</a>.
</p>
</div>
</div>
]]></description>
<pubDate>Thu, 13 Aug 2020 16:52:00 -0400</pubDate>
</item>
<item>
<title>Home-brew use-package</title>
<link>https://archive.casouri.cat/note/2020/home-brew-use-package</link>
<guid>https://archive.casouri.cat/note/2020/home-brew-use-package</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Introducing-luna-load-package.el">1. Introducing luna-load-package.el</a></li>
<li><a href="#Implementation-details">2. Implementation details</a></li>
<li><a href="#Show-me-the-code">3. Show me the code</a></li>
</ul>
</div>
</div>
<p>
This is the second post of the “site-lisp” series.
</p>

<p>
<code>use-package</code> is in almost every Emacs configuration now. Mine is no different. However, because I’m a capricious child, I don’t like my whole configuration to depend on a large, third-party package. Plus I already wrap <code>use-package</code> to add some functionality specific to my configuration. Why don’t I write a home-brew <code>use-package</code>? It will be small and I can modify it anytime.
</p>

<div id="outline-container-Introducing-luna-load-package.el" class="outline-2">
<h2 id="Introducing-luna-load-package.el"><span class="section-number-2">1</span> Introducing luna-load-package.el</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>luna-load-package</code> is straightforward:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>pp <span style="color: #A8289C;">(</span>macroexpand-1 '<span style="color: #489446;">(</span>luna-load-package pkg
                      <span style="color: #A8289C;">:load-path</span> <span style="color: #489446;">"load-path"</span>
                      <span style="color: #A8289C;">:init</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> var1 'val1<span style="color: #DA7A48;">)</span>
                      <span style="color: #A8289C;">:mode</span> <span style="color: #489446;">"\\.txt"</span>
                      <span style="color: #A8289C;">:command</span> command
                      <span style="color: #A8289C;">:hook</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>prog-mode-hook text-mode-hook<span style="color: #A8289C;">)</span> . function<span style="color: #DA7A48;">)</span>
                      <span style="color: #A8289C;">:config</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> var2 'val2<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
<p>
expands to
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">condition-case</span> err
    <span style="color: #A8289C;">(</span><span style="color: #E04E49;">progn</span>
      <span style="color: #489446;">(</span>add-to-list 'luna-package-list 'pkg<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span><span style="color: #E04E49;">when</span> <span style="color: #DA7A48;">(</span>not <span style="color: #A8289C;">(</span>luna-installed-p 'pkg<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span><span style="color: #987816;">error</span> <span style="color: #489446;">"%s not installed"</span> 'pkg<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>autoload #'pkg <span style="color: #489446;">"pkg"</span> nil t<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>autoload #'function <span style="color: #489446;">"pkg"</span> nil t<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>add-to-list 'load-path <span style="color: #489446;">"load-path"</span><span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span><span style="color: #E04E49;">setq</span> var1 'val1<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>add-to-list 'auto-mode-alist
                   '<span style="color: #DA7A48;">(</span><span style="color: #489446;">"\\.txt"</span> . pkg<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>add-hook 'prog-mode-hook #'function<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>add-hook 'text-mode-hook #'function<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span><span style="color: #E04E49;">with-eval-after-load</span> 'pkg
        <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> var2 'val2<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      nil<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>debug error<span style="color: #489446;">)</span>
   <span style="color: #489446;">(</span><span style="color: #987816;">warn</span> <span style="color: #489446;">"Error when loading %s: %s"</span> 'pkg
         <span style="color: #DA7A48;">(</span>error-message-string err<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<ol class="org-ol">
<li>The form is wrapped in a <code>condition-case</code> form, so any error occurred inside doesn’t hang the startup.</li>
<li>We display a warning if the package is not installed.</li>
<li>There is an extra form, <code>(add-to-list 'luna-package-list 'pkg)</code>. <code>luna-package-list</code> contains all the package that my configuration needs. Later I can use <code>luna-install-all</code> to install all the packages in the list.</li>
<li>For each <code>:hook</code> function and <code>:mode</code> function, we also add autoloads for them.</li>
</ol>
</div>
</div>

<div id="outline-container-Implementation-details" class="outline-2">
<h2 id="Implementation-details"><span class="section-number-2">2</span> Implementation details</h2>
<div class="outline-text-2" id="text-2">
<p>
The macro is straightforward: the argument list looks like a special plist:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #A8289C;">:command1</span> arg1 arg2 <span style="color: #A8289C;">:command2</span> arg1 arg2 arg3 ...<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
We first transform it into a regular alist: <code>((COMMAND . ARG-LIST) ...)</code>. Then, we iterate over each <code>(COMMAND . ARG-LIST)</code> pair and expand according to <code>COMMAND</code>. For example:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">pcase</span> command
  ...
  <span style="color: #A8289C;">(</span><span style="color: #A8289C;">:config</span> `<span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span><span style="color: #E04E49;">with-eval-after-load</span> ',package
             ,@arg-list<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Finally, we assemble each expanded commands together, wrapping <code>condition-case</code> around and add some global forms like adding to <code>luna-package-list</code>, and <code>require</code> form:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">`<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">condition-case</span> err
     <span style="color: #A8289C;">(</span><span style="color: #E04E49;">progn</span>
       <span style="color: #489446;">(</span>add-to-list 'luna-package-list ',package<span style="color: #489446;">)</span>
       <span style="color: #489446;">(</span><span style="color: #E04E49;">when</span> <span style="color: #DA7A48;">(</span>not <span style="color: #A8289C;">(</span>luna-installed-p ',package<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span><span style="color: #987816;">error</span> <span style="color: #489446;">"%s not installed"</span> ',package<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
       ,@autoload-list
       <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">BODY is the expanded forms.</span>
       ,@body
       ,<span style="color: #489446;">(</span><span style="color: #E04E49;">unless</span> defer-p `<span style="color: #DA7A48;">(</span><span style="color: #E04E49;">require</span> ',package<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
   <span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>debug error<span style="color: #489446;">)</span> <span style="color: #489446;">(</span><span style="color: #987816;">warn</span> <span style="color: #489446;">"Error when loading %s: %s"</span> ',package
                        <span style="color: #DA7A48;">(</span>error-message-string err<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
That’s it, the whole package is just short of 200 lines, and works quite nicely.
</p>
</div>
</div>

<div id="outline-container-Show-me-the-code" class="outline-2">
<h2 id="Show-me-the-code"><span class="section-number-2">3</span> Show me the code</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/casouri/lunarymacs/blob/master/site-lisp/luna-load-package.el">Here it is.</a> In case I change my configuration, here is a <a href="file:///note/2020/home-brew-use-package/luna-load-package.el.bak">local backup</a>.
</p>
</div>
</div>
]]></description>
<pubDate>Thu, 30 Jul 2020 20:53:00 -0400</pubDate>
</item>
<item>
<title>Simple (Back) Links in Any File</title>
<link>https://archive.casouri.cat/note/2020/simple-(back)-links-in-any-file</link>
<guid>https://archive.casouri.cat/note/2020/simple-(back)-links-in-any-file</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Introducing-bklink.el">1. Introducing bklink.el</a></li>
<li><a href="#Implementation-details">2. Implementation details</a></li>
<li><a href="#Show-me-the-code">3. Show me the code</a></li>
<li><a href="#%E5%BE%8C%E6%97%A5%E8%AB%87%EF%BC%9ABack-link-summary-at-the-bottom">4. 後日談：Back-link summary at the bottom</a></li>
<li><a href="#%E5%BE%8C%E6%97%A5%E8%AB%872%EF%BC%9AInclude-more-links-in-the-summary">5. 後日談2：Include more links in the summary</a></li>
</ul>
</div>
</div>
<p>
This is the first post of my new blog series “site-lisp packages” where I introduce some packages in my <code>site-lisp</code> directory. Currently, I’ve collected 20+ packages, surely someone will find some of them helpful.
</p>

<p>
Recently I started to use <a href="https://jblevins.org/projects/deft/">Deft</a> as a replacement for Apple’s Notes.app to take some technical notes. Meanwhile, Zettelkasten and org-roam has caught my eye. These links and back-links are certainly useful for organizing my notes. 
</p>

<p>
Some cool guy has already written a package, <a href="https://www.eliasstorms.net/zetteldeft/zetteldeft.html#install">zetteldeft</a>, that combines deft and back-links. However, I don’t really like his use of ids. Why don’t we just use filenames to identify a file? And back-links doesn’t need a database like org-roam does, for my simple use-cases, I can just use <code>grep</code>.
</p>

<div id="outline-container-Introducing-bklink.el" class="outline-2">
<h2 id="Introducing-bklink.el"><span class="section-number-2">1</span> Introducing bklink.el</h2>
<div class="outline-text-2" id="text-1">
<p>
bklink.el is my cheap version of org-roam that only provides two features:
</p>
<ol class="org-ol">
<li>make links to other files.</li>
<li>show back-links from other files.</li>
</ol>
<p>
It works in any text file format, and uses filenames as links, no ids or databases. However, it only works in these situations:
</p>
<ol class="org-ol">
<li>All the files are in the same directory, no sub-directories.</li>
<li>There aren’t a huge number of files.</li>
</ol>
<p>
These assumptions make the implementation simpler, and suits my notes well.
</p>

<p>
Specifically, bklink.el provides three functions:
</p>
<ol class="org-ol">
<li><code>bklink-insert</code> inserts a link to another file in the directory.</li>
<li><code>bklink-show-back-link</code> shows a small buffer below the current buffer, containing back-links for this file.</li>
<li><code>bklink-rename</code> to rename all links that points to this file.</li>
</ol>

<p>
The links inserted looks like <code>“file name”</code>, while the actual text is <code>[{file name.ext}]</code>.
</p>

<p>
One thing I think I did right is the back-link buffer: it automatically follows the main buffer as you move/hide/switch to the main buffer. So I never need to manually close or move the buffer. The back-link buffer in org-roam annoys me a little, so I paid attention to get it right in bklink.el.
</p>

<p>
Here is a demo of bklink.el:
</p>

<video controls width="100%">
<source src="./bklink-demo-2.mp4" type="video/mp4">
</video>
</div>
</div>

<div id="outline-container-Implementation-details" class="outline-2">
<h2 id="Implementation-details"><span class="section-number-2">2</span> Implementation details</h2>
<div class="outline-text-2" id="text-2">
<p>
Because I made some assumptions on my notes, I can simplify the implementation:
</p>
<ol class="org-ol">
<li>All the files are in the same directory, no sub-directories. So I can just use base filename as unique identifiers. This also means I can work in different directories in the same time without any conflict.</li>
<li>We don’t have a huge number of files, so an async grep should be fast enough to get the back-links. In fact, even if there are too many files for grep to handle, I have a backup plan that adds cache files, so I’m not too worried about the future.</li>
</ol>

<p>
The links are formatted as <code>[{filename.ext}]</code>, and displayed as <code>“filename”</code>. This format has several advantages:
</p>
<ol class="org-ol">
<li>It doesn’t conflict with Org Mode’s link format. Although most of my notes are in plain text format, I do have some Org files in my notes.</li>
<li>I don’t hide the delimiters, but render them as quotes. In my experience, hiding delimiters makes editing the text more difficult (think about links in Org Mode).</li>
</ol>

<p>
In fact, I didn’t start with this format. I started with one that’s similar to zetteldeft’s, and changed it several times:
</p>


<div id="orgf180be0" class="figure">
<p><img src="/note/2020/simple-(back)-links-in-any-file/links.png" alt="links.png" />
</p>
</div>

<p>
The good thing about writing your own package is that not only can you write it to fit your specific need (like the assumptions I made on my notes), but also can you change the design anytime. (This is also why I don’t publish these small packages, I don’t want to be responsible for a stable user experience.)
</p>

<p>
Apart from the “sticky” back-link buffer (read more about it in <a href="file:///note/2020/atomic-buffer/index.html">Atomic Buffer</a>), there aren’t much to talk about. Getting back-links is just calling grep in a sub-process and installing a sentinel that parses the stdout and inserts back-links into the back-link buffer. I also added highlight for URL links, so I can click on URL’s in my note.
</p>

<p>
The funny thing about renaming is that, there is no UNIX command that can I can write in one line, or even less than 10 lines, that searches &amp; replaces text literally. So I ended up grepping files and replace with Emacs—I grep for a list of files that contains the link, writes them to a temporary file, start an Emacs process in batch mode, load bklink.el, load the temporary file, and call a replace function I defined in bklink.el on each file.
</p>
</div>
</div>

<div id="outline-container-Show-me-the-code" class="outline-2">
<h2 id="Show-me-the-code"><span class="section-number-2">3</span> Show me the code</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/casouri/lunarymacs/blob/master/site-lisp/bklink.el">Here it is.</a> In case I change my configuration, here is a <a href="file:///note/2020/simple-(back)-links-in-any-file/bklink.el.bak">local backup</a>.
</p>
</div>
</div>

<div id="outline-container-%E5%BE%8C%E6%97%A5%E8%AB%87%EF%BC%9ABack-link-summary-at-the-bottom" class="outline-2">
<h2 id="%E5%BE%8C%E6%97%A5%E8%AB%87%EF%BC%9ABack-link-summary-at-the-bottom"><span class="section-number-2">4</span> 後日談：Back-link summary at the bottom</h2>
<div class="outline-text-2" id="text-4">
<p>
Someone drew some inspiration from bklink.el and wrote another roam package, <a href="https://github.com/Kinneyzhang/gk-roam.el">gk-roam.el</a>. It tries to mimic Roam Research better than org-roam. I like its back-link summary a lot: just like Roam Research, at the bottom of the buffer, you see a list of files that links to this file with surrounding context. I like it better than my current back-link window so I threw my back-link window away and replaced it with back-link summary.
</p>

<p>
What’s cool about this new back-link summary is that, even though you see it in the buffer like normal text, it is not saved to the file. So you can regard it as virtual text. Here is a demo:
</p>

<video controls width="100%">
<source src="./summary.mp4" type="video/mp4">
</video>

<p>
Cool huh? This is done by adding a hook to <code>write-file-functions</code>, to which <code>save-buffer</code> calls to possibly delegate the work. In our hook we delete the back-link summary and saves to the file. And when we insert the summary, we suppress the modified flag so it looks like the buffer content is still in-sync with the file.
</p>

<p>
When we insert the summary:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">with-buffer-modified-unmodified</span>
 ...<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
In <code>write-file-functions</code> hook:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">save-excursion</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>this-buffer <span style="color: #A8289C;">(</span>current-buffer<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span>this-file <span style="color: #A8289C;">(</span>buffer-file-name<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">with-temp-buffer</span>
      <span style="color: #DA7A48;">(</span>insert-buffer-substring this-buffer<span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Delete summary</span>
      <span style="color: #DA7A48;">(</span>write-region <span style="color: #A8289C;">(</span>point-min<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>point-max<span style="color: #A8289C;">)</span> this-file<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>clear-visited-file-modtime<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>set-buffer-modified-p nil<span style="color: #489446;">)</span>
    t<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
<a href="file:///note/2020/simple-(back)-links-in-any-file/bklink.el.bak.3">New local backup</a>.
</p>
</div>
</div>

<div id="outline-container-%E5%BE%8C%E6%97%A5%E8%AB%872%EF%BC%9AInclude-more-links-in-the-summary" class="outline-2">
<h2 id="%E5%BE%8C%E6%97%A5%E8%AB%872%EF%BC%9AInclude-more-links-in-the-summary"><span class="section-number-2">5</span> 後日談2：Include more links in the summary</h2>
<div class="outline-text-2" id="text-5">
<p>
After taking notes for a while, I found myself adding links as tags all over the place. I took a note about selective display:
</p>
<pre class="example" id="orgb4c4790">
selective display

In Emacs, set-selective-display to N and Emacs only display lines with
indent less than N.
</pre>

<p>
And I start to tag this file with “Emacs”, “Emacs functions”, etc, so that this file appears in the back-link summary of “Emacs”. Not only is this tedious and error-prune (many files I forget to tag), but also kind of awkward. In my summary, instead of seeing the surrounding context (like a sentence), I see a bunch of “Emacs”:
</p>


<div id="orga16731d" class="figure">
<p><img src="/note/2020/simple-(back)-links-in-any-file/back-links-1.png" alt="back-links-1.png" />
</p>
</div>

<p>
How can we improve? Instead of searching only for links, I decide to add an option to also search for any occurrence of the filename in other files. So, besides searching for <code>[{Emacs.txt}]</code>, we are also searching for plain <code>Emacs</code>. And the result is splendid: I get more matches, and some I wound’t thought to tag in the first place:
</p>


<div id="orgea5f126" class="figure">
<p><img src="/note/2020/simple-(back)-links-in-any-file/back-links-2.png" alt="back-links-2.png" />
</p>
</div>

<p>
Admittedly, there are a bunch of links that just matches the title, still the advantage is clear. I don’t need to manually add a link each time I type “Emacs” (which is quite often) and can still get a back-link summary for it.
</p>

<p>
P.S. As you can see, I changed the appearance of links once again. Capricious, I know.
</p>

<p>
<a href="file:///note/2020/simple-(back)-links-in-any-file/bklink.el.bak.4">Latest local backup</a>.
</p>
</div>
</div>
]]></description>
<pubDate>Thu, 30 Jul 2020 15:31:00 -0400</pubDate>
</item>
<item>
<title>Atomic Buffer</title>
<link>https://archive.casouri.cat/note/2020/atomic-buffer</link>
<guid>https://archive.casouri.cat/note/2020/atomic-buffer</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#The-implementation">1. The implementation</a></li>
<li><a href="#Some-limitations">2. Some limitations</a></li>
<li><a href="#Practical-use">3. Practical use</a></li>
<li><a href="#Similar-features-in-Emacs">4. Similar features in Emacs</a></li>
</ul>
</div>
</div>
<p>
Sometimes it’s nice to combine two buffers and treat them as one, for example, a source buffer and a REPL buffer. And when you move or hide one of the buffers, the other buffer moves/hides with it. Wouldn’t that be neat!
</p>

<p>
Unfortunately, Emacs doesn’t have such a mechanism built-in, but we can write one. Here is a demo: we have a master and a minion, whenever you move master around, or hide it, or switch to it, the minion follows its master.
</p>

<p>
Here is a demo video, if you can’t view it embedded, <a href="file:///note/2020/atomic-buffer/minion-demo.mp4">here is the link to it.</a> In the demo:
</p>
<ol class="org-ol">
<li>We first display the minion buffer.</li>
<li>Move the master to left, and minion follows the master to the left.</li>
<li>Move the master to right and the minion follows it.</li>
<li>Switch to scratch buffer, and both the master and minion disappears.</li>
<li>Switch back to the master, and both appears.</li>
<li>Switch to the master in the left window, and both appears.</li>
</ol>

<video controls width="100%">
<source src="./minion-demo.mp4" type="video/mp4">
</video>

<div id="outline-container-The-implementation" class="outline-2">
<h2 id="The-implementation"><span class="section-number-2">1</span> The implementation</h2>
<div class="outline-text-2" id="text-1">
<p>
Now let’s go over how it’s done. (Note: this relies on a hook introduced in Emacs 27.) First, some variables and helper functions.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar-local</span> <span style="color: #A8289C;">masterp</span> nil
  <span style="color: #9a9ea2;">"Non-nil if this is a master buffer."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar-local</span> <span style="color: #A8289C;">minionp</span> nil
  <span style="color: #9a9ea2;">"Non-nil if this is a minion buffer."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">get-master</span> <span style="color: #A8289C;">(</span>minion<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Return the master buffer of MINION buffer."</span>
  <span style="color: #A8289C;">(</span>get-buffer <span style="color: #489446;">"master"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">create-minion</span> <span style="color: #A8289C;">(</span>master<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Create the minion buffer for MASTER buffer."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">with-current-buffer</span> <span style="color: #489446;">(</span>get-buffer-create <span style="color: #489446;">"minion"</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>insert <span style="color: #489446;">"Minion\n\n(I&#8217;m following Master!)"</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">setq</span> minionp t<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">get-minion</span> <span style="color: #A8289C;">(</span>master<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Return the minion buffer of MASTER buffer."</span>
  <span style="color: #A8289C;">(</span>get-buffer <span style="color: #489446;">"minion"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Then, functions to show and hide a minion’s window.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">show-minion</span> <span style="color: #A8289C;">(</span>minion master-window<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Show MINION next to MASTER-WINDOW."</span>
  <span style="color: #A8289C;">(</span>set-window-dedicated-p
   <span style="color: #489446;">(</span>display-buffer-in-atom-window
    minion `<span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>side . below<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>window . ,master-window<span style="color: #A8289C;">)</span>
             <span style="color: #A8289C;">(</span>window-height . 0.3<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
   t<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">delete-minion-window</span> <span style="color: #A8289C;">(</span>minion-window<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Delete MINION-WINDOW."</span>
  <span style="color: #A8289C;">(</span>set-window-parameter minion-window 'window-atom nil<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>delete-window minion-window<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Now the crucial part: how do we keep minions and masters’ window in sync? Suppose we have such a layout:
</p>

<pre class="example" id="org48d3bb8">
┌────────┬────────┐
│ Master │        │
│        │        │
├────────┤        │
│ Minion │        │
└────────┴────────┘
</pre>

<p>
And we move the master buffer to the right.
</p>

<pre class="example" id="orgc8b88b0">
┌────────┬────────┐     ┌────────┬────────┐
│ Master │        │     │        │        │
│        │        │ --→ │        │ Master │
├────────┤        │     ├────────┤        │
│ Minion │        │     │ Minion │        │
└────────┴────────┘     └────────┴────────┘
</pre>

<p>
Now everything is out-of-sync! We want to sync master and minion buffers back together.
</p>

<pre class="example" id="orgf6c391b">
┌────────┬────────┐     ┌────────┬────────┐
│        │        │     │        │ Master │
│        │ Master │ --→ │        │        │
├────────┤        │     │        ├────────┤
│ Minion │        │     │        │ Minion │
└────────┴────────┘     └────────┴────────┘
</pre>

<p>
This is what we do: For each buffer:
</p>
<ol class="org-ol">
<li>If it is a minion buffer, go through each minion-window and see if that window is out-of-place, i.e., not next to a master-window. If so, delete that minion-window.</li>
<li>If it is a master buffer, go through each master-window and see if that window has an accompanying minion window, if not, create one for it.</li>
</ol>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">share-parent-any</span> <span style="color: #A8289C;">(</span>win win-list<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Return non-nil if WIN and any window in WIN-LIST shares parent."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">cl-labels</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>share-parent <span style="color: #A8289C;">(</span>a b<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>eq <span style="color: #987816;">(</span>window-parent a<span style="color: #987816;">)</span>
                                      <span style="color: #987816;">(</span>window-parent b<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">cl-loop</span> for w in win-list
             if <span style="color: #DA7A48;">(</span>share-parent win w<span style="color: #DA7A48;">)</span>
             return t
             finally return nil<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">sync-window</span> <span style="color: #A8289C;">(</span>_<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Make sure each minion is next to each master."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">cl-labels</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>in-the-right-place
               <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Is this minion-window out-of-place?</span>
               <span style="color: #A8289C;">(</span>minion-window master-windows<span style="color: #A8289C;">)</span>
               <span style="color: #A8289C;">(</span>share-parent-any minion-window
                                 master-windows<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
              <span style="color: #DA7A48;">(</span>has-minion-next-to-it
               <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Does this master-window has a minion-window next to it?</span>
               <span style="color: #A8289C;">(</span>master-window minion-windows<span style="color: #A8289C;">)</span>
               <span style="color: #A8289C;">(</span>share-parent-any master-window
                                 minion-windows<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #DA7A48;">(</span>buf <span style="color: #A8289C;">(</span>buffer-list<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">cond</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>buffer-local-value 'minionp buf<span style="color: #987816;">)</span>
             <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Delete minion windows that are out-of-place.</span>
             <span style="color: #987816;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #2C79F5;">(</span><span style="color: #80a880;">(</span>minion buf<span style="color: #80a880;">)</span>
                    <span style="color: #80a880;">(</span>minion-windows <span style="color: #887070;">(</span>get-buffer-window-list minion<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                    <span style="color: #80a880;">(</span>master <span style="color: #887070;">(</span>get-master minion<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                    <span style="color: #80a880;">(</span>master-windows <span style="color: #887070;">(</span>get-buffer-window-list master<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
               <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #80a880;">(</span>minion-window minion-windows<span style="color: #80a880;">)</span>
                 <span style="color: #80a880;">(</span><span style="color: #E04E49;">if</span> <span style="color: #887070;">(</span>not <span style="color: #2C79F5;">(</span>in-the-right-place
                           minion-window master-windows<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span>
                     <span style="color: #887070;">(</span>delete-minion-window minion-window<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
            <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>buffer-local-value 'masterp buf<span style="color: #987816;">)</span>
             <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Make sure each master has a minion window next to it.</span>
             <span style="color: #987816;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #2C79F5;">(</span><span style="color: #80a880;">(</span>master buf<span style="color: #80a880;">)</span>
                    <span style="color: #80a880;">(</span>master-windows <span style="color: #887070;">(</span>get-buffer-window-list master<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                    <span style="color: #80a880;">(</span>minion <span style="color: #887070;">(</span>get-minion master<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                    <span style="color: #80a880;">(</span>minion-windows <span style="color: #887070;">(</span>get-buffer-window-list minion<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
               <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">when</span> minion
                 <span style="color: #80a880;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #887070;">(</span>master-window master-windows<span style="color: #887070;">)</span>
                   <span style="color: #887070;">(</span><span style="color: #E04E49;">if</span> <span style="color: #2C79F5;">(</span>not <span style="color: #A8289C;">(</span>has-minion-next-to-it
                             master-window minion-windows<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
                       <span style="color: #2C79F5;">(</span>show-minion minion master-window<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Finally, we add our sync function to <code>window-buffer-change-functions</code> globally, which will run when any window has been added, deleted, or changed its buffer. We also define a minor mode to toggle the display of the minion.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">define-minor-mode</span> <span style="color: #A8289C;">auto-sync-mode</span>
  <span style="color: #9a9ea2;">"Auto sync minion and master."</span>
  <span style="color: #A8289C;">:global</span> t
  <span style="color: #A8289C;">:lighter</span> <span style="color: #489446;">""</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> auto-sync-mode
      <span style="color: #489446;">(</span>add-hook 'window-buffer-change-functions #'sync-window<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>remove-hook 'window-buffer-change-functions #'sync-window<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">define-minor-mode</span> <span style="color: #A8289C;">show-minion-mode</span>
  <span style="color: #9a9ea2;">"Show minion."</span>
  <span style="color: #A8289C;">:lighter</span> <span style="color: #489446;">""</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setq</span> masterp t<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> show-minion-mode
      <span style="color: #489446;">(</span><span style="color: #E04E49;">progn</span> <span style="color: #DA7A48;">(</span>create-minion <span style="color: #A8289C;">(</span>current-buffer<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
             <span style="color: #DA7A48;">(</span>sync-window nil<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">let</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>minion <span style="color: #987816;">(</span>get-minion <span style="color: #2C79F5;">(</span>current-buffer<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #A8289C;">(</span>window <span style="color: #987816;">(</span>get-buffer-window-list minion<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>delete-minion-window window<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span>kill-buffer minion<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

</pre>
</div>

<p>
Now, in the master buffer, type <code>M-x show-minion-mode RET</code> and <code>M-x auto-sync-mode RET</code>. And you have a minion buffer that follows its master around! The complete code can be found in <a href="file:///note/2020/atomic-buffer/atomic-buffer.el">file:///note/2020/atomic-buffer/atomic-buffer.el</a>.
</p>
</div>
</div>

<div id="outline-container-Some-limitations" class="outline-2">
<h2 id="Some-limitations"><span class="section-number-2">2</span> Some limitations</h2>
<div class="outline-text-2" id="text-2">
<p>
Emacs has a concept of “atomic windows”. meaning all windows in such an atomic window group will be treated as one. There is no distinction between master and minion in an atomic window group. We introduced such distinction for atomic buffer because we need to know that when out of sync, which buffer should follow which buffer. Atomic windows don’t need this distinction because they are never out of sync.
</p>

<p>
In the demo, each master only has one minion. It wouldn’t be hard to let each master have multiple minions, you need to figure out a way to nicely display multiple minions alongside each other.
</p>
</div>
</div>

<div id="outline-container-Practical-use" class="outline-2">
<h2 id="Practical-use"><span class="section-number-2">3</span> Practical use</h2>
<div class="outline-text-2" id="text-3">
<p>
For each org-roam document, org-roam displays a back-link buffer containing files that link to that document (hence “back-link”). Such a document &amp; back-link buffer combination is a natural fit for our master &amp; minion model. I don’t use org-roam but I have a simple back-link package that I use myself. I applied atomic buffers to it and the result is pretty neat: the back-link buffer follows the document and I never need to manually close/manage it anymore. Here is a demo for it, and <a href="file:///note/2020/atomic-buffer/bklink-demo.mp4">here is a link to the video.</a>
</p>

<video controls width="100%">
<source src="./bklink-demo.mp4" type="video/mp4">
</video>
</div>
</div>

<div id="outline-container-Similar-features-in-Emacs" class="outline-2">
<h2 id="Similar-features-in-Emacs"><span class="section-number-2">4</span> Similar features in Emacs</h2>
<div class="outline-text-2" id="text-4">
<p>
Emacs has some similar (but not quite the same) features. You can create atomic windows (<code>display-buffer-in-atom-window</code>), as mentioned before, windows in an atomic group will be treated as one when splitting and deleting. But this grouping is only between windows, not buffers. Emacs also has side windows (<code>display-buffer-in-side-window</code>). Side windows live on the sides of a frame and stay on the side. <code>C-x 1</code> (<code>delete-other-windows</code>) will not delete side windows.
</p>
</div>
</div>
]]></description>
<pubDate>Sat, 25 Jul 2020 10:22:00 -0400</pubDate>
</item>
<item>
<title>Better-looking Verbatim Markup in Org Mode</title>
<link>https://archive.casouri.cat/note/2020/better-looking-verbatim-markup-in-org-mode</link>
<guid>https://archive.casouri.cat/note/2020/better-looking-verbatim-markup-in-org-mode</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#New-method-(%3Cspan-class=%22timestamp-wrapper%22%3E%3Cspan-class=%22timestamp%22%3E&lt;2020-07-23-Thu&gt;%3C/span%3E%3C/span%3E)">1. New method (<span class="timestamp-wrapper"><span class="timestamp">&lt;2020-07-23 Thu&gt;</span></span>)</a></li>
<li><a href="#Old-method">2. Old method</a></li>
</ul>
</div>
</div>
<p>
Org mode has two verbatim markups: <code>~code~</code> and <code>=verbatim=</code>. I think Markdown’s <code>`code`</code> looks better as backticks are smaller, thus more unobtrusive when in body text and tables. I made <code>~</code> and <code>=</code> in Org Mode to display as <code>`</code>, the result looks pretty good:
</p>


<div id="org77d55ba" class="figure">
<p><img src="/note/2020/better-looking-verbatim-markup-in-org-mode/demo.png" alt="demo.png" />
</p>
</div>

<div id="outline-container-New-method-(%3Cspan-class=%22timestamp-wrapper%22%3E%3Cspan-class=%22timestamp%22%3E&lt;2020-07-23-Thu&gt;%3C/span%3E%3C/span%3E)" class="outline-2">
<h2 id="New-method-(%3Cspan-class=%22timestamp-wrapper%22%3E%3Cspan-class=%22timestamp%22%3E&lt;2020-07-23-Thu&gt;%3C/span%3E%3C/span%3E)"><span class="section-number-2">1</span> New method (<span class="timestamp-wrapper"><span class="timestamp">&lt;2020-07-23 Thu&gt;</span></span>)</h2>
<div class="outline-text-2" id="text-1">
<p>
The old method has some problems including 1) delimiters disappear for unknown reason, and 2) we need to redefine Org Mode’s function. Here is a new method that solves both problems.
</p>

<p>
Basically we add another function to <code>jit-lock-functions</code> which runs after Org Mode has fontified the buffer text. Then we make any <code>~</code> and <code>=</code> character that has <code>org-code</code> face or <code>org-verbatim</code> face to display <code>`</code> instead.
</p>

<p>
To enabled it just add <code>org-backtick-mode</code> to <code>org-mdoe-hook</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">org-backtick-fontify</span> <span style="color: #A8289C;">(</span>beg end<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Fontify ~ and = between BEG and END."</span>
  <span style="color: #A8289C;">(</span>goto-char beg<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">while</span> <span style="color: #489446;">(</span>re-search-forward <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">rx</span> <span style="color: #A8289C;">(</span><span style="color: #E04E49;">or</span> <span style="color: #489446;">"~"</span> <span style="color: #489446;">"="</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span> end t<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>text-props <span style="color: #987816;">(</span>text-properties-at <span style="color: #2C79F5;">(</span>match-beginning 0<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
           <span style="color: #A8289C;">(</span>face <span style="color: #987816;">(</span>plist-get text-props 'face<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Make it display backtick if the face indicates that</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">it&#8217;s a code/verbatim delimiter.</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">if</span> <span style="color: #A8289C;">(</span><span style="color: #E04E49;">or</span> <span style="color: #987816;">(</span>equal face '<span style="color: #2C79F5;">(</span>org-code<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
              <span style="color: #987816;">(</span>equal face '<span style="color: #2C79F5;">(</span>org-verbatim<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
          <span style="color: #A8289C;">(</span>put-text-property
           <span style="color: #987816;">(</span>match-beginning 0<span style="color: #987816;">)</span> <span style="color: #987816;">(</span>match-end 0<span style="color: #987816;">)</span> 'display <span style="color: #489446;">"`"</span><span style="color: #A8289C;">)</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Clean up our face if it&#8217;s not a code/verbatim</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">delimiter anymore.</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">when</span> <span style="color: #987816;">(</span>equal <span style="color: #2C79F5;">(</span>plist-get text-props 'display<span style="color: #2C79F5;">)</span> <span style="color: #489446;">"`"</span><span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span>put-text-property
           <span style="color: #2C79F5;">(</span>match-beginning 0<span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>match-end 0<span style="color: #2C79F5;">)</span> 'display nil<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>cons 'jit-lock-bounds <span style="color: #489446;">(</span>cons beg end<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">define-minor-mode</span> <span style="color: #A8289C;">org-backtick-mode</span>
  <span style="color: #9a9ea2;">"Display ~ and = as backticks."</span>
  <span style="color: #A8289C;">:lighter</span> <span style="color: #489446;">""</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> org-backtick-mode
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">We want to run after org-mode&#8217;s font-lock function.</span>
      <span style="color: #489446;">(</span>add-hook 'jit-lock-functions #'org-backtick-fontify 91 t<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>remove-hook 'jit-lock-functions #'org-backtick-fontify t<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>jit-lock-refontify<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>


<div id="outline-container-Old-method" class="outline-2">
<h2 id="Old-method"><span class="section-number-2">2</span> Old method</h2>
<div class="outline-text-2" id="text-2">
<p>
The idea is to add an <code>display</code> text property to the markers when fontifying them. First, in <code>org-emphasis-alist</code>, I added an extra fourth entry for <code>~</code> and <code>=</code>: the text property we will add to <code>~</code> and <code>=</code> in fontification function.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #489446;">"="</span> org-verbatim verbatim <span style="color: #A8289C;">(</span>display <span style="color: #489446;">"`"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #489446;">"~"</span> org-code verbatim <span style="color: #A8289C;">(</span>display <span style="color: #489446;">"`"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Sadly, there is no opportunity for hooks or advising the fontification function, I had to redefine <code>org-do-emphasis-faces</code>. Towards the end of the function, we first change the <code>pcase</code> form to extract our extra entry added earlier, we change
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">pcase-let</span> <span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>`<span style="color: #DA7A48;">(</span>,_ ,face ,_<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>assoc marker org-emphasis-alist<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  ...<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">pcase-let</span> <span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>`<span style="color: #DA7A48;">(</span>,_ ,face ,_ ,props<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>assoc marker org-emphasis-alist<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  ...<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Then, before 
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">when</span> org-hide-emphasis-markers
  <span style="color: #A8289C;">(</span>add-text-properties <span style="color: #489446;">(</span>match-end 4<span style="color: #489446;">)</span> <span style="color: #489446;">(</span>match-beginning 5<span style="color: #489446;">)</span>
                       '<span style="color: #489446;">(</span>invisible org-link<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>add-text-properties <span style="color: #489446;">(</span>match-beginning 3<span style="color: #489446;">)</span> <span style="color: #489446;">(</span>match-end 3<span style="color: #489446;">)</span>
                       '<span style="color: #489446;">(</span>invisible org-link<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
we add
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">when</span> props
  <span style="color: #A8289C;">(</span>add-text-properties <span style="color: #489446;">(</span>match-end 4<span style="color: #489446;">)</span> <span style="color: #489446;">(</span>match-beginning 5<span style="color: #489446;">)</span>
                       props<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>add-text-properties <span style="color: #489446;">(</span>match-beginning 3<span style="color: #489446;">)</span> <span style="color: #489446;">(</span>match-end 3<span style="color: #489446;">)</span>
                       props<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
“Wait”, you may ask, “why not use <code>org-hide-emphasis-markers</code>?” You can try, and you will regret it. The invisible markers make editing text around them a nightmare. 
</p>

<p>
Finally, here is the full code:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">with-eval-after-load</span> 'org
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setq</span> org-emphasis-alist
        '<span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span><span style="color: #489446;">"*"</span> bold<span style="color: #DA7A48;">)</span>
          <span style="color: #DA7A48;">(</span><span style="color: #489446;">"/"</span> italic<span style="color: #DA7A48;">)</span>
          <span style="color: #DA7A48;">(</span><span style="color: #489446;">"_"</span> underline<span style="color: #DA7A48;">)</span>
          <span style="color: #DA7A48;">(</span><span style="color: #489446;">"="</span> org-verbatim verbatim <span style="color: #A8289C;">(</span>display <span style="color: #489446;">"`"</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
          <span style="color: #DA7A48;">(</span><span style="color: #489446;">"~"</span> org-code verbatim <span style="color: #A8289C;">(</span>display <span style="color: #489446;">"`"</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
          <span style="color: #DA7A48;">(</span><span style="color: #489446;">"+"</span>
           <span style="color: #A8289C;">(</span><span style="color: #A8289C;">:strike-through</span> t<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>

  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">org-do-emphasis-faces</span> <span style="color: #489446;">(</span>limit<span style="color: #489446;">)</span>
    <span style="color: #9a9ea2;">"Run through the buffer and emphasize strings."</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">let</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>quick-re <span style="color: #987816;">(</span>format <span style="color: #489446;">"</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">[%s]</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">^</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">[~=*/_+]</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #489446;">"</span>
                            <span style="color: #2C79F5;">(</span>car org-emphasis-regexp-components<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">catch</span> <span style="color: #A8289C;">:exit</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">while</span> <span style="color: #987816;">(</span>re-search-forward quick-re limit t<span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #2C79F5;">(</span><span style="color: #80a880;">(</span>marker <span style="color: #887070;">(</span>match-string 2<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                 <span style="color: #80a880;">(</span>verbatim? <span style="color: #887070;">(</span>member marker '<span style="color: #2C79F5;">(</span><span style="color: #489446;">"~"</span> <span style="color: #489446;">"="</span><span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
            <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">when</span> <span style="color: #80a880;">(</span><span style="color: #E04E49;">save-excursion</span>
                    <span style="color: #887070;">(</span>goto-char <span style="color: #2C79F5;">(</span>match-beginning 0<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span>
                    <span style="color: #887070;">(</span><span style="color: #E04E49;">and</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not match table hlines.</span>
                     <span style="color: #2C79F5;">(</span>not <span style="color: #A8289C;">(</span><span style="color: #E04E49;">and</span> <span style="color: #489446;">(</span>equal marker <span style="color: #489446;">"+"</span><span style="color: #489446;">)</span>
                               <span style="color: #489446;">(</span>org-match-line
                                <span style="color: #489446;">"[ \t]*</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">|[-+]+|?</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">\\+[-+]+\\+</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #489446;">[ \t]*$"</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not match headline stars.  Do not consider</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">stars of a headline as closing marker for bold</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">markup either.</span>
                     <span style="color: #2C79F5;">(</span>not <span style="color: #A8289C;">(</span><span style="color: #E04E49;">and</span> <span style="color: #489446;">(</span>equal marker <span style="color: #489446;">"*"</span><span style="color: #489446;">)</span>
                               <span style="color: #489446;">(</span><span style="color: #E04E49;">save-excursion</span>
                                 <span style="color: #DA7A48;">(</span>forward-char<span style="color: #DA7A48;">)</span>
                                 <span style="color: #DA7A48;">(</span>skip-chars-backward <span style="color: #489446;">"*"</span><span style="color: #DA7A48;">)</span>
                                 <span style="color: #DA7A48;">(</span>looking-at-p org-outline-regexp-bol<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Match full emphasis markup regexp.</span>
                     <span style="color: #2C79F5;">(</span>looking-at <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> verbatim? org-verbatim-re org-emph-re<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not span over paragraph boundaries.</span>
                     <span style="color: #2C79F5;">(</span>not <span style="color: #A8289C;">(</span>string-match-p org-element-paragraph-separate
                                          <span style="color: #489446;">(</span>match-string 2<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not span over cells in table rows.</span>
                     <span style="color: #2C79F5;">(</span>not <span style="color: #A8289C;">(</span><span style="color: #E04E49;">and</span> <span style="color: #489446;">(</span><span style="color: #E04E49;">save-match-data</span> <span style="color: #DA7A48;">(</span>org-match-line <span style="color: #489446;">"[ \t]*|"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
                               <span style="color: #489446;">(</span>string-match-p <span style="color: #489446;">"|"</span> <span style="color: #DA7A48;">(</span>match-string 4<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
              <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">beg</span>
              <span style="color: #80a880;">(</span><span style="color: #E04E49;">pcase-let</span> <span style="color: #887070;">(</span><span style="color: #2C79F5;">(</span>`<span style="color: #A8289C;">(</span>,_ ,face ,_ ,props<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>assoc marker org-emphasis-alist<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span>
                <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">end</span>
                <span style="color: #887070;">(</span>font-lock-prepend-text-property
                 <span style="color: #2C79F5;">(</span>match-beginning 2<span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>match-end 2<span style="color: #2C79F5;">)</span> 'face face<span style="color: #887070;">)</span>
                <span style="color: #887070;">(</span><span style="color: #E04E49;">when</span> verbatim?
                  <span style="color: #2C79F5;">(</span>org-remove-flyspell-overlays-in
                   <span style="color: #A8289C;">(</span>match-beginning 0<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>match-end 0<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
                  <span style="color: #2C79F5;">(</span>remove-text-properties <span style="color: #A8289C;">(</span>match-beginning 2<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>match-end 2<span style="color: #A8289C;">)</span>
                                          '<span style="color: #A8289C;">(</span>display t invisible t intangible t<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span>
                <span style="color: #887070;">(</span>add-text-properties <span style="color: #2C79F5;">(</span>match-beginning 2<span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>match-end 2<span style="color: #2C79F5;">)</span>
                                     '<span style="color: #2C79F5;">(</span>font-lock-multiline t org-emphasis t<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span>
                <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">beg</span>
                <span style="color: #887070;">(</span><span style="color: #E04E49;">when</span> props
                  <span style="color: #2C79F5;">(</span>add-text-properties <span style="color: #A8289C;">(</span>match-end 4<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>match-beginning 5<span style="color: #A8289C;">)</span>
                                       props<span style="color: #2C79F5;">)</span>
                  <span style="color: #2C79F5;">(</span>add-text-properties <span style="color: #A8289C;">(</span>match-beginning 3<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>match-end 3<span style="color: #A8289C;">)</span>
                                       props<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span>
                <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">end</span>
                <span style="color: #887070;">(</span><span style="color: #E04E49;">when</span> org-hide-emphasis-markers
                  <span style="color: #2C79F5;">(</span>add-text-properties <span style="color: #A8289C;">(</span>match-end 4<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>match-beginning 5<span style="color: #A8289C;">)</span>
                                       '<span style="color: #A8289C;">(</span>invisible org-link<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
                  <span style="color: #2C79F5;">(</span>add-text-properties <span style="color: #A8289C;">(</span>match-beginning 3<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">(</span>match-end 3<span style="color: #A8289C;">)</span>
                                       '<span style="color: #A8289C;">(</span>invisible org-link<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span>
                <span style="color: #887070;">(</span><span style="color: #E04E49;">throw</span> <span style="color: #A8289C;">:exit</span> t<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>
]]></description>
<pubDate>Tue, 07 Jul 2020 21:38:00 -0400</pubDate>
</item>
<item>
<title>Org HTML Export: Permanent Section Link</title>
<link>https://archive.casouri.cat/note/2020/org-html-export:-permanent-section-link</link>
<guid>https://archive.casouri.cat/note/2020/org-html-export:-permanent-section-link</guid>
<description><![CDATA[<p>
You probably already know that, when <code>ox-html</code> exports a HTML page, all the section links (links to headers) looks like <code>#orgacb420a</code>. Then if someone saves a link to your blog, it would look like <code>https://site.org#orgacb420a</code>. First, that doesn’t look good; second, this link is fragile—if you export your Org file again, section ids change, this link breaks.
</p>

<p>
Lee Hinman wrote a blog about generating custom id’s for permanent section link: <a href="https://writequit.org/articles/emacs-org-mode-generate-ids.html">Emacs Org-mode: Use good header ids!</a> The basic idea is sound but I don’t like how he stores the custom ids. He directly inserts them as properties under each header. Also he still uses randomly generated uuid, while I think the standard practice is to use human-readable title.
</p>

<p>
Standing on the shoulder of Lee Hinman, I wrote my version that generates section links base on the header, and doesn’t insert anything to my Org file. A header “Report Emacs bug” will have a section link <code>#Report-Emacs-bug</code>. This link stays unchanged across exports, as long as you don’t change the header.
</p>

<p>
So, how do we use <code>CUSTOM_ID</code> but don’t insert them into the Org file? That’s easy for me because my existing export function creates a temporary buffer and inserts the Org file’ content, then works in that buffer. Modifications made in this export process don’t affect the original file. So I just need to set header properties like Lee does in his post.
</p>

<p>
This is the code I use to insert <code>CUSTOM_ID</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">luna-publish-populate-header-id</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Add CUSTOM_ID property to each header in current buffer."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span>id-list<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">cl-labels</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>get-id <span style="color: #987816;">()</span>
                        <span style="color: #987816;">(</span><span style="color: #E04E49;">let</span> <span style="color: #2C79F5;">(</span><span style="color: #80a880;">(</span>id <span style="color: #887070;">(</span>url-encode-url
                                   <span style="color: #2C79F5;">(</span>replace-regexp-in-string
                                    <span style="color: #489446;">" "</span> <span style="color: #489446;">"-"</span>
                                    <span style="color: #A8289C;">(</span>org-get-heading t t t t<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                              <span style="color: #80a880;">(</span>dup-counter 1<span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
                          <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">while</span> <span style="color: #80a880;">(</span>member id id-list<span style="color: #80a880;">)</span>
                            <span style="color: #80a880;">(</span><span style="color: #E04E49;">setq</span> id <span style="color: #887070;">(</span>format <span style="color: #489446;">"%s-%d"</span> id dup-counter<span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                            <span style="color: #80a880;">(</span><span style="color: #E04E49;">cl-incf</span> dup-counter<span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
                          <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">push</span> id id-list<span style="color: #2C79F5;">)</span>
                          id<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span>org-map-entries
       <span style="color: #A8289C;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #987816;">()</span>
         <span style="color: #987816;">(</span>org-entry-put <span style="color: #2C79F5;">(</span>point<span style="color: #2C79F5;">)</span> <span style="color: #489446;">"CUSTOM_ID"</span> <span style="color: #2C79F5;">(</span>get-id<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Just to make the example complete, here is my export function in pseudo code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">with-temp-buffer</span>
  <span style="color: #A8289C;">(</span>insert-file-contents org-file<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>org-mode<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>luna-publish-populate-header-id<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>other-stuff<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>org-export-to-file 'html html-file<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
]]></description>
<pubDate>Mon, 06 Jul 2020 12:46:00 -0400</pubDate>
</item>
<item>
<title>Contributing to Emacs</title>
<link>https://archive.casouri.cat/note/2020/contributing-to-emacs</link>
<guid>https://archive.casouri.cat/note/2020/contributing-to-emacs</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Report-Emacs-bug">1. Report Emacs bug</a></li>
<li><a href="#The-mailing-list">2. The mailing list</a></li>
<li><a href="#Get-Emacs%E2%80%99-source">3. Get Emacs’ source</a></li>
<li><a href="#I-have-some-code,-what-now?">4. I have some code, what now?</a></li>
<li><a href="#NEWS-and-manual">5. NEWS and manual</a></li>
<li><a href="#Debbugs">6. Debbugs</a></li>
<li><a href="#GNU-ELPA">7. GNU ELPA</a></li>
</ul>
</div>
</div>
<p>
Emacs, <i>the</i> editor we all use and love, has been running for decades, receiving contribution from hundreds of hackers along the way. Because it predates recent popular workflows (a.k.a GitHub and friends) by many years, you can’t do the usual thing—open issues, fork and make PR’s, etc. However, Emacs’s development workflow isn’t as tedious and difficult as many people imagine (in particular, you don’t need Gnus or deal with email in Emacs, or set up anything fancy).
</p>

<p>
In this post, I show what I’ve learned as an Emacs newcomer about participating in the development of Emacs. I hope that by sharing what does contributing to Emacs look like, more people know what to expect and feel comfortable to join the development of Emacs.
</p>

<div id="outline-container-Report-Emacs-bug" class="outline-2">
<h2 id="Report-Emacs-bug"><span class="section-number-2">1</span> Report Emacs bug</h2>
<div class="outline-text-2" id="text-1">
<p>
I won’t go into details here, because I think most people nowadays are well educated by numerous communities on how to report a bug properly. In the case of Emacs, in addition, you want to reproduce the bug with vanilla Emacs, i.e., without your configurations. You can start one with <code>emacs -Q</code>. And in Emacs type <code>M-x report-emacs-bug RET</code>, then <code>C-c M-i</code> to use your mail application to send the bug report through email (Emacs instructs you of all this). Then just wait for a developer to reply to your email (see? No setup needed). The only thing to remember is to make sure you use “reply all” when replying to emails (more on that in <a href="#orgf4490f5">2</a>.)
</p>
</div>

<div id="outline-container-Report-bugs-with-patch" class="outline-3">
<h3 id="Report-bugs-with-patch"><span class="section-number-3">1.1</span> Report bugs with patch</h3>
<div class="outline-text-3" id="text-1-1">
<p>
If you found a bug and fixed it, you should send your patch as a bug report. Same as reporting a bug, use <code>M-x report-emacs-bug</code>, and append <code>[PATCH]</code> in front of the title, e.g., <code>[PATCH] Something doesn’t work</code>. And add your patch to your email. (See <a href="#org19cbd39">4.4</a>.)
</p>
</div>
</div>
</div>

<div id="outline-container-The-mailing-list" class="outline-2">
<h2 id="The-mailing-list"><span class="section-number-2">2</span> The mailing list</h2>
<div class="outline-text-2" id="text-2">
<p>
The mailing list is the main channel for general discussion on Emacs development. A mailing list has subscribers. When someone sends a mail to (or cc) the mailing list address, the mailing list server forwards that message to every subscriber, so everybody sees your mail. To start a new thread, send a mail to the mailing list server; to reply to someone’s message, simply “reply all”. <b>Make sure you use “reply all” when replying to messages.</b> If the message isn’t CC’ed to the mailing list server (emacs-devel@gnu.org), other people on the list can’t see it.
</p>
</div>

<div id="outline-container-Subscribe-to-Emacs-devel-mailing-list" class="outline-3">
<h3 id="Subscribe-to-Emacs-devel-mailing-list"><span class="section-number-3">2.1</span> Subscribe to Emacs-devel mailing list</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Go to <a href="https://lists.gnu.org/mailman/listinfo/emacs-devel">Emacs-devel Info Page</a>, and fill in the form to subscribe. Make sure you select “No” for “Would you like to receive list mail batched in a daily digest?”. If you select “Yes”, instead of receiving messages, you receive a “daily digest” every day, which is less useful because 1) you don’t see the full conversation, 2) you can’t participate in the discussion.
</p>
</div>
</div>

<div id="outline-container-Tips" class="outline-3">
<h3 id="Tips"><span class="section-number-3">2.2</span> Tips</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Emacs-devel is busy, there are a few dozen messages every day. if you don’t want your inbox flooded, you better set up a separate mail folder for them. As an example, this is what I do on Gmail: I go to “Settings”, “Filters and Blocked Addresses”, “Create a new filter”, filter any mail that has the words “emacs-devel@gnu.org”, and asks Gmail to skip the inbox and apply “emacs-devel” label. The effect is that all emacs-devel messages don’t appear in your inbox and instead show up in the emacs-devel folder.
</p>
</div>
</div>

<div id="outline-container-No-one-replies?" class="outline-3">
<h3 id="No-one-replies?"><span class="section-number-3">2.3</span> No one replies?</h3>
<div class="outline-text-3" id="text-2-3">
<p>
In general, give it a week or so before pinging your message. Normally when no one replies to a new message, it is because people who have seen it don’t know enough to say anything intelligent about the topic. 
</p>
</div>
</div>

<div id="outline-container-Don%E2%80%99t-send-bugs-to-emacs-devel" class="outline-3">
<h3 id="Don%E2%80%99t-send-bugs-to-emacs-devel"><span class="section-number-3">2.4</span> Don’t send bugs to emacs-devel</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Even with a patch, or you are not sure if it should be considered a bug (given you can reproduce it with vanilla Emacs), report it as a bug. See <a href="#Report-bugs-with-patch">1.1</a> for detail.
</p>
</div>
</div>
</div>

<div id="outline-container-Get-Emacs%E2%80%99-source" class="outline-2">
<h2 id="Get-Emacs%E2%80%99-source"><span class="section-number-2">3</span> Get Emacs’ source</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>This is Emacs’ savannah homepage: <a href="https://savannah.gnu.org/projects/emacs/">emacs - Summary</a></li>
<li>This is Emacs’ git source page: <a href="http://git.savannah.gnu.org/cgit/emacs.git">emacs.git</a></li>
</ul>

<p>
The home page tells you how to clone Emacs’ source:
</p>
<div class="org-src-container">
<pre class="src src-shell">git clone -b master git://git.sv.gnu.org/emacs.git
</pre>
</div>

<p>
Once you have the source, you can find most of the information mentioned in this post in <code>/CONTRIBUTE</code>. For example, the first section demonstrates how to compile Emacs:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">More info is in INSTALL.</span>
./autogen.sh
<span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">You can use ./configure.sh --help to see the available options.</span>
<span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">This is the step where you enable/disable optional functionalities</span>
<span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">like dynamic modules, portable dumper, SVG, etc.</span>
./configure.sh
make
</pre>
</div>

<p>
And the executable is <code>/src/emacs</code>, welcome to the future (release)! 
</p>
</div>
</div>

<div id="outline-container-I-have-some-code,-what-now?" class="outline-2">
<h2 id="I-have-some-code,-what-now?"><span class="section-number-2">4</span> I have some code, what now?</h2>
<div class="outline-text-2" id="text-I-have-some-code,-what-now?">
</div>
<div id="outline-container-The-copyright-assignment" class="outline-3">
<h3 id="The-copyright-assignment"><span class="section-number-3">4.1</span> The copyright assignment</h3>
<div class="outline-text-3" id="text-4-1">
<p>
You don’t need a copyright assignment to send patches for review. But for the patch to merge into Emacs, it needs to have a copyright assignment signed if it is non-trivial (≥ 15 lines of code, as a rule of thumb). By signing the assignment, you share the copyright of your code with FSF <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. (See more at <a href="https://www.gnu.org/licenses/why-assign.en.html">Why Copyright Assignment</a> and <a href="https://www.fsf.org/bulletin/2014/spring/copyright-assignment-at-the-fsf">Misconceptions About the Assignment</a>.) 
</p>

<p>
You need to first check with your employer before signing it. Most of the time it’s no problem. To sign the assignment, ask for a form on the mailing list, and someone will send it to you. You fill it in and send it to an “FSF clerk”, then he sends you the document to sign, either by email or by mail. You sign it and send it back, and he sends you the final document with an FSF signature on it. 
</p>
</div>
</div>

<div id="outline-container-Conventions-in-code" class="outline-3">
<h3 id="Conventions-in-code"><span class="section-number-3">4.2</span> Conventions in code</h3>
<div class="outline-text-3" id="text-4-2">
<ul class="org-ul">
<li>Write regular sentences in comments, i.e., with capitalization and period. Fill comments with <code>M-q</code> (<code>fill-paragraph</code>).</li>
<li>Comments should be in American English and with two spaces after every sentence.</li>
<li>Don’t write over 80–90 columns (I don’t know if there is a hard limit, but in general try to keep in with the rest of the code).</li>
</ul>
</div>
</div>

<div id="outline-container-Conventions-in-commit-messages" class="outline-3">
<h3 id="Conventions-in-commit-messages"><span class="section-number-3">4.3</span> Conventions in commit messages</h3>
<div class="outline-text-3" id="text-4-3">
<p>
The general format:
</p>

<pre class="example" id="orgbd620cb">
Summary line (no ending period)

Some more info (optional).

​* file1: Change.
​* file2 (variable1): Change.
​* file3 (function1, function2, variable3): Same change.
​* file4 (variable4): Change 1.
(function5): Change 2.
(function6, macro7): Same change.
</pre>

<ul class="org-ul">
<li>The file path is relative to the source root, e.g., <code>/lisp/progmodes/gdb-mi.el</code>.</li>
<li>In <code>Change</code>, document <i>what</i> changed, not <i>why</i> the change is made. <i>“Why”</i> is better put in the comments.</li>
<li>For new function​/​variable​/​macro, It suffices to say “New function​/​variable​/​macro”.</li>
<li>Don’t exceed 78 characters each line.</li>
<li>Try to use only ASCII characters (so people on limited terminals can view these messages). For example, prefer straight quotes over curly quotes.</li>
<li>Quote function​/​variable​/​macro like <code>'this'</code>​, not like <code>`this'</code>.</li>
<li>Sames as comments—American English and two spaces after every sentence.</li>
<li>Use the present tense.</li>
<li>(tip) <code>M-x fill-paragraph</code> is your friend.</li>
</ul>
</div>
</div>

<div id="outline-container-Create-a-patch-and-send-it" class="outline-3">
<h3 id="Create-a-patch-and-send-it"><span class="section-number-3">4.4</span> Create a patch and send it</h3>
<div class="outline-text-3" id="text-4-4">
<p>
Create a single patch for each change. Don’t send a patch with three new features combined, that is harder to review; on the other hand, don’t send a series of patches for a single feature, squash<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> them into one patch. Also, send your patch early and small and update along the way, that also helps other people to review it. To save you from googling, here are some ways to create a patch:
</p>

<ol class="org-ol">
<li>Use Magit. To generate a quick diff patch, open a diff buffer by either <code>d d</code> on a change or commit; in the diff buffer, hit <code>W s</code>. To generate a patch from a commit, go on to a commit and <code>d c</code>, then go to the diff buffer and <code>W s</code>.</li>
<li>You can also use <code>vc-diff</code> and save that buffer to a file.</li>
<li>From command line, <code>git format-patch -1 --stdout &gt; file</code> where <code>1</code> is the number of commits you want to include.</li>
</ol>

<p>
To send your patch, write an email to the mailing list: <a href="mailto:emacs-devel@gnu.org">emacs-devel</a>. Drag your patch to the end of the message after the signature. Normally this is all it needs. Sometimes the message could be garbled; in that case, changing the message to plain text usually helps. You can also send a patch to debbugs—the bug tracker—if the patch is a bug fix. (See <a href="#orge0247c0">6</a>.)
</p>
</div>
</div>
</div>

<div id="outline-container-NEWS-and-manual" class="outline-2">
<h2 id="NEWS-and-manual"><span class="section-number-2">5</span> NEWS and manual</h2>
<div class="outline-text-2" id="text-5">
<p>
If you made a user-visible change, you should document this change in the NEWS file, possibly also update the manual. <b>You don’t need to worry about these until your patch is finalized, though. So maybe skip this section for now.</b> And Emacs maintainers will let you know what to do. Below is the relevant section in <code>/CONTRIBUTE</code>:
</p>

<blockquote>
<p>
Any change that matters to end-users should have an entry in etc/NEWS. Try to start each NEWS entry with a sentence that summarizes the entry and takes just one line &#x2013; this will allow to read NEWS in Outline mode after hiding the body of each entry.
</p>

<p>
Doc-strings should be updated together with the code.
</p>

<p>
New defcustom's should always have a ':version' tag stating the first Emacs version in which they will appear.  Likewise with defcustom's whose value is changed &#x2013; update their ':version' tag.
</p>

<p>
Think about whether your change requires updating the manuals.  If you know it does not, mark the NEWS entry with "<code>---</code>".  If you know that <b>all</b> the necessary documentation updates have been made as part of your changes or those by others, mark the entry with "<code>+++</code>". Otherwise do not mark it.
</p>

<p>
If your change requires updating the manuals to document new functions/commands/variables/faces, then use the proper Texinfo command to index them; for instance, use @vindex for variables and @findex for functions/commands.  For the full list of predefined indices, see
<a href="https://www.gnu.org/software/texinfo/manual/texinfo/html_node/Predefined-Indices.html">Predefined Indices</a> <sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>
or run the shell command 'info "(texinfo)Predefined Indices"'.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-Debbugs" class="outline-2">
<h2 id="Debbugs"><span class="section-number-2">6</span> Debbugs</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://debbugs.gnu.org">Debbugs</a> is the bug tracker for the GNU operating system. Here is <a href="https://debbugs.gnu.org/Emacs.html">Emacs’ debbugs home page</a>. I’ve covered how to report a bug. After you sent the email reporting the bug, debbugs will send you a confirmation email with a bug number. Instead of replying to messages in the bug report, you can also comment by sending a message to <code>bug-number@gnu.debbugs.org</code>. When the bug is fixed, you can send a message to <code>&lt;bug-number&gt;-done@debbugs.gnu.org</code>, e.g., <code>40000-done@debbugs.gnu.org</code>. That closes the bug.
</p>

<p>
If you want to view currently open bugs, you can either <a href="https://debbugs.gnu.org/cgi/pkgreport.cgi?package=emacs;max-bugs=100;base-order=1;bug-rev=1">browse online</a>, or view them in Emacs: install the package <code>debbugs</code> and <code>M-x debbugs-gnu</code>. You can click on bugs to view the conversation. You can even reply by <code>S w</code> on a message, and write your message in Emacs, and hit <code>C-c C-c</code> to send. Chose “mail client” and Emacs invokes your default mail application to send this mail. Hit <code>C-c C-k</code> to cancel the message.
</p>
</div>
</div>

<div id="outline-container-GNU-ELPA" class="outline-2">
<h2 id="GNU-ELPA"><span class="section-number-2">7</span> GNU ELPA</h2>
<div class="outline-text-2" id="text-7">
<p>
Have a good package? Add it to GNU ELPA! 
</p>

<p>
Pros:
</p>
<ul class="org-ul">
<li>Get reviews from people that know Emacs and Emacs Lisp best.</li>
<li>Instantly available from vanilla Emacs.</li>
<li>You <i>can</i> host your package on other places, such as GitHub.</li>
<li>You <i>can</i> push to your package without review, and don’t need to follow Emacs conventions for commit messages.</li>
</ul>
<p>
Cons:
</p>
<ul class="org-ul">
<li>You need to sign the copyright assignment. And make sure all the contributors of your package (with a significant contribution, i.e., ≥ ~15 lines) signs it.</li>
</ul>

<p>
View <a href="http://git.savannah.gnu.org/cgit/emacs/elpa.git/plain/README">README</a> for more detailed info.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
In effect, the code is split into two versions, FSF distributes it’s version under GPL, and you can distribute yours version with whatever license you please.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Squash means combining several commits into one. It is easy to do with Magit: <code>l l</code> go to the log buffer; then go to the earliest commit you want to change, hit <code>r i</code>; hit <code>s</code> on the commits you want to squash, commits marked with “s” will squash up. You can also use <code>M-n/p</code> to move the order of commits; then hit <code>C-c C-c</code> to edit the new commit message, and <code>C-c C-c</code> again to confirm.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
It was <code>https://www.gnu.org/software/texinfo/manual/texinfo/html_node/Predefined-Indices.html</code>, I shortened it for the layout.
</p></div></div>


</div>
</div>]]></description>
<pubDate>Sat, 02 May 2020 14:44:00 -0400</pubDate>
</item>
<item>
<title>Safari’s New Clipper</title>
<link>https://archive.casouri.cat/note/2020/safari%E2%80%99s-new-clipper</link>
<guid>https://archive.casouri.cat/note/2020/safari%E2%80%99s-new-clipper</guid>
<description><![CDATA[<p>
For the longest time I’ve wanted a web clipper that doesn’t suck—one that saves to local files, can do everything in one click, and clips well. I’ve been saving web pages to PDF and dragging them to Note.app for quite a while after ditching Evernote. Needless to say, that’s the ad-hoc-ist workflow one can imagine. I was going to write a share extension for Safari but never took action.
</p>

<p>
Guess what—no need for that anymore. In some past updates Apple quietly added a “Save to Books” share extension to Safari, and it is everything I’ve dreamed for. I even think I can forgive Apple for their crappy Music app and buggy updates (not really, no). The extension creates a long, beautiful PDF, faithfully rendered according to the web page. No weird layout problems, no page breaks, it just works.
</p>

<p>
I clipped one of my blog posts to PDF, so you can have a look: <a href="file:///note/2020/safari’s-new-clipper/example.pdf">file:///note/2020/safari’s-new-clipper/example.pdf</a>.
</p>
]]></description>
<pubDate>Thu, 23 Apr 2020 10:22:00 -0400</pubDate>
</item>
<item>
<title>Insert Math Symbol in Emacs</title>
<link>https://archive.casouri.cat/note/2020/insert-math-symbol-in-emacs</link>
<guid>https://archive.casouri.cat/note/2020/insert-math-symbol-in-emacs</guid>
<description><![CDATA[<p>
Typing math symbols is often a tedious task. You either search through a bunch of symbol panels and click the one you want, or type TeX macros that you may or may not remember, or execute complex key bindings to enter a limited set of symbols. I recently learned about TeXmacs’ solution to symbol insertion: you type a symbol that’s more or less similar to the one you have in mind and use <code>TAB</code> to mutate it into the one desired. Say you want to enter <code>⊂</code>, you type <code>&lt;</code> and hit <code>TAB</code> several times, go through <code>≤</code>, <code>∈</code>,  <code>⊏</code> and finally arrive at <code>⊂</code>. It’s easy to remember, fast to insert, and can encode a lot of symbols.
</p>

<p>
TeXmacs is great, but I want to do the same thing in Emacs. Here is a demo of the command I use:
</p>


<div id="orgd70a004" class="figure">
<p><img src="/note/2020/insert-math-symbol-in-emacs/transform2.gif" alt="transform2.gif" />
</p>
</div>

<p>
It has two features mimicking TeXmacs: 1) you can hit a key (say <code>TAB</code>) and go through each variant of the symbol before point. 2) you can add an “accent modifier” after the symbol and hit the same key (<code>TAB</code>) to accent it. In the above demo I accented <code>⊃</code> into <code>⊇</code> by adding a <code>_</code> accent modifier and hitting <code>TAB</code>.
</p>

<p>
Bind <code>transform-previous-char</code> to some key, and that key would do both tasks: transform and accent. You can also hit <code>C-n/p</code> to go back and forth when transforming. If you want to customize the symbols, look at <code>transform-list</code> and <code>accent-list</code>. And make sure accent modifiers is not in <code>transform-list</code>, in that case it is always treated as a modifier, rather than a variant.
</p>

<p>
There are some minor limitations. First, my command doesn’t support multi-character symbols; second, accent modifiers are order sensitive, e.g., you have to apply <code>/</code> after <code>_</code>.
</p>

<p>
I have set up some default variant and accents.
</p>
<pre class="example" id="org4bbb9fa">
Variant

*×·⊗⊙	+⊕	|⊦⊨	/÷	\∖
&lt;∈⊂⊏	&gt;∋⊃⊐	=≈	v∨∪	^∧∩	0∅
Rℝ	Zℤ	Qℚ	Nℕ	Cℂ
aαΑ∀	bβΒ	gγΓ	dδΔ	eεΕ∃	zζΖ	hηΗ	qθΘ
iιΙ	kκΚ	lλΛ	mμΜ	nνΝ∩	xξΞ	oοΟ	pπΠ
rρΡ	sσΣ	tτΤ	yυΥ	fφΦ	cχΧ	uψΨ∪	wωΩ

Accent

_:	&lt;≤	⊂⊆	⊏⊑	&gt;≥	⊃⊇	⊐⊒
/:	=≠	&lt;≮	≤≰	∈∉	⊂⊄	⊆⊈
	&gt;≯	≥≱	∋∌	⊃⊅	⊇⊉
</pre>

<p>
Finally, the code. You can also find it in my <a href="https://github.com/casouri/lunarymacs/blob/master/site-lisp/transform.el">config</a>. Make sure you enable lexical binding.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">-*- lexical-binding: t; -*-</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">cl-lib</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">subr-x</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">transform-list</span>
  <span style="color: #A8289C;">(</span>mapcar <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">(</span>x<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>mapcar #'identity x<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
          <span style="color: #489446;">(</span>split-string <span style="color: #DA7A48;">(</span>string-join
                         '<span style="color: #A8289C;">(</span><span style="color: #489446;">"*&#215;&#183;&#8855;&#8857; +&#8853; |&#8870;&#8872; /&#247; \\&#8726;"</span>
                           <span style="color: #489446;">"&lt;&#8712;&#8834;&#8847; &gt;&#8715;&#8835;&#8848; =&#8776;"</span>
                           <span style="color: #489446;">"v&#8744;&#8746; ^&#8743;&#8745; 0&#8709;"</span>
                           <span style="color: #489446;">"R&#8477; Z&#8484; Q&#8474; N&#8469; C&#8450;"</span>
                           <span style="color: #489446;">"a&#945;&#913;&#8704; b&#946;&#914; g&#947;&#915; d&#948;&#916; e&#949;&#917;&#8707; z&#950;&#918; h&#951;&#919; q&#952;&#920;"</span>
                           <span style="color: #489446;">"i&#953;&#921; k&#954;&#922; l&#955;&#923; m&#956;&#924; n&#957;&#925;&#8745; x&#958;&#926; o&#959;&#927; p&#960;&#928;"</span>
                           <span style="color: #489446;">"r&#961;&#929; s&#963;&#931; t&#964;&#932; y&#965;&#933; f&#966;&#934; c&#967;&#935; u&#968;&#936;&#8746; w&#969;&#937;"</span><span style="color: #A8289C;">)</span>
                         <span style="color: #489446;">" "</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Each element of the list is a list of related variants."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">accent-list</span>
  <span style="color: #A8289C;">(</span>mapcar <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">(</span>c<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>cons <span style="color: #A8289C;">(</span>car c<span style="color: #A8289C;">)</span>
                            <span style="color: #A8289C;">(</span>mapcar <span style="color: #987816;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">(</span>s<span style="color: #2C79F5;">)</span>
                                      <span style="color: #2C79F5;">(</span>mapcar #'identity s<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
                                    <span style="color: #987816;">(</span>split-string <span style="color: #2C79F5;">(</span>cdr c<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
          '<span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>?_ . <span style="color: #489446;">"&lt;&#8804; &#8834;&#8838; &#8847;&#8849; &gt;&#8805; &#8835;&#8839; &#8848;&#8850;"</span><span style="color: #DA7A48;">)</span>
            <span style="color: #DA7A48;">(</span>?/ . <span style="color: #489446;">"=&#8800; &lt;&#8814; &#8804;&#8816; &#8712;&#8713; &#8834;&#8836; &#8838;&#8840; &gt;&#8815; &#8805;&#8817; &#8715;&#8715;&#824; &#8835;&#8837; &#8839;&#8841;"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>

  <span style="color: #9a9ea2;">"Each car is the accent modifier, cdr is a list ((ORIGINAL ACCENT) ...)."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform--get-variant-list</span> <span style="color: #A8289C;">(</span>char<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Find CHAR in &#8216;</span><span style="color: #A8289C;">transform-list</span><span style="color: #9a9ea2;">&#8217;, return (index . variant-list).</span>
<span style="color: #9a9ea2;">Return nil if none found. CHAR is a character."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">catch</span> '<span style="color: #A8289C;">ret</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #DA7A48;">(</span>variant-list transform-list nil<span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">cl-loop</span> for variant in variant-list
               for idx from 0 to <span style="color: #A8289C;">(</span>1- <span style="color: #987816;">(</span>length variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
               if <span style="color: #A8289C;">(</span>eq variant char<span style="color: #A8289C;">)</span>
               do <span style="color: #A8289C;">(</span><span style="color: #E04E49;">throw</span> '<span style="color: #A8289C;">ret</span> <span style="color: #987816;">(</span>cons idx variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform--make-step-fn</span> <span style="color: #A8289C;">(</span>variant-list init-idx<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Return a stepping function that steps through each variation.</span>
<span style="color: #9a9ea2;">At first the index is INIT-IDX.</span>
<span style="color: #9a9ea2;">VARIANT-LIST is a list of variant characters.</span>

<span style="color: #9a9ea2;">The step function takes a integer &#8220;step&#8221; that changes the index</span>
<span style="color: #9a9ea2;">of current variant, e.g. 1 is next, -1 is prev. It returns the</span>
<span style="color: #9a9ea2;">current index after adding the &#8220;step&#8221; with current index.</span>

<span style="color: #9a9ea2;">The step function with step across the variant list and change</span>
<span style="color: #9a9ea2;">the character before point to the current variant."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>variant-index <span style="color: #A8289C;">(</span><span style="color: #E04E49;">or</span> init-idx 0<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">(</span>step<span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">step</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> variant-index <span style="color: #A8289C;">(</span>+ step variant-index<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">manage ring</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">when</span> <span style="color: #A8289C;">(</span>eq variant-index <span style="color: #987816;">(</span>length variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setq</span> variant-index 0<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">when</span> <span style="color: #A8289C;">(</span>&lt; variant-index 0<span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setq</span> variant-index <span style="color: #987816;">(</span>1- <span style="color: #2C79F5;">(</span>length variant-list<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">edit &amp; message</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">atomic-change-group</span>
        <span style="color: #A8289C;">(</span>delete-char -1<span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>insert <span style="color: #987816;">(</span>nth variant-index variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span>message <span style="color: #489446;">"%s"</span> <span style="color: #A8289C;">(</span>transform--make-message variant-list
                                             variant-index<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform--make-message</span> <span style="color: #A8289C;">(</span>variant-list index<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Make a string that displays each variant in VARIANT-LIST.</span>
<span style="color: #9a9ea2;">Highlight the one marked by INDEX."</span>
  <span style="color: #A8289C;">(</span>string-join <span style="color: #489446;">(</span><span style="color: #E04E49;">cl-loop</span> for variant in variant-list
                        for idx from 0 to <span style="color: #DA7A48;">(</span>1- <span style="color: #A8289C;">(</span>length variant-list<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
                        if <span style="color: #DA7A48;">(</span>eq idx index<span style="color: #DA7A48;">)</span>
                        collect <span style="color: #DA7A48;">(</span>propertize <span style="color: #A8289C;">(</span>char-to-string variant<span style="color: #A8289C;">)</span>
                                            'face 'highlight<span style="color: #DA7A48;">)</span>
                        else collect <span style="color: #DA7A48;">(</span>char-to-string variant<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
               <span style="color: #489446;">"&#8201;"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform-previous-char</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Transform char before point.</span>

<span style="color: #9a9ea2;">If previous char is &#8220;/&#8221; or &#8220;_&#8221;, apply &#8216;</span><span style="color: #A8289C;">accent-previous-char</span><span style="color: #9a9ea2;">&#8217;</span>
<span style="color: #9a9ea2;">instead."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> <span style="color: #489446;">(</span>member <span style="color: #DA7A48;">(</span>char-before<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>mapcar #'car accent-list<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>accent-previous-char<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">if-let</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>c <span style="color: #987816;">(</span>transform--get-variant-list <span style="color: #2C79F5;">(</span>char-before<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>index <span style="color: #2C79F5;">(</span>car c<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
               <span style="color: #987816;">(</span>variant-list <span style="color: #2C79F5;">(</span>cdr c<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
               <span style="color: #987816;">(</span>step-fn <span style="color: #2C79F5;">(</span>transform--make-step-fn variant-list index<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
               <span style="color: #987816;">(</span>map <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">let</span> <span style="color: #80a880;">(</span><span style="color: #887070;">(</span>map <span style="color: #2C79F5;">(</span>make-sparse-keymap<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      <span style="color: #80a880;">(</span>define-key map <span style="color: #887070;">(</span>kbd <span style="color: #489446;">"C-n"</span><span style="color: #887070;">)</span>
                        <span style="color: #887070;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>funcall step-fn 1<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      <span style="color: #80a880;">(</span>define-key map <span style="color: #887070;">(</span>kbd <span style="color: #489446;">"C-p"</span><span style="color: #887070;">)</span>
                        <span style="color: #887070;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>funcall step-fn -1<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      <span style="color: #80a880;">(</span>define-key map <span style="color: #887070;">(</span>this-command-keys<span style="color: #887070;">)</span>
                        <span style="color: #887070;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>funcall step-fn 1<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      map<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
          <span style="color: #A8289C;">(</span>funcall step-fn 1<span style="color: #A8289C;">)</span>
          <span style="color: #A8289C;">(</span>set-transient-map map t<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #987816;">user-error</span> <span style="color: #489446;">"No variant found"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">accent-previous-char</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Accent previous char by its trailing accent modifier."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>modifier-list <span style="color: #A8289C;">(</span>mapcar #'car accent-list<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">if</span> <span style="color: #DA7A48;">(</span>not <span style="color: #A8289C;">(</span>member <span style="color: #987816;">(</span>char-before<span style="color: #987816;">)</span> modifier-list<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">base case, prev char is normal char</span>
        nil
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">recursion case  &lt;char&gt;&lt;mod&gt;|</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">let</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>modifier <span style="color: #2C79F5;">(</span>char-before<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
            old-char new-char<span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">atomic-change-group</span>
          <span style="color: #987816;">(</span>delete-char -1<span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span>accent-previous-char<span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> old-char <span style="color: #2C79F5;">(</span>char-before<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
          <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">find accented char</span>
          <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> new-char <span style="color: #2C79F5;">(</span>car <span style="color: #80a880;">(</span>alist-get
                               old-char
                               <span style="color: #887070;">(</span>alist-get modifier accent-list<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span><span style="color: #E04E49;">if</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">or</span> <span style="color: #80a880;">(</span>not new-char<span style="color: #80a880;">)</span> <span style="color: #80a880;">(</span>eq new-char 32<span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
              <span style="color: #2C79F5;">(</span><span style="color: #987816;">user-error</span> <span style="color: #489446;">"No accent found"</span><span style="color: #2C79F5;">)</span>
            <span style="color: #2C79F5;">(</span>delete-char -1<span style="color: #2C79F5;">)</span>
            <span style="color: #2C79F5;">(</span>insert new-char<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
]]></description>
<pubDate>Wed, 26 Feb 2020 10:16:00 -0500</pubDate>
</item>
<item>
<title>Useful Builtin Bindings in Emacs</title>
<link>https://archive.casouri.cat/note/2020/useful-builtin-bindings-in-emacs-</link>
<guid>https://archive.casouri.cat/note/2020/useful-builtin-bindings-in-emacs-</guid>
<description><![CDATA[<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left"><code>M-r</code></td>
<td class="org-left">In comint buffer, search for previous input <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup></td>
</tr>

<tr>
<td class="org-left"><code>M-g M-g</code></td>
<td class="org-left">Go to line number.</td>
</tr>

<tr>
<td class="org-left"><code>M-=</code></td>
<td class="org-left">Count words in region: word count, char count, etc <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup></td>
</tr>

<tr>
<td class="org-left"><code>M-.</code> &amp; <code>M-,</code></td>
<td class="org-left">Xref shortcuts, jump to definition and jump back.</td>
</tr>

<tr>
<td class="org-left"><code>M-/</code></td>
<td class="org-left"><code>dabbrev-expand</code>. You can rebind it to <code>hippie-expand</code>.</td>
</tr>

<tr>
<td class="org-left"><code>M-y</code></td>
<td class="org-left"><code>yank-pop</code>. <code>counsel-yank-pop</code> is more useful.</td>
</tr>

<tr>
<td class="org-left"><code>M-u</code> &amp; <code>M-l</code></td>
<td class="org-left">Up-case / down-case next word, very handy.</td>
</tr>

<tr>
<td class="org-left"><code>M-c</code></td>
<td class="org-left">Capitalize next word.</td>
</tr>

<tr>
<td class="org-left"><code>C-;</code></td>
<td class="org-left">If you enabled flyspell, this fixes the previous misspelling.</td>
</tr>

<tr>
<td class="org-left"><code>C-q</code></td>
<td class="org-left">Insert characters verbatim, even control characters.</td>
</tr>

<tr>
<td class="org-left"><code>C-x 5 2</code></td>
<td class="org-left">Create new frame.</td>
</tr>

<tr>
<td class="org-left"><code>C-x (</code> &amp; <code>C-x )</code></td>
<td class="org-left">Start/stop recording keyboard macro.</td>
</tr>

<tr>
<td class="org-left"><code>C-x e</code></td>
<td class="org-left">Execute last keyboard macro.</td>
</tr>

<tr>
<td class="org-left"><code>C-x =</code></td>
<td class="org-left">Describe character at point. Add <code>C-u</code> for more detail.</td>
</tr>

<tr>
<td class="org-left"><code>M-:</code></td>
<td class="org-left">Evaluate expression.</td>
</tr>

<tr>
<td class="org-left"><code>C-x C-e</code></td>
<td class="org-left">Evaluate last sexp before point.</td>
</tr>

<tr>
<td class="org-left"><code>C-M-f</code> &amp; <code>C-M-b</code></td>
<td class="org-left">Forward / backward sexp.</td>
</tr>

<tr>
<td class="org-left"><code>(C-u) C-x =</code></td>
<td class="org-left">Print information of the character at point.</td>
</tr>

<tr>
<td class="org-left"><code>C-x 4 a</code></td>
<td class="org-left">Generate change log.</td>
</tr>

<tr>
<td class="org-left"><code>M-h</code></td>
<td class="org-left">Select defun / paragraph.</td>
</tr>

<tr>
<td class="org-left"><code>C-x h</code></td>
<td class="org-left">Select whole buffer.</td>
</tr>

<tr>
<td class="org-left"><code>C-h h</code></td>
<td class="org-left">Shows the hello file.</td>
</tr>
</tbody>
</table>

<p>
Commands
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left"><code>list-character-sets</code></td>
<td class="org-left">Shows all unicode character sets.</td>
</tr>

<tr>
<td class="org-left"><code>display-fill-column-indicator-mode</code></td>
<td class="org-left">Shows a line at 80 column.</td>
</tr>

<tr>
<td class="org-left"><code>undo-redo</code></td>
<td class="org-left">Finally a redo in Emacs.</td>
</tr>

<tr>
<td class="org-left"><code>which-function-mode</code></td>
<td class="org-left">Shows which function you are in.</td>
</tr>
</tbody>
</table>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Hit <code>M-r</code> to start the search. Then hit <code>C-s</code> for next match (instead of <code>M-r</code>). I don’t know this at first and couldn’t understand why <code>M-r</code> doesn’t work.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Or <code>M-x count-words</code>, which is easier to remember.
</p></div></div>


</div>
</div>]]></description>
<pubDate>Thu, 06 Feb 2020 16:58:00 -0500</pubDate>
</item>
<item>
<title>Painless Transition to Portable Dumper</title>
<link>https://archive.casouri.cat/note/2020/painless-transition-to-portable-dumper</link>
<guid>https://archive.casouri.cat/note/2020/painless-transition-to-portable-dumper</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#General-Design">1. General Design</a></li>
<li><a href="#Gotcha%E2%80%99s">2. Gotcha’s</a></li>
<li><a href="#Tricks">3. Tricks</a></li>
<li><a href="#Final-notes">4. Final notes</a></li>
<li><a href="#Some-fixes-and-hacks">5. Some fixes and hacks</a></li>
<li><a href="#Other-speedup-tricks">6. Other speedup tricks</a></li>
</ul>
</div>
</div>
<p>
Emacs 27 is coming with many exciting new features including the portable dumper. There has been attempts to use portable dumper to speed up Emacs startup. I know Spacemacs <a href="https://github.com/syl20bnr/spacemacs/blob/develop/core/core-dumper.el">does this</a> from a long time ago <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>.  But I couldn’t find any post on using portable dumper for one’s home-brew init.el. I eventually figured out how. In this post I’ll show gotcha’s I found, the general design I use, and some fixes, hacks and tricks I came up with.
</p>

<p>
With portable dumper, my startup time reduced from 2.47s to 0.76s (3x). This is on Mac, it should be even faster on Linux. Even better, all it takes are ~30 lines of code, and the startup without a dump file works like before.
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2020-01-27 Mon&gt; </span></span> <br />
<b>Note:</b> Eli says bug-free dumping of custom Emacs is not a goal for Emacs 27<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>. However, dumping only packages, selectively, works fine for me.
</p>

<div id="outline-container-General-Design" class="outline-2">
<h2 id="General-Design"><span class="section-number-2">1</span> General Design</h2>
<div class="outline-text-2" id="text-1">
<p>
Start a vanilla Emacs, load packages, dump the image out. Then you start Emacs with this dump file. The point is to speed up packages that you can’t autoload — those you want immediately after startup. For example, company, ivy/helm, which-key, use-package, themes, highlight-parentheses. Other parts of init don’t change.
</p>

<p>
I created a init file for the dump process, <code>~/.emacs.d/dump.el</code>, this will dump to <code>/Users/yuan/.emacs.d/emacs.pdmp</code>.
</p>
<div class="org-src-container">
<pre class="src src-shell">emacs --batch -q -l ~/.emacs.d/dump.el
</pre>
</div>

<p>
Once dumped, I can start Emacs with the dump file <sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> (use root path, not <code>~</code>!):
</p>
<div class="org-src-container">
<pre class="src src-shell">emacs --dump-file=<span style="color: #489446;">"/Users/yuan/.emacs.d/emacs.pdmp"</span>
</pre>
</div>

<p>
A minimal <code>dump.el</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">package</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">load autoload files and populate load-path&#8217;s</span>
<span style="color: #2C79F5;">(</span>package-initialize<span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(package-initialize) doens&#8217;t require each package, we need to load</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">those we want manually</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #A8289C;">(</span>package '<span style="color: #489446;">(</span>use-package company ivy counsel org helpful
                    general helpful use-package general which-key
                    recentf-ext swiper ivy-prescient find-char
                    aggressive-indent windman doom-themes winner
                    elec-pair doom-one-light-theme
                    doom-cyberpunk-theme rainbow-delimiters
                    highlight-parentheses hl-todo buffer-move
                    savehist eyebrowse minions ws-butler
                    expand-region isolate outshine flyspell magit
                    eglot<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">require</span> <span style="color: #A8289C;">package</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">dump image</span>
<span style="color: #2C79F5;">(</span>dump-emacs-portable <span style="color: #489446;">"~/.emacs.d/emacs.pdmp"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Now let’s extend this minimal configuration with fixes and enhancements.
</p>
</div>
</div>

<div id="outline-container-Gotcha%E2%80%99s" class="outline-2">
<h2 id="Gotcha%E2%80%99s"><span class="section-number-2">2</span> Gotcha’s</h2>
<div class="outline-text-2" id="text-2">
<p>
So it seems trivial: I <code>(package-initialize)</code> and <code>(require)</code> every package in <code>dump.el</code>, and everything works, except that it doesn’t. For one, <code>load-path</code> is not stored in the dump image <sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup>. You need to store <code>load-path</code> in another variable.
</p>

<p>
In <code>dump.el</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>package-initialize<span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> luna-dumped-load-path load-path<span style="color: #2C79F5;">)</span>
...
<span style="color: #2C79F5;">(</span>dump-emacs-portable <span style="color: #489446;">"~/.emacs.d/emacs.pdmp"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
In <code>init.el</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> load-path luna-dumped-load-path<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Second, when you start Emacs with a dump file, some default modes are not enabled:
</p>
<ul class="org-ul">
<li><code>transient-mark-mode</code></li>
<li><code>global-font-lock-mode</code></li>
</ul>
<p>
So you need to turn them on in <code>init.el</code>.
</p>

<p>
And <code>global-undo-tree-mode</code> makes Emacs segfault during dumping (didn’t verify, Spacemacs says so, but why would you enable it when dumping anyway?) Spacemacs also says <code>winner-mode</code> and <code>global-undo-tree</code> mode doesn’t live through dumping. I don’t dump them so that doesn’t affect me, but watch out.
</p>

<p>
Third, you can’t use <code>~</code> in the <code>--dump-file</code> command line flag. Otherwise, Emacs complains about “cannot open dump file”. The dump file loads in very early stage, many variables are not known yet, so <code>~</code> won’t expand.
</p>

<p>
Fourth, scratch buffer behaves differently when Emacs starts with a dump file. From what I can see, <code>lisp-interaction-mode</code> is not enabled.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>add-hook 'after-init-hook
                <span style="color: #A8289C;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #489446;">()</span>
                  <span style="color: #489446;">(</span><span style="color: #E04E49;">save-excursion</span>
                    <span style="color: #DA7A48;">(</span>switch-to-buffer <span style="color: #489446;">"*scratch*"</span><span style="color: #DA7A48;">)</span>
                    <span style="color: #DA7A48;">(</span>lisp-interaction-mode<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2020-01-27 Mon&gt; </span></span> <br />
As a side note (kindly provided by Damien Cassou), (a relatively new version of) Magit uses dynamic modules, which is not dumpable. So don’t require Magit in your dump. The portable dumper doesn’t dump window configurations either, BTW.
</p>

<p>
Now the <code>dump.el</code> is:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">package</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">load autoload files and populate load-path&#8217;s</span>
<span style="color: #2C79F5;">(</span>package-initialize<span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">store load-path</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> luna-dumped-load-path load-path<span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(package-initialize) doens&#8217;t require each package, we need to load</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">those we want manually</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #A8289C;">(</span>package '<span style="color: #489446;">(</span>use-package company ivy counsel org helpful
                    general helpful use-package general which-key
                    recentf-ext swiper ivy-prescient find-char
                    aggressive-indent windman doom-themes winner
                    elec-pair doom-one-light-theme
                    doom-cyberpunk-theme rainbow-delimiters
                    highlight-parentheses hl-todo buffer-move
                    savehist eyebrowse minions ws-butler
                    expand-region isolate outshine flyspell magit
                    eglot<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">require</span> <span style="color: #A8289C;">package</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">dump image</span>
<span style="color: #2C79F5;">(</span>dump-emacs-portable <span style="color: #489446;">"xxx"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
<code>init.el</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>global-font-lock-mode<span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>transient-mark-mode<span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>add-hook 'after-init-hook
                <span style="color: #A8289C;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #489446;">()</span>
                  <span style="color: #489446;">(</span><span style="color: #E04E49;">save-excursion</span>
                    <span style="color: #DA7A48;">(</span>switch-to-buffer <span style="color: #489446;">"*scratch*"</span><span style="color: #DA7A48;">)</span>
                    <span style="color: #DA7A48;">(</span>lisp-interaction-mode<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Tricks" class="outline-2">
<h2 id="Tricks"><span class="section-number-2">3</span> Tricks</h2>
<div class="outline-text-2" id="text-Tricks">
</div>
<div id="outline-container-Keep-non-dump-file-startup-working-as-before" class="outline-3">
<h3 id="Keep-non-dump-file-startup-working-as-before"><span class="section-number-3">3.1</span> Keep non-dump-file startup working as before</h3>
<div class="outline-text-3" id="text-3-1">
<p>
I want my configuration to still work without a dump file. This is what I do:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">in init.el</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">luna-dumped</span> nil
  <span style="color: #9a9ea2;">"non-nil when a dump file is loaded.</span>
<span style="color: #9a9ea2;">(Because dump.el sets this variable)."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defmacro</span> <span style="color: #A8289C;">luna-if-dump</span> <span style="color: #A8289C;">(</span>then <span style="color: #987816;">&amp;rest</span> else<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Evaluate IF if running with a dump file, else evaluate ELSE."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">declare</span> <span style="color: #489446;">(</span>indent 1<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  `<span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> luna-dumped
       ,then
     ,@else<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">in dump.el</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> luna-dumped t<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
I use the <code>luna-if-dump</code> in <code>init.el</code> at where two startup process differs:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">luna-if-dump</span>
    <span style="color: #A8289C;">(</span><span style="color: #E04E49;">progn</span>
      <span style="color: #489446;">(</span><span style="color: #E04E49;">setq</span> load-path luna-dumped-load-path<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>global-font-lock-mode<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>transient-mark-mode<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>add-hook 'after-init-hook
                <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #A8289C;">()</span>
                  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">save-excursion</span>
                    <span style="color: #987816;">(</span>switch-to-buffer <span style="color: #489446;">"*scratch*"</span><span style="color: #987816;">)</span>
                    <span style="color: #987816;">(</span>lisp-interaction-mode<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">add load-path&#8217;s and load autoload files</span>
  <span style="color: #A8289C;">(</span>package-initialize<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
In a dump-file startup, we don’t need to <code>(package-initialize)</code> because it’s done during dumping, but we need to load <code>load-path</code> and fix other gotcha’s.
</p>
</div>
</div>

<div id="outline-container-Dump-packages-selectively" class="outline-3">
<h3 id="Dump-packages-selectively"><span class="section-number-3">3.2</span> Dump packages selectively</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Blindly dumping every package is a recipe for weird errors. I only dump those I want immediately on startup (company, ivy/helm) and those are big (org). Not that dumping everything won’t work, but it takes more energy to get everything right.
</p>
</div>
</div>

<div id="outline-container-Dumping-themes-speeds-things-up" class="outline-3">
<h3 id="Dumping-themes-speeds-things-up"><span class="section-number-3">3.3</span> Dumping themes speeds things up</h3>
<div class="outline-text-3" id="text-3-3">
<p>
When profiling my startup with <a href="https://github.com/jschaf/esup">esup</a>, I found Emacs spends 70% of the time loading the theme.
</p>
<pre class="example">
Total User Startup Time: 1.063sec
Total Number of GC Pauses: 21
Total GC Time: 0.646sec

doom-one-light-theme.el:5  0.755sec   71%
(def-doom-theme doom-one-light
"A light theme inspired by Atom One"
...
</pre>

<p>
Dumping themes is not as simple as adding <code>(load-theme theme)</code> to <code>dump.el</code>, if you do that, Emacs complains and doesn’t load the theme. I guess that’s because it’s in batch mode. Instead, require your themes like other libraries and loads them <i>without enabling them</i>.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">in dump.el</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">doom-themes</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">doom-one-light-theme</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">the two flags are no-confirm and no-enable</span>
<span style="color: #2C79F5;">(</span>load-theme 'doom-one-light-theme t t<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
In <code>init.el</code>, we enable the theme, instead of loading it. Unlike require, <code>load-theme</code> doesn’t check if the theme is already loaded. So we need to use <code>enable-theme</code>.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">in init.el</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">when</span> window-system
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">luna-if-dump</span>
      <span style="color: #489446;">(</span>enable-theme 'doom-one-light<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>load-theme 'doom-one-light<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
The speed up is significant:
</p>
<pre class="example">
...
init.el:87  0.034sec   7%
(when window-system
(luna-if-dump
(enable-theme 'doom-one-light)
(luna-load-theme nil t)))
...
</pre>
</div>
</div>

<div id="outline-container-Complete-example-%3Ccode%3Edump.el%3C/code%3E-&amp;-%3Ccode%3Einit.el%3C/code%3E" class="outline-3">
<h3 id="Complete-example-%3Ccode%3Edump.el%3C/code%3E-&amp;-%3Ccode%3Einit.el%3C/code%3E"><span class="section-number-3">3.4</span> Complete example <code>dump.el</code> &amp; <code>init.el</code></h3>
<div class="outline-text-3" id="text-3-4">
<p>
With everything I just talked about: <br />
<code>dump.el</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">package</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">load autoload files and populate load-path&#8217;s</span>
<span style="color: #2C79F5;">(</span>package-initialize<span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">store load-path</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> luna-dumped-load-path load-path
      luna-dumped t<span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(package-initialize) doens&#8217;t require each package, we need to load</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">those we want manually</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #A8289C;">(</span>package '<span style="color: #489446;">(</span>use-package company ivy counsel org helpful
                    general helpful use-package general which-key
                    recentf-ext swiper ivy-prescient find-char
                    aggressive-indent windman doom-themes winner
                    elec-pair doom-one-light-theme
                    doom-cyberpunk-theme rainbow-delimiters
                    highlight-parentheses hl-todo buffer-move
                    savehist eyebrowse minions ws-butler
                    expand-region isolate outshine flyspell magit
                    eglot<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">require</span> <span style="color: #A8289C;">package</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">pre-load themes</span>
<span style="color: #2C79F5;">(</span>load-theme 'doom-one-light-theme t t<span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>load-theme 'doom-cyberpunk-theme t t<span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">dump image</span>
<span style="color: #2C79F5;">(</span>dump-emacs-portable <span style="color: #489446;">"~/.emacs.d/emacs.pdmp"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
<code>init.el</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">luna-if-dump</span>
    <span style="color: #A8289C;">(</span><span style="color: #E04E49;">progn</span>
      <span style="color: #489446;">(</span><span style="color: #E04E49;">setq</span> load-path luna-dumped-load-path<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>global-font-lock-mode<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>transient-mark-mode<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>add-hook 'after-init-hook
                <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #A8289C;">()</span>
                  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">save-excursion</span>
                    <span style="color: #987816;">(</span>switch-to-buffer <span style="color: #489446;">"*scratch*"</span><span style="color: #987816;">)</span>
                    <span style="color: #987816;">(</span>lisp-interaction-mode<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">add load-path&#8217;s and load autoload files</span>
  <span style="color: #A8289C;">(</span>package-initialize<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">load theme</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">when</span> window-system
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">luna-if-dump</span>
      <span style="color: #489446;">(</span>enable-theme 'doom-one-light<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>luna-load-theme<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
After everything works, I wrapped dump file’s path with variables and added <code>defvar</code> for variables I introduced, etc.
</p>

<p>
(Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2020-03-08 Sun&gt;</span></span>) I forgot to mention how I dump Emacs from within Emacs:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">luna-dump</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Dump Emacs."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>buf <span style="color: #489446;">"*dump process*"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>make-process
     <span style="color: #A8289C;">:name</span> <span style="color: #489446;">"dump"</span>
     <span style="color: #A8289C;">:buffer</span> buf
     <span style="color: #A8289C;">:command</span> <span style="color: #DA7A48;">(</span>list <span style="color: #489446;">"emacs"</span> <span style="color: #489446;">"--batch"</span> <span style="color: #489446;">"-q"</span>
                    <span style="color: #489446;">"-l"</span> <span style="color: #A8289C;">(</span>expand-file-name <span style="color: #489446;">"dump.el"</span>
                                           user-emacs-directory<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>display-buffer buf<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-Final-notes" class="outline-2">
<h2 id="Final-notes"><span class="section-number-2">4</span> Final notes</h2>
<div class="outline-text-2" id="text-4">
<p>
You can be more aggressive and dump all packages and init files. But 1) since current approach is fast enough, the marginal benefit you get hardly justifies the effort; 2) if you dump your init files, you need to re-dump every time you change your configuration. Oh, and there are a bunch of Lisp objects that cannot be dumped, e.g., window configurations, frames. Just think about the work needed to handle those in your init files. If you really care that much about speed, <a href="https://github.com/hlissner/doom-emacs">Dark Side</a> is always awaiting.
</p>
</div>
</div>

<div id="outline-container-Some-fixes-and-hacks" class="outline-2">
<h2 id="Some-fixes-and-hacks"><span class="section-number-2">5</span> Some fixes and hacks</h2>
<div class="outline-text-2" id="text-5">
<p>
Here I record some problems I encountered that’s not related to dumping.
</p>
</div>

<div id="outline-container-recentf-ext" class="outline-3">
<h3 id="recentf-ext"><span class="section-number-3">5.1</span> recentf-ext</h3>
<div class="outline-text-3" id="text-5-1">
<p>
When dumping recentf-ext, I found some problems and changed two places in <code>recentf-ext.el</code>. It has a <code>(recentf-mode 1)</code> as a top level form. That means <code>recentf-mode</code> enables  whenever <code>recentf-ext.el</code> loads. Not good. I removed it. It also has a line requiring for <code>cl</code> even though it didn’t use it, I removed that as well. My fork is at <a href="https://github.com/casouri/lunarymacs/blob/master/site-lisp/recentf-ext.el">here</a>.
</p>
</div>
</div>

<div id="outline-container-Use-esup-with-dump-file" class="outline-3">
<h3 id="Use-esup-with-dump-file"><span class="section-number-3">5.2</span> Use esup with dump file</h3>
<div class="outline-text-3" id="text-5-2">
<p>
(Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2021-02-13 Sat&gt;</span></span>: I now recommend <a href="https://github.com/dholm/benchmark-init-el">benchmark-init</a> over esup.)
</p>

<p>
<a href="https://github.com/jschaf/esup">esup</a> is a great way to see what package is taking most time in startup. It helps me find what packages to dump. However, esup doesn’t support loading dump files, and we need to modify it a bit. We also want to know if we are in esup child process, so we don’t start an Emacs server (and do other things differently, depends on your configuration). Go to <code>esup</code> in <code>esup.el</code> (by <code>find-library</code>), and change the <code>process-args</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #489446;">"*esup-child*"</span>
 <span style="color: #489446;">"*esup-child*"</span>
 ,esup-emacs-path
 ,@args
 <span style="color: #489446;">"-q"</span>
 <span style="color: #489446;">"-L"</span> ,esup-load-path
 <span style="color: #489446;">"-l"</span> <span style="color: #489446;">"esup-child"</span>
 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">+++++++++++++++++++++++++++++++++++++++++</span>
 <span style="color: #489446;">"--dump-file=/Users/yuan/.emacs.d/emacs.pdmp"</span>
 <span style="color: #489446;">"--eval (setq luna-in-esup t)"</span>
 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">+++++++++++++++++++++++++++++++++++++++++</span>
 ,<span style="color: #A8289C;">(</span>format <span style="color: #489446;">"--eval=(esup-child-run \"%s\" \"%s\" %d)"</span>
          init-file
          esup-server-port
          esup-depth<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-Other-speedup-tricks" class="outline-2">
<h2 id="Other-speedup-tricks"><span class="section-number-2">6</span> Other speedup tricks</h2>
<div class="outline-text-2" id="text-Other-speedup-tricks">
</div>
<div id="outline-container-early-init.el" class="outline-3">
<h3 id="early-init.el"><span class="section-number-3">6.1</span> early-init.el</h3>
<div class="outline-text-3" id="text-6-1">
<p>
This <a href="https://www.reddit.com/r/emacs/comments/enmbv4/earlyinitel_reduce_init_time_about_02_sec_and/">post</a> talks about early-init.el speedup. Here is <a href="https://github.com/casouri/lunarymacs/blob/master/early-init.el">my early-init.el</a>.
</p>
</div>
</div>

<div id="outline-container-Start-with-correct-frame-size" class="outline-3">
<h3 id="Start-with-correct-frame-size"><span class="section-number-3">6.2</span> Start with correct frame size</h3>
<div class="outline-text-3" id="text-6-2">
<p>
Normally Emacs starts with a small frame, and if you have <code>(toggle-frame-maximized)</code>, it later expands to the full size. You can eliminate this annoying flicker and make Emacs show up with full frame size. I learned it from <a href="https://emacs-china.org/t/emacs/11271/11?u=casouri">this emacs-china post</a>. Basically you use <code>-g</code> (for geometry) and <code>--font</code> flags together to size the startup frame. I use
</p>
<div class="org-src-container">
<pre class="src src-shell">~/bin/emacs -g 151x50 -font <span style="color: #489446;">"SF Mono-13"</span>
</pre>
</div>

<p>
At the point (<span class="timestamp-wrapper"><span class="timestamp">&lt;2020-01-18 Sat&gt;</span></span>) you can’t use <code>--dump-file</code> with <code>-g</code> and <code>-font</code> because of a bug, but it should be fixed soon. Track it <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=39168">here</a>.
</p>
</div>
</div>

<div id="outline-container-Eliminate-theme-flicker" class="outline-3">
<h3 id="Eliminate-theme-flicker"><span class="section-number-3">6.3</span> Eliminate theme flicker</h3>
<div class="outline-text-3" id="text-6-3">
<p>
Manateelazycat <a href="https://github.com/manateelazycat/lazycat-emacs/blob/39a74af15d3343219997a3c7894e9bb87cfc4e6c/site-lisp/config/init.el#L17">sets default background to theme background in custom.el</a>. This way Emacs starts with your theme’s background color, instead of white.
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
And people have been using the old dumping facility for a even longer time, you can find more on EmacsWiki.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Quote from <a href="https://www.reddit.com/r/emacs/comments/eqhvt7/use_portable_dumper_in_your_init/fewiwr7?utm_source=share&amp;utm_medium=web2x">reddit</a>:
</p>
<blockquote>
<p>
Caveat emptor: Re-dumping is still not 100% bug-free in the current Emacs codebase (both the emacs-27 release branch and master). There are known issues, and quite probably some unknown ones. Making re-dumping bug-free is not a goal for Emacs 27.1, so this feature should be at this point considered as experimental "use at your own risk" one.
</p>
</blockquote></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
Apart from <code>--dump-file</code>, <code>--dump</code> also works, even though <code>emacs --help</code> doesn’t mention it. Spacemacs uses <code>--dump</code>.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
You can find more about it in Emacs 27’s Manual. I was foolish enough to read the online manual (Emacs 26 at the time) and not aware of the <code>load-path</code> thing until I read Spacemacs’s implementation.
</p></div></div>


</div>
</div>]]></description>
<pubDate>Fri, 17 Jan 2020 23:34:00 -0500</pubDate>
</item>
<item>
<title>La transcendència de certes matèries primeres d'Amer ica després de l'Descobriment</title>
<link>https://archive.casouri.cat/note/2019/la-transcend%C3%A8ncia-de-certes-mat%C3%A8ries-primeres-d'amer-ica-despr%C3%A9s-de-l'descobriment</link>
<guid>https://archive.casouri.cat/note/2019/la-transcend%C3%A8ncia-de-certes-mat%C3%A8ries-primeres-d'amer-ica-despr%C3%A9s-de-l'descobriment</guid>
<description><![CDATA[<p>
陈逸的文章。
</p>
<hr />
<p>
Quan es fa referència a l'Descobriment del Nou Món, immediatament es rememora tot el dolent que van provocar els conqueridors. El dany i el sofriment provocats a les indígenes, posteriorment tractats com esclaus, sempre serà la taca de les fosques intencions de l'aleshores imperi d'Espanya. En efecte, això mai es podrà oblidar, però, el que no hauria de ser passat per alt és que la conquesta també va comportar un seguit d'aranyes que trascendi eron fins al nostre present. La veritat és que el "descobriment" per als europeus no només remet a un reconeixement de el terreny, sinó que a més va ser un descobriment de valuoses matèries primeres altament importants en l'actualitat. Ens referim a dos productes agrícoles: el tabac, un producte netament indígena, que avui dia genera en moltes nacions 1 gran part dels ingressos tributaris; i la papa, una de les fonts alimentàries més importants a tot el món.
</p>

<p>
En primer lloc, hi ha evidència que el tabac va ser introduït a Europa pels conqueridors amb una finalitat exclusivament comercial . Segons George B. Griffenhagen, en 1523, després de la mort de Diego Colom, consta documentat que aquest fill de l' Cristòfor Colom havia deixat un llegat a un comerciant de tabac a Lisboa, el que significa clarament que ja hi havia un comerç de tabac ( 136 ) . És a dir, després de la conquesta , estava començant a créixer un important mercat comercial dedicat a el tabac. Actualment, el tabac a Europa posseeix el seu propi impost, de l' que es s'estima anualment un ingrés tributari considerable en diferents nacions. D'acord amb l'Oficina de Publicacions de Govern d'EE. UU., L'ingrés tributari en el 2015 va ser de 3.25 bilions de dòlars, sent el 5% d'aquest import procedent de l'impost de l'tabac ( Amadeu 2 ). El 5% sembla una proporció petita, però, el 5% de 3.25 bilions de dòlars és equivalent a el PIB de Jamaica. Per tant, el tabac té un paper important en l'economia del nostre món. Si els conqueridors no ho haguessin portat a Europa, l'economia tindria una " lleugera " variant.
</p>

<p>
Per altra banda, la patata, l'altra matèria primera que va resultar ser un gran descobriment per als conqueridors, es convertiria en un o dels tubercles més cultivats a Europa. Segons les investigacions de Sidney W. Mintz , la patata procedent dels Andes va ser predominant al nord d'Europa, a les Illes Britàniques, França, Alemanya, Europa Central i les terres eslaves, excedint per molt als cultius de blat de moro, a més de otr o s importants introduïts aliments ( 101) . Això vol dir que moltes poblacions europees durant els temps de la conquesta consumien una important quantitat d'aquest tubercle. A partir d' esdeveniments al llarg de la Història, podem deduir fins i tot que l'alimentació de moltes comunitats depenia en gran part de la papa. Per exemple, durant la dècada de 1840, quan va ocórrer la fam irlandesa de la papa, originada per un tió que va infectar els cultius de papa a tot Europa, van morir al voltant de 100,000 persones. Això ens mostra un perfil d'una realitat sense el cultiu de la papa que va implicar menys població , que té una forta correlació amb la productivitat perquè molts països han experimentat simultàniament un ràpid creixement tant de la seva economia com de la seva poblaci ó n amb un ràpid creixement de productivida d (Bloom &amp; Freeman 382) .
</p>

<p>
En conclusió , podríem dir que si no hagués n estat portats d'Amèrica els productes esmentats, la velocitat de el desenvolupament del nostre món tindria un ritme més lent. És molt important recalcar que aquestes dues matèries primeres enforteixen l'economia , enriqueix l'alimentació i la cultura gastronòmic dels éssers humans . És clar que amb això no recolzem ni passem per alt les atrocitats que van esdevenir a conseqüència de la conquesta. d'Amèrica. Potser els éssers humans som egoistes. Si bé tant els indígenes com els europeus van formar part de el comerç de l'tabac i de la papa, els que van sobreviure, és a dir, els que van rebre els beneficis, van ser els que es van adjudicar el títol de "descobridors" d'aquests inputs. Tot i que els indígenes no van ser els que van definir la importància i la posterior transcendència que tindrien les matèries primeres en qüestió, són ells els que han de rebre el mèrit.
</p>



<p>
<b>Works Cited</b>
</p>

<p>
Amadeo, Kimberly. "Thank Sequestration for a Smaller Dèficit in FY 2015." The Balance , The
</p>

<p>
Balanç, 25 June 2019, htt p s: //www.thebalance.com/fy-2015-us-federal-budget-and-spending-3306304 .
</p>

<p>
Bloom, David E., and Richard B. Freeman. "The Effects of Rapid Population Growth on Labor
</p>

<p>
Supply and Employment in Developing Countries. " Population and Development Review , vol. 12, no. 3, 1986, pp. 381-414. JSTOR , www.jstor.org/stable/1973216.
</p>

<p>
Griffenhagen, George B. "The Matèria Medica of Christopher Columbus." Pharmacy in History , vol. 34, no. 3, 1992, pp. 131-145. JSTOR, www.jstor.org/stable/41111458.
</p>

<p>
Mintz , Sidney W. "The Old And New World Exchange." Nutrition Today , vol. 33, no. 3, 1998,
</p>

<p>
pp. 99-102., Doi: 10.1097 / 00017285-199805000-00006.
</p>

<p>
"Tobacco Tax Revenue." Tax Policy Center , 18 octubre 2017,
</p>

<p>
<a href="https://www.taxpolicycenter.org/statistics/tobacco-tax-revenue">https://www.taxpolicycenter.org/statistics/tobacco-tax-revenue</a> .
</p>
]]></description>
<pubDate>Thu, 26 Dec 2019 10:21:00 -0500</pubDate>
</item>
<item>
<title>Debug in Emacs</title>
<link>https://archive.casouri.cat/note/2019/debug-in-emacs</link>
<guid>https://archive.casouri.cat/note/2019/debug-in-emacs</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#debug">1. debug</a></li>
<li><a href="#edebug">2. edebug</a></li>
</ul>
</div>
</div>
<p>
This is a note  on debugging in Emacs.
</p>

<div id="outline-container-debug" class="outline-2">
<h2 id="debug"><span class="section-number-2">1</span> debug</h2>
<div class="outline-text-2" id="text-1">
<dl class="org-dl">
<dt><code>debug-on-entry</code></dt><dd>enter the debugger when a function is called</dd>
<dt><code>cancel-debug-on-entry</code></dt><dd>As the name suggests</dd>
<dt><code>toggle-debug-on-error</code></dt><dd>whether to enter the debugger if an error occurs</dd>
</dl>

<p>
When you are in the debugger, you have following commands for use:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left"><code>c</code></td>
<td class="org-left">continue, but don’t stop next time.</td>
</tr>

<tr>
<td class="org-left"><code>d</code></td>
<td class="org-left">continue and enter the debugger again next time.</td>
</tr>

<tr>
<td class="org-left"><code>e</code></td>
<td class="org-left">evaluate expressions (better than <code>M-:</code>).</td>
</tr>

<tr>
<td class="org-left"><code>r</code></td>
<td class="org-left">return a value from debugger.</td>
</tr>

<tr>
<td class="org-left"><code>l</code></td>
<td class="org-left">list functions that will enter the debugger.</td>
</tr>

<tr>
<td class="org-left"><code>b</code></td>
<td class="org-left">flag the current frame so we will enter debugger again when the frame exits.</td>
</tr>
</tbody>
</table>

<p>
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugger-Commands.html#Debugger-Commands">Complete list of commands</a>
</p>
</div>
</div>

<div id="outline-container-edebug" class="outline-2">
<h2 id="edebug"><span class="section-number-2">2</span> edebug</h2>
<div class="outline-text-2" id="text-2">
<dl class="org-dl">
<dt><code>edebug-defun</code> / <code>C-u eval-defun</code></dt><dd>instrument function to enter stepper when the function runs. To cancel the instrument, simply use <code>eval-defun</code> to reevaluate the function normally.</dd>
</dl>

<p>
Some common commands in edebug:
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left"><code>n</code></td>
<td class="org-left">step</td>
</tr>

<tr>
<td class="org-left"><code>q</code></td>
<td class="org-left">quit</td>
</tr>

<tr>
<td class="org-left"><code>r</code></td>
<td class="org-left">re-display last value in echo area</td>
</tr>

<tr>
<td class="org-left"><code>b</code></td>
<td class="org-left">set break point, use <code>C-u</code> to set a one-time break point</td>
</tr>

<tr>
<td class="org-left"><code>x</code></td>
<td class="org-left">set break condition</td>
</tr>

<tr>
<td class="org-left"><code>c</code></td>
<td class="org-left">continue</td>
</tr>
</tbody>
</table>

<p>
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug">Complete list of commands</a>
</p>
</div>
</div>
]]></description>
<pubDate>Sat, 05 Oct 2019 14:31:00 -0400</pubDate>
</item>
<item>
<title>Use Command bindings in iTerm for Emacs</title>
<link>https://archive.casouri.cat/note/2019/use-command-bindings-in-iterm-for-emacs</link>
<guid>https://archive.casouri.cat/note/2019/use-command-bindings-in-iterm-for-emacs</guid>
<description><![CDATA[<p>
If you use mac, normally you can’t use command keys in Emacs inside a terminal as in GUI. This <a href="https://www.emacswiki.org/emacs/iTerm2#toc11">Emacs Wiki</a> page gives a tutorial on how to use your own escape sequence in iTerm and translate them into bindings in Emacs. The only problem is that you have to manually set each escape sequence in iTerm. So I never bothered. Now with the fresh 3.3.5 beta version, you can import and export key mappings in iTerm. Here is how I did it.
</p>

<p>
First we want to see what does the format looks like. I manually set a few bindings and exported it:
</p>

<pre class="example">
"0x61-0x40000":{"Text":"C-a", "Action":11},
"0x61-0x100000":{"Text":"s-a", "Action":10},
"0x62-0x100000":{"Text":"s-b", "Action":10},
"0x7a-0x100000":{"Text":"s-z", "Action":10},
</pre>

<p>
Seems that <code>0x61</code> to <code>0x7A</code> represents <code>a</code> to <code>z</code>, and <code>0x100000</code> represents the command key. Now let’s generate an entry like that. I used the same sequence as in the Wiki page: <code>[1;Pxxx</code>, I just replaced the number with the letters since that’s clearer.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>format <span style="color: #489446;">"\"0x%X-0x100000\":{\"Text\":\"[1;P%c\", \"Action\":10},"</span> #x61 ?a<span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;;</span><span style="color: #9a9ea2;">=&gt; "\"0x61-0x100000\":{\"Text\":\"[1;Pa\", \"Action\":10},"</span>
</pre>
</div>

<p>
Looks good, now it’s time to generate all of them
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">cl-lib</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>message <span style="color: #A8289C;">(</span>string-join
          <span style="color: #489446;">(</span><span style="color: #E04E49;">cl-loop</span> for hex from #x61 to #x7a
                   for char from ?a to ?z
                   collect <span style="color: #DA7A48;">(</span>format
                            <span style="color: #489446;">"\"0x%X-0x100000\":{\"Text\":\"[1;P%c\",</span>
<span style="color: #489446;"> \"Action\":10}"</span> hex char<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
          <span style="color: #489446;">",\n"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Send them to message buffer and copy &amp; paste is a lazy yet effective approach. Now we create a new file, name it <code>import.itermkeymap</code> and put our configs in.
</p>

<pre class="example">
{"Key Mappings":{
"0x61-0x100000":{"Text":"[1;Pa", "Action":10},
"0x62-0x100000":{"Text":"[1;Pb", "Action":10},
"0x63-0x100000":{"Text":"[1;Pc", "Action":10},
"0x64-0x100000":{"Text":"[1;Pd", "Action":10},
"0x65-0x100000":{"Text":"[1;Pe", "Action":10},
"0x66-0x100000":{"Text":"[1;Pf", "Action":10},
"0x67-0x100000":{"Text":"[1;Pg", "Action":10},
"0x68-0x100000":{"Text":"[1;Ph", "Action":10},
"0x69-0x100000":{"Text":"[1;Pi", "Action":10},
"0x6A-0x100000":{"Text":"[1;Pj", "Action":10},
"0x6B-0x100000":{"Text":"[1;Pk", "Action":10},
"0x6C-0x100000":{"Text":"[1;Pl", "Action":10},
"0x6D-0x100000":{"Text":"[1;Pm", "Action":10},
"0x6E-0x100000":{"Text":"[1;Pn", "Action":10},
"0x6F-0x100000":{"Text":"[1;Po", "Action":10},
"0x70-0x100000":{"Text":"[1;Pp", "Action":10},
"0x71-0x100000":{"Text":"[1;Pq", "Action":10},
"0x72-0x100000":{"Text":"[1;Pr", "Action":10},
"0x73-0x100000":{"Text":"[1;Ps", "Action":10},
"0x74-0x100000":{"Text":"[1;Pt", "Action":10},
"0x75-0x100000":{"Text":"[1;Pu", "Action":10},
"0x76-0x100000":{"Text":"[1;Pv", "Action":10},
"0x77-0x100000":{"Text":"[1;Pw", "Action":10},
"0x78-0x100000":{"Text":"[1;Px", "Action":10},
"0x79-0x100000":{"Text":"[1;Py", "Action":10},
"0x7A-0x100000":{"Text":"[1;Pz", "Action":10}
}}
</pre>

<p>
If you import this in iTerm you can see indeed all the escape sequences are set. Some tips:
</p>
<ul class="org-ul">
<li>I took <code>⌘-q</code>, <code>⌘-w</code>, <code>⌘-c</code>, and <code>⌘-v</code> out.</li>
<li>The configuration file can’t contain comments.</li>
<li>iTerm has two places to set keys, one simply under “Keys” tab, the other under “Profiles” →  “Keys” tab.</li>
<li>Some command bindings doesn’t work even you import the key configurations. For example, typing <code>⌘-n</code> still opens a new window. To fix that, you need to re-enter the key sequence manually. Double-click on the binding’s entry, click on “Keyboard Shortcut”, and re-type your binding.</li>
</ul>


<div id="org61c390e" class="figure">
<p><img src="/note/2019/use-command-bindings-in-iterm-for-emacs/reset-key.png" alt="reset-key.png" />
</p>
<p><span class="figure-number">Figure 1: </span>Re-enter the key sequence</p>
</div>

<p>
Now we only need to tell emacs to translate those escape sequences to bindings.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">cl-loop</span> for char from ?a to ?z
         do <span style="color: #A8289C;">(</span>define-key input-decode-map <span style="color: #489446;">(</span>format <span style="color: #489446;">"\e[1;P%c"</span> char<span style="color: #489446;">)</span> <span style="color: #489446;">(</span>kbd <span style="color: #DA7A48;">(</span>format <span style="color: #489446;">"s-%c"</span> char<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
]]></description>
<pubDate>Sun, 22 Sep 2019 13:32:00 -0400</pubDate>
</item>
<item>
<title>Display console in Emacs</title>
<link>https://archive.casouri.cat/note/2019/display-console-in-emacs</link>
<guid>https://archive.casouri.cat/note/2019/display-console-in-emacs</guid>
<description><![CDATA[<p>
When editing source, let it be source code or Tex source, we usually need another session for interactive operations like shell, REPL, compile log, etc.
</p>

<p>
I want the interactive session to be associated with the source and can easily switch on and off. The result is two function: <code>toggle-console-buffer</code> and <code>toggle-console-window</code>.
</p>

<p>
I primarily work on my laptop with only one window displayed. So normally I just switch between source buffer and the console buffer (the interactive session) by <code>toggle-console-buffer</code>. In other time, I want to see the update in console buffer while working in source buffer. <code>toggle-console-window</code> switches on a dedicated window<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> on the bottom. The clever thing is, when this window is live, <code>toggle-console-buffer</code> doesn’t switch to console buffer in the main window, but jumps to the console window at the bottom.
</p>

<p>
Here is the code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">luna-console-buffer-alist</span> '<span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>emacs-lisp-mode . <span style="color: #489446;">"*scratch*"</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"An alist with element (major-mode . console buffer)."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar-local</span> <span style="color: #A8289C;">luna-console-buffer-p</span> nil
  <span style="color: #9a9ea2;">"T if this buffer is a console buffer."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">luna--get-console-buffer</span> <span style="color: #A8289C;">(</span>major-mode<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Return the console buffer corresponding to MAJOR-MODE.</span>
<span style="color: #9a9ea2;">Return nil if none exists."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if-let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>console-buffer <span style="color: #A8289C;">(</span>alist-get major-mode luna-console-buffer-alist<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      console-buffer
    <span style="color: #489446;">(</span>message <span style="color: #489446;">"No console buffer, use `</span><span style="color: #A8289C;">luna-set-console-buffer</span><span style="color: #489446;">' to set one"</span><span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">luna-toggle-console</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Toggle display of console buffer.</span>
<span style="color: #9a9ea2;">When console window is live, jump between console window and previous window;</span>
<span style="color: #9a9ea2;">when console window is not live, switch between console buffer and previous buffer."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> <span style="color: #489446;">(</span>window-live-p luna-console-window<span style="color: #489446;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">jump between console window and previous window</span>
      <span style="color: #489446;">(</span><span style="color: #E04E49;">if</span> luna-console-buffer-p
          <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">if-let</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>win <span style="color: #2C79F5;">(</span>window-parameter luna-console-window 'luna-console-jump-back<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
              <span style="color: #A8289C;">(</span>select-window win<span style="color: #A8289C;">)</span>
            <span style="color: #A8289C;">(</span>select-window <span style="color: #987816;">(</span>previous-window<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
            <span style="color: #A8289C;">(</span>message <span style="color: #489446;">"Could not find previous window, guess one"</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">let</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>old-window <span style="color: #2C79F5;">(</span>selected-window<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
          <span style="color: #A8289C;">(</span>select-window luna-console-window<span style="color: #A8289C;">)</span>
          <span style="color: #A8289C;">(</span>set-window-parameter nil 'luna-console-jump-back old-window<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">switch between console buffer and previous buffer</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">if</span> luna-console-buffer-p
        <span style="color: #DA7A48;">(</span>previous-buffer<span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span>switch-to-buffer <span style="color: #A8289C;">(</span>luna--get-console-buffer major-mode<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq-local</span> luna-console-buffer-p t<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">luna-set-console-buffer</span> <span style="color: #A8289C;">(</span>buffer<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Set current console buffer to BUFFER."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span> <span style="color: #489446;">"b"</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setf</span> <span style="color: #489446;">(</span>alist-get major-mode luna-console-buffer-alist<span style="color: #489446;">)</span>
        <span style="color: #489446;">(</span>get-buffer buffer<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">luna-console-window</span> nil
  <span style="color: #9a9ea2;">"A window at bottom dedicated to console buffer."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">luna-toggle-console-window</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Toggle display of console window."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> <span style="color: #489446;">(</span>window-live-p luna-console-window<span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>delete-window luna-console-window<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">when-let</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>buf <span style="color: #987816;">(</span>luna--get-console-buffer major-mode<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> luna-console-window
            <span style="color: #A8289C;">(</span>display-buffer-at-bottom <span style="color: #987816;">(</span>get-buffer buf<span style="color: #987816;">)</span> '<span style="color: #987816;">(</span><span style="color: #2C79F5;">(</span>window-height . 0.2<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Some note:
</p>
<ul class="org-ul">
<li>I associate the major mode of source to a single console buffer (or the buffer name). Add new associations by pushing new key-value pair to the alist:</li>
</ul>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>add-to-list 'luna-console-buffer-alist '<span style="color: #A8289C;">(</span>haskell-mode . <span style="color: #489446;">"*haskell*"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
<ul class="org-ul">
<li>I never use multiple frames so the above code needs adjustment to work with that. For example, <code>luna-console-window</code> should probably be a frame parameter.</li>
</ul>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
I didn’t use <code>set-window-dedicated-p</code> so it’s not really dedicated.
</p></div></div>


</div>
</div>]]></description>
<pubDate>Fri, 02 Aug 2019 19:08:00 -0400</pubDate>
</item>
<item>
<title>Reduce Font Loading Time in My Blog</title>
<link>https://archive.casouri.cat/note/2019/reduce-font-loading-time-in-my-blog</link>
<guid>https://archive.casouri.cat/note/2019/reduce-font-loading-time-in-my-blog</guid>
<description><![CDATA[<p>
I use Source Han Serif on my blogs. And it takes ages to load. Source Serif Pro Regular (an English font) has a size of 217 KB. Source Han Serif Regular? 23.6 MB. I have to reduce the size of the font file!
</p>

<p>
Woff2 is said to be a compressed format. Here is the <a href="https://github.com/google/woff2">girhub repo</a>.
</p>
<div class="org-src-container">
<pre class="src src-shell">$ git clone --recursive https://github.com/google/woff2.git --depth 1
$ cd woff2
$ make clean all
$ ./woff2_compress /Users/yuan/p/casouri/misc/SourceHanSerifSC-Regular.otf
Processing /Users/yuan/p/casouri/misc/SourceHanSerifSC-Regular.otf =&gt;
/Users/yuan/p/casouri/misc/SourceHanSerifSC-Regular.woff2
Compressed 23613247 to 15551008.
</pre>
</div>
<p>
After converting to woff2 format, the size is reduce to 15.6MB, still too large.
</p>

<p>
Source Han Serif covers a lot of rare glyph. Maybe cutting them out can give me a smaller file. <a href="https://github.com/fonttools/fonttools">fonttool</a> has s subcommand <code>pyftsubset</code> that produces a subset of a font file.
</p>

<div class="org-src-container">
<pre class="src src-shell">pyftsubset ~/p/casouri/misc/SourceHanSerifSC-Regular.otf <span style="color: #489446;">\</span>
           --unicode=0-7f, 3000-303f,4e00-9faf --flavor=woff2
</pre>
</div>
<p>
gives a font file with only ASCII, CJK Unified Ideographs and CJK Symbols and Punctuation, compressed to woff2 format. The reduced size is 10.9 MB. Still not good.
</p>

<p>
I need even less glyph in my font file. For that I find a file with 3500 most used Chinese glyph in it, and pass that to <code>pyftsubset</code>. (you can find the file at <a href="file:///misc/most-used-zh-char.txt">here</a>.)
</p>
<div class="org-src-container">
<pre class="src src-shell">pyftsubset ~/p/casouri/misc/SourceHanSerifSC-Regular.otf <span style="color: #489446;">\</span>
           --unicodes=0-7f,3000-303f <span style="color: #489446;">\</span>
           --text-file=/Users/yuan/Desktop/most-used-zh-char.txt<span style="color: #489446;">\</span>
           --flavor=woff2
</pre>
</div>
<p>
This cuts down the size to 1.7 MB. That’s still large comparing to English fonts, but I’m happy with it.
</p>

<p>
No, not really, it’s still slow, but at least it’s faster than before&#x2026; If I want it to load even faster than that, I need to generate font files that only contains the glyph of a particular page. That’s not trivial for a static site.
</p>

<p>
(Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-07-22 Mon 14:20&gt;</span></span>)
</p>

<p>
Since the Chinese fonts still takes a while to load even with the compressed size. It is best to display a default system font before the web font is loaded so the user won’t stare at empty spaces. This is done by <code>font-display</code> property. <code>font-display: swap</code> will display default font almost immediately and swap to web font one it is loaded.
</p>

<p>
(Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2021-04-20 Tue 22:54&gt;</span></span>)
</p>

<p>
The previous font I created has some problems, it doesn’t contain punctuation marks and misses some common glyphs. I fixed those issues and the new file is at <a href="file:///misc/常用字及符号.txt">here</a>. I don’t want the font file to contain Latin characters, so that Latin characters can fall back to my English font. So I also changed the command:
</p>

<div class="org-src-container">
<pre class="src src-shell">pyftsubset ~/p/casouri/misc/SourceHanSerifCN-Regular.otf <span style="color: #489446;">\</span>
           --text-file=&#24120;&#29992;&#23383;&#21450;&#31526;&#21495;.txt <span style="color: #489446;">\</span>
           --flavor=woff2
</pre>
</div>
]]></description>
<pubDate>Mon, 15 Jul 2019 21:28:00 -0400</pubDate>
</item>
<item>
<title>Emacs，字体与字符集</title>
<link>https://archive.casouri.cat/note/2019/emacs-%E5%AD%97%E4%BD%93%E4%B8%8E%E5%AD%97%E4%BD%93%E9%9B%86</link>
<guid>https://archive.casouri.cat/note/2019/emacs-%E5%AD%97%E4%BD%93%E4%B8%8E%E5%AD%97%E4%BD%93%E9%9B%86</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%AD%97%E4%BD%93">1. 设置默认字体</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%A4%87%E5%AD%97%E4%BD%93">2. 设置后备字体</a></li>
<li><a href="#%E4%B8%BA%E6%8C%87%E5%AE%9A%E5%AD%97%E5%BD%A2%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93">3. 为指定字形设置字体</a></li>
<li><a href="#%E4%B8%BA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E5%92%8C%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93">4. 为不同字符和语言设置字体</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%AA%E5%AD%97%E4%BD%93%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85">5. 如何检查一个字体是否已经安装</a></li>
<li><a href="#%E9%99%84%E5%BD%95">6. 附录</a></li>
</ul>
</div>
</div>
<hr />

<p>
<b>写在前面</b>
</p>

<p>
文章转载自<a href="https://idiocy.org/emacs-fonts-and-fontsets.html">Emacs, fonts and fontsets</a>，原作者为Alan Third。
</p>

<p>
中英文名词对照：
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">中文</th>
<th scope="col" class="org-left">English</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">文档</td>
<td class="org-left">buffer</td>
</tr>

<tr>
<td class="org-left">窗口</td>
<td class="org-left">window</td>
</tr>

<tr>
<td class="org-left">窗体</td>
<td class="org-left">frame</td>
</tr>

<tr>
<td class="org-left">字体集</td>
<td class="org-left">fontset</td>
</tr>

<tr>
<td class="org-left">字符集</td>
<td class="org-left">charset</td>
</tr>
</tbody>
</table>

<p>
以下是正文
</p>

<hr />

<p>
我一直对Emacs的字体系统不甚了解。虽然字符集明显是我很多问题的解决方案，但是我一直没法搞明白怎么用它。我打算在这篇文章里记下在Emacs里设置字体的方法。
</p>

<div id="outline-container-%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%AD%97%E4%BD%93" class="outline-2">
<h2 id="%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%AD%97%E4%BD%93"><span class="section-number-2">1</span> 设置默认字体</h2>
<div class="outline-text-2" id="text-1">
<p>
看起来在Emacs里设置默认字体有不少途径，我用的是这个：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-face-attribute 'default nil <span style="color: #A8289C;">:font</span> <span style="color: #489446;">"Droid Sans Mono"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
这会修改默认字体集，从而为所有窗体设置字体。
</p>
</div>
</div>

<div id="outline-container-%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%A4%87%E5%AD%97%E4%BD%93" class="outline-2">
<h2 id="%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%A4%87%E5%AD%97%E4%BD%93"><span class="section-number-2">2</span> 设置后备字体</h2>
<div class="outline-text-2" id="text-2">
<p>
但是如果你在不同设备上用同一种字体配置，或者你选择的字体没有包括所有必需的字形呢？Emacs默认会搜索所有字体直到找到一个包括了需要字形的字体，但是这个过程充满偶然，并且可能很慢<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>。
</p>

<p>
Emacs允许你指定后备字体。给默认字体集设置后备字体可以这么写：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-fontset-font t nil <span style="color: #489446;">"Courier New"</span> nil 'append<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
第一个参数用 <code>t</code> 意味更新默认字体集。创建其他字体集并使用它们是可能的，但是我从没成功过。所以我倾向于直接改默认字体集。第二个参数指定字形范围，我们之后会提到。最后一个参数， <code>’append</code> ，告诉Emacs添加这个字体到字符体集的末尾，所以这个字体会在其他字体集里的字体都搜索过了以后才被搜索到。你也可以用 <code>’prepend</code> ，这会把字体放在字体集的开头，但依然在默认字体的后面。
</p>
</div>
</div>

<div id="outline-container-%E4%B8%BA%E6%8C%87%E5%AE%9A%E5%AD%97%E5%BD%A2%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93" class="outline-2">
<h2 id="%E4%B8%BA%E6%8C%87%E5%AE%9A%E5%AD%97%E5%BD%A2%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93"><span class="section-number-2">3</span> 为指定字形设置字体</h2>
<div class="outline-text-2" id="text-3">
<p>
回到第二个参数，指定字形范围的那个。你可以指定单独的字形、字形区间、字符集或者语言。
</p>

<p>
假设你想让😊用某个字体。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-fontset-font t ?&#128522; <span style="color: #489446;">"Segoe UI Emoji"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
或者你也可以指定区间。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-fontset-font t '<span style="color: #A8289C;">(</span>?&#128522; . ?&#128526;<span style="color: #A8289C;">)</span> <span style="color: #489446;">"Segoe UI Emoji"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
你不能设置ASCII字符，Emacs不允许。
</p>
</div>
</div>

<div id="outline-container-%E4%B8%BA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E5%92%8C%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93" class="outline-2">
<h2 id="%E4%B8%BA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E5%92%8C%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93"><span class="section-number-2">4</span> 为不同字符和语言设置字体</h2>
<div class="outline-text-2" id="text-4">
<p>
假设你处理很多泰语，但是你的默认字体不支持泰语，或者你就是很喜欢另一个字体的泰语字符的样子。
</p>

<p>
查看 <code>script-representative-chars</code> 和 <code>list-charset-chars</code> 看看你想要的语言在不在里面，在的话就用那个名字。你也可以在一个字符上用 <code>describe-char</code> ，然后看 <b>charset</b> 或 <b>script</b> 项。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-fontset-font t 'thai <span style="color: #489446;">"Noto Sans Thai"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
这个会给Emacs极大的加速，因为Emacs不再需要跑遍几百个字体了。
</p>

<p>
如果你需要给泰语设置一个后备字体，只需要像之前一样。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-fontset-font t 'thai <span style="color: #489446;">"Leelawadee UI"</span> nil 'append<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
这个的缺点是，如果你在没有你指定的字体的机器上用同样的配置，Emacs不会像之前一样搜索可用的字体，Emacs会直接给你一堆方块。不过不要担心，我们可以通过font-spec强迫Emacs搜索。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-fontset-font t 'thai <span style="color: #A8289C;">(</span>font-spec <span style="color: #A8289C;">:script</span> 'thai<span style="color: #A8289C;">)</span> nil 'append<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
你可以把随便什么放在 <code>font-spec</code> 的调用里，然后Emacs就会搜索字体，找出合适的。你也完全可以用 <code>font-spec</code> 指定一个字体。
</p>

<p>
所以现在我们完整的泰语配置看起来像这样：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-fontset-font t 'thai <span style="color: #489446;">"Noto Sans Thai"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'thai <span style="color: #489446;">"Leelawadee UI"</span> nil 'append<span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'thai <span style="color: #A8289C;">(</span>font-spec <span style="color: #A8289C;">:script</span> 'thai<span style="color: #A8289C;">)</span> nil 'append<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
注意你只能在某各字符区间已经有了字体配置的时候后附（append）或前置（prepend）字体，这也符合常理。一开始我以为我是往一个大的字体列表后面添加我的后备字体，而不是往一系列字体列表中的一个后面添加字体。这导致我无法理解为啥配置没有效果。
</p>
</div>
</div>

<div id="outline-container-%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%AA%E5%AD%97%E4%BD%93%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85" class="outline-2">
<h2 id="%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%AA%E5%AD%97%E4%BD%93%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85"><span class="section-number-2">5</span> 如何检查一个字体是否已经安装</h2>
<div class="outline-text-2" id="text-5">
<p>
与其依赖后备字体，你可以在使用一个字体之前检查这个字体是否已经安装。过程简单直接，因为所有已安装的字体都在 <code>font-family-list</code> <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> 里，你可以直接查看列表：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>member <span style="color: #489446;">"Noto Sans"</span> <span style="color: #A8289C;">(</span>font-family-list<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-%E9%99%84%E5%BD%95" class="outline-2">
<h2 id="%E9%99%84%E5%BD%95"><span class="section-number-2">6</span> 附录</h2>
<div class="outline-text-2" id="text-6">
<p>
我为一些语言写了后备到Noto字体的基本配置，试图提高Emacs的Hello file（ <code>C-h h</code> ）的速度。因为这些字体本身没有后备字体，如果我在没有这些字体的机器上用这个配置，那么我只会看见一地方块。但是这个估计能给你的配置一个起点。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>set-face-attribute 'default nil <span style="color: #A8289C;">:font</span> <span style="color: #489446;">"Droid Sans Mono"</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Latin</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'latin <span style="color: #489446;">"Noto Sans"</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">East Asia: &#20320;&#22909;, &#26089;&#26216;, &#12371;&#12435;&#12395;&#12385;&#12399;, &#50504;&#45397;&#54616;&#49464;&#50836;</span>
<span style="color: #9a9ea2;">;;</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Make sure you use the right font. See</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">https://www.google.com/get/noto/help/cjk/.</span>
<span style="color: #9a9ea2;">;;</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">This font requires "Regular". Other Noto fonts dont.</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">&#175;\_(&#12484;)_/&#175;</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'han <span style="color: #489446;">"Noto Sans CJK SC Regular"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'kana <span style="color: #489446;">"Noto Sans CJK JP Regular"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'hangul <span style="color: #489446;">"Noto Sans CJK KR Regular"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'cjk-misc <span style="color: #489446;">"Noto Sans CJK KR Regular"</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">South East Asia: &#6023;&#6086;&#6042;&#6070;&#6036;&#6047;&#6077;&#6042;, &#3754;&#3760;&#3738;&#3762;&#3725;&#3732;&#3765;, &#4121;&#4100;&#4154;&#4153;&#4098;&#4124;&#4140;&#4117;&#4139;, &#3626;&#3623;&#3633;&#3626;&#3604;&#3637;&#3588;&#3619;&#3633;&#3610;</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'khmer <span style="color: #489446;">"Noto Sans Khmer"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'lao <span style="color: #489446;">"Noto Sans Lao"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'burmese <span style="color: #489446;">"Noto Sans Myanmar"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'thai <span style="color: #489446;">"Noto Sans Thai"</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Africa: &#4640;&#4619;&#4637;</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'ethiopic <span style="color: #489446;">"Noto Sans Ethiopic"</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Middle/Near East: &#1513;&#1500;&#1493;&#1501;, &#1575;&#1604;&#1587;&#1617;&#1604;&#1575;&#1605; &#1593;&#1604;&#1610;&#1603;&#1605;</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'hebrew <span style="color: #489446;">"Noto Sans Hebrew"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'arabic <span style="color: #489446;">"Noto Sans Arabic"</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;;  </span><span style="color: #9a9ea2;">South Asia: &#2728;&#2734;&#2744;&#2765;&#2724;&#2759;, &#2344;&#2350;&#2360;&#2381;&#2340;&#2375;, &#3240;&#3246;&#3256;&#3277;&#3221;&#3262;&#3248;, &#3368;&#3374;&#3384;&#3405;&#3349;&#3390;&#3376;&#3330;, &#2870;&#2881;&#2851;&#2879;&#2860;&#2887;,</span>
<span style="color: #9a9ea2;">;;              </span><span style="color: #9a9ea2;">&#3462;&#3514;&#3540;&#3510;&#3549;&#3520;&#3505;&#3530;, &#2997;&#2979;&#2965;&#3021;&#2965;&#2990;&#3021;, &#3112;&#3118;&#3128;&#3149;&#3093;&#3134;&#3120;&#3074;, &#3926;&#3904;&#4018;&#3851;&#3940;&#3954;&#3942;&#3851;&#3926;&#3921;&#3962;&#3851;&#3939;&#3962;&#3906;&#3942;&#3854;</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'gujarati <span style="color: #489446;">"Noto Sans Gujarati"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'devanagari <span style="color: #489446;">"Noto Sans Devanagari"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'kannada <span style="color: #489446;">"Noto Sans Kannada"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'malayalam <span style="color: #489446;">"Noto Sans Malayalam"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'oriya <span style="color: #489446;">"Noto Sans Oriya"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'sinhala <span style="color: #489446;">"Noto Sans Sinhala"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'tamil <span style="color: #489446;">"Noto Sans Tamil"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'telugu <span style="color: #489446;">"Noto Sans Telugu"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>set-fontset-font t 'tibetan <span style="color: #489446;">"Noto Sans Tibetan"</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Emacs默认的后备字体是<a href="http://users.teilar.gr/~g1951d/">Symbola</a>，所以最好安装上这个以免Emacs遍历所有字体
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
如需更多信息，查看<a href="http://ergoemacs.org/emacs/emacs_list_and_set_font.html">Xah Lee的字体配置页</a>
</p></div></div>


</div>
</div>]]></description>
<pubDate>Sun, 31 Mar 2019 21:27:00 -0400</pubDate>
</item>
<item>
<title>Rime输入法完全指南</title>
<link>https://archive.casouri.cat/note/2019/rime%E8%BE%93%E5%85%A5%E6%B3%95%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97</link>
<guid>https://archive.casouri.cat/note/2019/rime%E8%BE%93%E5%85%A5%E6%B3%95%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#%E5%AE%89%E8%A3%85">1. 安装</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE">2. 配置</a></li>
</ul>
</div>
</div>
<p>
输入法对我来说是很重要的一个工具，它好用与否密切关系到我平时的效率和心情。Mac自带的输入法虽然勉强可用，平时却总会出现各种小问题。听说了Rime输入法非常牛逼，我就打算切换到这个输入法。
</p>

<p>
Rime不愧无数博客的吹嘘，确实强大，然而入门配置有个问题：教程难懂。倒不是说作者没有用心写教程。问题在于Rime细节挺多，作者又把教程写得颇为琐碎，搞得理解起来有点难度。就连相关的博客也弯弯绕绕不好看懂。
</p>

<p>
我在这里记录安装和配置Rime输入法的过程，希望能帮到别人。
</p>

<div id="outline-container-%E5%AE%89%E8%A3%85" class="outline-2">
<h2 id="%E5%AE%89%E8%A3%85"><span class="section-number-2">1</span> 安装</h2>
<div class="outline-text-2" id="text-1">
<p>
这里是<a href="https://rime.im">官网链接</a>，直接下载安装就得。
</p>
</div>
</div>

<div id="outline-container-%E9%85%8D%E7%BD%AE" class="outline-2">
<h2 id="%E9%85%8D%E7%BD%AE"><span class="section-number-2">2</span> 配置</h2>
<div class="outline-text-2" id="text-2">
<p>
Mac配置文件都在 <code>~/Library/Rime/</code> 下。格式是yaml（我最讨厌的格式）。Rime的配置文件挺复杂的，与其说是配置，更像是一个个脚本。目录下有这么些个文件：
</p>
<dl class="org-dl">
<dt>default.yaml</dt><dd>主要的全局配置文件，包括快捷键，符号转义之类的。比如 <code>Ctrl+`</code> 打开菜单， <code>Ctrl+n</code> 下一行，等等。</dd>
<dt>xxx.schema.yaml</dt><dd>这些是各个输入法的配置文件，相当于输入法的“源码”。比如明月拼音的配置文件叫 <code>luna_pinyin.schema.yaml</code> 。</dd>
<dt>squirrel.yaml</dt><dd>前端配置，因为Mac前端叫squirrel，windows和linux上的名字还不一样。这里的配置就是浮窗颜色啦，边框啦，主题啦，这些。</dd>
<dt>xxx.dict.yaml</dt><dd>这是词库文件。</dd>
</dl>

<p>
（<a href="https://github.com/rime/home/wiki/RimeWithSchemata#rime-%E4%B8%AD%E7%9A%84%E6%95%B8%E6%93%9A%E6%96%87%E4%BB%B6%E5%88%86%E4%BD%88%E5%8F%8A%E4%BD%9C%E7%94%A8">官方解释：Rime 中的數據文件分佈及作用</a>）
</p>

<p>
上面这些文件都是不推荐用户自己改的，如果你想对它们做修改（要不然配置什么），就要在那个目录下创建一个custom文件，比如 <code>default.custom.yaml</code>​。也就是说，格式是 <code>.yaml</code> 前面加一个 <code>.custom</code> 。
</p>

<p>
我的配置文件：
</p>
<ul class="org-ul">
<li><code>default.custom.yaml</code></li>
<li><code>squirrel.custom.yaml</code></li>
</ul>

<p>
接下来我会把这些文件都介绍一遍。我建议看看自己计算机上实际的文件，这样会有更深的理解。
</p>
</div>

<div id="outline-container-%3Ccode%3Edefault.yaml%3C/code%3E-%E5%92%8C-%3Ccode%3Edefault.custom.yaml%3C/code%3E-%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" class="outline-3">
<h3 id="%3Ccode%3Edefault.yaml%3C/code%3E-%E5%92%8C-%3Ccode%3Edefault.custom.yaml%3C/code%3E-%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90"><span class="section-number-3">2.1</span> <code>default.yaml</code> 和 <code>default.custom.yaml</code> 配置例子</h3>
<div class="outline-text-3" id="text-2-1">
<p>
我们拿 <code>defualt.yaml</code> 作为例子，添加一些自己的配置。
</p>

<p>
官方教程在<a href="https://github.com/rime/home/wiki/CustomizationGuide">这里</a>，可以参考对照。
</p>

<p>
先说一下YAML的格式。它比较简单，像python一样靠缩进识别数据结构：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">key</span>:
  <span style="color: #A8289C;">key1</span>: value1
  <span style="color: #A8289C;">key2</span>: value2
  <span style="color: #A8289C;">key3</span>:
    - item1
    - item2
</pre>
</div>
<p>
翻译成JSON就是
</p>
<div class="org-src-container">
<pre class="src src-json">{"key": {"key1": "value1", "key2": "value2", "key3": ["iterm1", "item2"]}}
</pre>
</div>

<p>
我想设置每页候选项数为9。 首先=default.yaml= 里可以看到默认值是5:
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">menu</span>:
  <span style="color: #A8289C;">page_size</span>: 5
</pre>
</div>

<p>
在 <code>default.custom.yaml</code> 里覆盖这个设置：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #A8289C;">menu/page_size</span>: 9
</pre>
</div>

<p>
可以看到，格式是：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #A8289C;">layer1/layer2</span>: &#35206;&#30422;&#20540;
</pre>
</div>

<p>
（<a href="https://github.com/rime/home/wiki/CustomizationGuide">官方完全格式</a>）
</p>

<p>
改完以后按 <code>Ctrl+Option+`</code> “重新部署”，现在是不是9个候选项了？
<a href="https://github.com/rime/home/wiki/CustomizationGuide">官方指南</a>里有不少例子，配合 <code>default.yaml</code> 食用更佳。
</p>

<p>
说一个容易掉进去的误区：
</p>

<p>
如果 <code>default.yaml</code> 里是这样：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">key1</span>:
  <span style="color: #A8289C;">key2</span>: value1
  <span style="color: #A8289C;">key3</span>: value2
</pre>
</div>
<p>
你这么配置会怎么样？
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #A8289C;">key1</span>:
    <span style="color: #A8289C;">key2</span>: value0
</pre>
</div>
<p>
结果是key1下只剩下你配置的key2，因为你覆盖了整个 <code>key1</code> ：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">&#23454;&#38469;&#25928;&#26524;</span>
<span style="color: #A8289C;">key1</span>:
  <span style="color: #A8289C;">key2</span>: value0
</pre>
</div>
<p>
另一方面，普通的写法
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #A8289C;">key1/key2</span>: value0
</pre>
</div>
<p>
只会覆盖 <code>key1/key2</code> ，因此对 <code>key3</code> 没有影响：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">&#23454;&#38469;&#25928;&#26524;</span>
<span style="color: #A8289C;">key1</span>:
  <span style="color: #A8289C;">key2</span>: value0
  <span style="color: #A8289C;">key3</span>: value2
</pre>
</div>
</div>
</div>

<div id="outline-container-%3Ccode%3Esquirrel.yaml%3C/code%3E-%E5%92%8C-%3Ccode%3Esquirrel.custom.yaml%3C/code%3E" class="outline-3">
<h3 id="%3Ccode%3Esquirrel.yaml%3C/code%3E-%E5%92%8C-%3Ccode%3Esquirrel.custom.yaml%3C/code%3E"><span class="section-number-3">2.2</span> <code>squirrel.yaml</code> 和 <code>squirrel.custom.yaml</code></h3>
<div class="outline-text-3" id="text-2-2">
<p>
这个其实跟 <code>default.yaml</code> 一样，参考 <code>squirrel.yaml</code> 配置
<code>squirrel.custom.yaml</code> 即可。
</p>

<p>
我用的是ink主题，我很喜欢：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #A8289C;">style/color_scheme</span>: ink
  <span style="color: #A8289C;">style/corner_radius</span>: 2
</pre>
</div>

<p>
还可以这样：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">&#21482;&#20445;&#30041;&#37197;&#33394;&#30340;&#30828;&#26680;&#20027;&#39064;</span>
  <span style="color: #A8289C;">style</span>:
    <span style="color: #A8289C;">color_scheme</span>: ink
</pre>
</div>
<p>
这样整个style层会被清空，只剩一个 <code>color_scheme</code> 的配置，也挺有意思的。
</p>
</div>
</div>

<div id="outline-container-%E8%BE%93%E5%85%A5%E6%B3%95%E9%85%8D%E7%BD%AE" class="outline-3">
<h3 id="%E8%BE%93%E5%85%A5%E6%B3%95%E9%85%8D%E7%BD%AE"><span class="section-number-3">2.3</span> 输入法配置</h3>
<div class="outline-text-3" id="text-2-3">
<p>
我从<a href="https://www.jianshu.com/p/b6a13061c74f">这里</a>抄了一个搜狗双拼的配置，挺好用的，感谢作者鶴。我把这个保存到
<code>sougou_shuangpin.schema.yaml</code> 。这个输入法就是把双拼字符翻译成全拼然后用明月拼音的词库，可以从这项配置看出来
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">translator</span>:
  <span style="color: #A8289C;">dictionary</span>: luna_pinyin
</pre>
</div>

<p>
注意 <code>schema_id: sougou_shuangpin</code> 这一项， <code>schema_id</code> 就是这个输入法的唯一识别id。具体怎么把这个输入法加入可选列表，官方指南里应该有写。
</p>

<p>
如果你想自己创造一个输入法，看<a href="https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md">这个文档</a>。
</p>
</div>
</div>

<div id="outline-container-%E6%89%A9%E5%85%85%E8%AF%8D%E5%BA%93" class="outline-3">
<h3 id="%E6%89%A9%E5%85%85%E8%AF%8D%E5%BA%93"><span class="section-number-3">2.4</span> 扩充词库</h3>
<div class="outline-text-3" id="text-2-4">
<p>
我从<a href="https://github.com/rime-aca/dictionaries">这里</a>下载了一些扩充词库。按照REAME的指示把词库文件（那些 <code>xxx.dic.yaml</code> ）扔到 <code>~/Library/Rime/</code> 里以后，怎么让我的输入法使用这些词库呢？
</p>

<p>
拿我用的搜狗双拼输入法为例子。新建 <code>sougou_shuangpin.custom.yaml</code> 配置。（我也可以直接在 <code>sougou_shuangpin.yaml</code> 里面改，但是为了保持配置整洁和模块化，还是用custom文件吧。）
</p>

<p>
在里面加入：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">&#36617;&#20837;&#26393;&#26376;&#25340;&#38899;&#25844;&#20805;&#35422;&#24235;</span>
  <span style="color: #489446;">"translator/dictionary"</span>: luna_pinyin.extended
</pre>
</div>
<p>
即可。
</p>

<p>
现在重新部署一下，然后验证一下扩展词库已经载入：
</p>
<blockquote>
<p>
輸入「一介書生」（驗證擴充詞庫之基本詞庫）、「一丈紅」（驗證擴充詞庫之漢語大詞典詞彙）、「疑是地上霜」（驗證擴充詞庫之詩詞詞庫）、輸入「哆啦A夢」（驗證擴充詞庫之西文詞庫，此子詞庫爲朙月拼音系列方案專有，雙拼方案不推薦使用）。
</p>
</blockquote>

<p>
作者还说明了怎么增加自己的词库，<a href="https://github.com/rime-aca/dictionaries#%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A9%9E%E5%BA%AB">文档链接</a>。<a href="https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md#dictyaml-%E8%A9%B3%E8%A7%A3">这里</a>有词库文件的格式文档。
</p>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-04 Mon 00:19&gt; </span></span> 更新：</b>
</p>

<p>
<a href="http://tieba.baidu.com/p/4125987751">这里</a>有一个更大的扩展词库。
</p>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2020-03-12 Thu 16:26&gt; </span></span> 更新：</b>
</p>

<p>
之前那个链接挂了，这里是新的<a href="https://github.com/xiaoTaoist/rime-dict">链接</a>，感谢Nasy。
</p>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2020-08-01 Sat 15:28&gt; </span></span> 更新：</b>
</p>

<p>
现在又有了个“肥猫百万维基词库”， 在<a href="https://github.com/outloudvi/fcitx5-pinyin-moegirl">这里</a>。从Release里下载 <code>moegirl.dict.yaml</code>​，扔到Rime文件夹里，把前面说的 <code>sougou_shuangpin.yaml</code> 改成这样：
</p>
<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #A8289C;">patch</span>:
  <span style="color: #489446;">"translator/dictionary"</span>: zhwiki
</pre>
</div>
</div>
</div>
</div>
]]></description>
<pubDate>Sat, 02 Mar 2019 00:53:00 -0500</pubDate>
</item>
<item>
<title>Mathematics Penmanship</title>
<link>https://archive.casouri.cat/note/2018/mathematics-penmanship</link>
<guid>https://archive.casouri.cat/note/2018/mathematics-penmanship</guid>
<description><![CDATA[<p>
My Calculus professor has a really nice white board writing, his letters and symbols are big and distinctive. Really nice to read overall <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. If you look at the examples, you will find that they are not necessarily beautiful, but comfortable to read.
</p>

<p>
After taking his class I try to copy his writing on to paper. It is successful except one issue: when he was writing on the board, he took his time, but sometimes when I need to spill out equations line after line on a class, the quality goes down quickly. I don't really have a solution other than to only write in the fast way when I have to, e.g., when I try to catch up.
</p>

<p>
Some comparison between “slow and nice” and “fast and raw”:
</p>


<div id="org67cf313" class="figure">
<p><img src="/note/2018/mathematics-penmanship/writing.png" alt="writing.png" />
</p>
</div>

<p>
The rule of thumb that I come up with:
</p>
<ol class="org-ol">
<li>make letters big and clear</li>
<li>leave a good among of space between everything</li>
<li>prefer print over cursive</li>
<li>take your time (when possible)</li>
</ol>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
His board writings, notice his elaborate “a”, I don't do that.
</p>


<div id="orgb4c7c2f" class="figure">
<p><img src="/note/2018/mathematics-penmanship/board-0.JPG" alt="board-0.JPG" />
</p>
</div>


<div id="org337f780" class="figure">
<p><img src="/note/2018/mathematics-penmanship/board-1.JPG" alt="board-1.JPG" />
</p>
</div>


<div id="orga2a5c20" class="figure">
<p><img src="/note/2018/mathematics-penmanship/board-2.JPG" alt="board-2.JPG" />
</p>
</div>


<div id="orgd54df81" class="figure">
<p><img src="/note/2018/mathematics-penmanship/board-3.JPG" alt="board-3.JPG" />
</p>
</div>


<div id="orge2ad309" class="figure">
<p><img src="/note/2018/mathematics-penmanship/board-4.JPG" alt="board-4.JPG" />
</p>
</div>


<div id="orgc2c1f8e" class="figure">
<p><img src="/note/2018/mathematics-penmanship/board-5.JPG" alt="board-5.JPG" />
</p>
</div>


<div id="org489cbbe" class="figure">
<p><img src="/note/2018/mathematics-penmanship/board-6.JPG" alt="board-6.JPG" />
</p>
</div></div></div>


</div>
</div>]]></description>
<pubDate>Sun, 09 Dec 2018 18:55:00 -0500</pubDate>
</item>
<item>
<title>Prettify Google Docs</title>
<link>https://archive.casouri.cat/note/2018/prettify-google-docs</link>
<guid>https://archive.casouri.cat/note/2018/prettify-google-docs</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Fonts">1. Fonts</a></li>
<li><a href="#Line-spacing">2. Line spacing</a></li>
<li><a href="#Page-margins">3. Page margins</a></li>
</ul>
</div>
</div>
<p>
If you use Google Docs heavily, it is worth it to configure a nice (and simple) set of defaults that makes the document looks nice.
</p>

<div id="outline-container-Fonts" class="outline-2">
<h2 id="Fonts"><span class="section-number-2">1</span> Fonts</h2>
<div class="outline-text-2" id="text-1">
<p>
Use EB Garamond for body text, and Montserrat for headings 1 to 6.
</p>
</div>
</div>

<div id="outline-container-Line-spacing" class="outline-2">
<h2 id="Line-spacing"><span class="section-number-2">2</span> Line spacing</h2>
<div class="outline-text-2" id="text-2">
<p>
Use 1.15.
</p>
</div>
</div>

<div id="outline-container-Page-margins" class="outline-2">
<h2 id="Page-margins"><span class="section-number-2">3</span> Page margins</h2>
<div class="outline-text-2" id="text-3">
<p>
Go to File — Page setup, change left and right margins to 2 inches and set to default. You can also use 1 inch margins and use two columns: go to Format — Columns and set to double columns. The point is to reduce the line length.
</p>

<p>
That's all.
</p>
</div>
</div>
]]></description>
<pubDate>Wed, 05 Dec 2018 15:20:00 -0500</pubDate>
</item>
<item>
<title>科学上网</title>
<link>https://archive.casouri.cat/note/2018/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91</link>
<guid>https://archive.casouri.cat/note/2018/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#%E5%AE%89%E8%A3%85%E4%B9%8B%E5%89%8D">1. 安装之前</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE">2. 配置</a></li>
<li><a href="#%E8%BF%90%E8%A1%8C">3. 运行</a></li>
</ul>
</div>
</div>
<p>
一些笔记
</p>

<hr />

<p>
软件：<a href="https://github.com/v2ray">V2ray</a>
</p>

<p>
教程资源：<a href="https://toutyrater.github.io">V2Ray 配置指南</a>，<a href="https://guide.v2fly.org">白话文教程</a>。作者文笔不错，解释清晰易懂。
</p>

<p>
<a href="https://www.v2ray.com/developer/protocols/vmess.html">☞ 官方文档</a>
</p>

<div id="outline-container-%E5%AE%89%E8%A3%85%E4%B9%8B%E5%89%8D" class="outline-2">
<h2 id="%E5%AE%89%E8%A3%85%E4%B9%8B%E5%89%8D"><span class="section-number-2">1</span> 安装之前</h2>
<div class="outline-text-2" id="text-%E5%AE%89%E8%A3%85%E4%B9%8B%E5%89%8D">
</div>
<div id="outline-container-%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4" class="outline-3">
<h3 id="%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4"><span class="section-number-3">1.1</span> 查询时间</h3>
<div class="outline-text-3" id="text-1-1">
<p>
V2ray要求客户端与服务端时间相差2分钟以内（自动转化时区）。
</p>
<div class="org-src-container">
<pre class="src src-shell">date -R
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-%E9%85%8D%E7%BD%AE" class="outline-2">
<h2 id="%E9%85%8D%E7%BD%AE"><span class="section-number-2">2</span> 配置</h2>
<div class="outline-text-2" id="text-2">
<p>
从配置指南和官方文档中复制而来，有一些修改。
</p>
</div>
<div id="outline-container-%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE" class="outline-3">
<h3 id="%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE"><span class="section-number-3">2.1</span> 客户端配置</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">
<pre class="src src-javascript"><span style="color: #2C79F5;">{</span>
  <span style="color: #489446;">"inbounds"</span>: <span style="color: #A8289C;">[</span>
    <span style="color: #489446;">{</span>
      <span style="color: #489446;">"port"</span>: 1080, <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#23458;&#25143;&#31471;&#30340;&#31471;&#21475;</span>
      <span style="color: #489446;">"protocol"</span>: <span style="color: #489446;">"socks"</span>, <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#20837;&#21475;&#21327;&#35758;&#20026; SOCKS 5</span>
      <span style="color: #489446;">"domainOverride"</span>: <span style="color: #DA7A48;">[</span><span style="color: #489446;">"tls"</span>,<span style="color: #489446;">"http"</span><span style="color: #DA7A48;">]</span>,
      <span style="color: #489446;">"settings"</span>: <span style="color: #DA7A48;">{</span>
        <span style="color: #9a9ea2;">//</span><span style="color: #9a9ea2;">socks&#30340;&#35748;&#35777;&#35774;&#32622;&#65292;noauth &#20195;&#34920;&#19981;&#35748;&#35777;&#65292;&#30001;&#20110; socks &#36890;&#24120;&#22312;&#23458;&#25143;&#31471;&#20351;&#29992;&#65292;</span>
        <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#25152;&#20197;&#36825;&#37324;&#19981;&#35748;&#35777;</span>
        <span style="color: #489446;">"auth"</span>: <span style="color: #489446;">"noauth"</span>  
      <span style="color: #DA7A48;">}</span>
    <span style="color: #489446;">}</span>
  <span style="color: #A8289C;">]</span>,
  <span style="color: #489446;">"outbounds"</span>: <span style="color: #A8289C;">[</span>
    <span style="color: #489446;">{</span>
      <span style="color: #489446;">"protocol"</span>: <span style="color: #489446;">"vmess"</span>, <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#20986;&#21475;&#21327;&#35758;</span>
      <span style="color: #489446;">"settings"</span>: <span style="color: #DA7A48;">{</span>
        <span style="color: #489446;">"vnext"</span>: <span style="color: #A8289C;">[</span>
          <span style="color: #987816;">{</span>
            <span style="color: #489446;">"address"</span>: <span style="color: #489446;">"serveraddr.com"</span>, <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#26381;&#21153;&#22120;&#22320;&#22336;&#65292;&#19968;&#33324;&#20026;IP&#22320;&#22336;</span>
            <span style="color: #489446;">"port"</span>: 16823,  <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#26381;&#21153;&#22120;&#31471;&#21475;</span>
            <span style="color: #489446;">"users"</span>: <span style="color: #2C79F5;">[</span>
              <span style="color: #80a880;">{</span>
                <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#29992;&#25143; ID&#65292;&#24517;&#39035;&#19982;&#26381;&#21153;&#22120;&#31471;&#37197;&#32622;&#30456;&#21516;</span>
                <span style="color: #489446;">"id"</span>: <span style="color: #489446;">"b831381d-6324-4d53-ad4f-8cda48b30811"</span>,
                <span style="color: #489446;">"alterId"</span>: 64 <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#27492;&#22788;&#30340;&#20540;&#20063;&#24212;&#24403;&#19982;&#26381;&#21153;&#22120;&#30456;&#21516;</span>
              <span style="color: #80a880;">}</span>
            <span style="color: #2C79F5;">]</span>
          <span style="color: #987816;">}</span>
        <span style="color: #A8289C;">]</span>
      <span style="color: #DA7A48;">}</span>
    <span style="color: #489446;">}</span>
  <span style="color: #A8289C;">]</span>
<span style="color: #2C79F5;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-UUID" class="outline-3">
<h3 id="UUID"><span class="section-number-3">2.2</span> UUID</h3>
<div class="outline-text-3" id="text-2-2">
<p>
生成uuid。uuid承担类似密码的功能。
</p>

<div class="org-src-container">
<pre class="src src-shell">/proc/sys/kernel/random/uuid
</pre>
</div>
</div>
</div>

<div id="outline-container-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE" class="outline-3">
<h3 id="%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE"><span class="section-number-3">2.3</span> 服务器配置</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">
<pre class="src src-javascript"><span style="color: #2C79F5;">{</span>
  <span style="color: #489446;">"inbounds"</span>: <span style="color: #A8289C;">[</span>
    <span style="color: #489446;">{</span>
      <span style="color: #489446;">"port"</span>: 16823, <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#26381;&#21153;&#22120;&#30417;&#21548;&#31471;&#21475;</span>
      <span style="color: #489446;">"protocol"</span>: <span style="color: #489446;">"vmess"</span>,    <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#20027;&#20256;&#20837;&#21327;&#35758;</span>
      <span style="color: #489446;">"settings"</span>: <span style="color: #DA7A48;">{</span>
        <span style="color: #489446;">"clients"</span>: <span style="color: #A8289C;">[</span>
          <span style="color: #987816;">{</span>
            <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#29992;&#25143; ID&#65292;&#23458;&#25143;&#31471;&#19982;&#26381;&#21153;&#22120;&#24517;&#39035;&#30456;&#21516;</span>
            <span style="color: #489446;">"id"</span>: <span style="color: #489446;">"b831381d-6324-4d53-ad4f-8cda48b30811"</span>,
            <span style="color: #489446;">"alterId"</span>: 64
          <span style="color: #987816;">}</span>
        <span style="color: #A8289C;">]</span>
      <span style="color: #DA7A48;">}</span>
    <span style="color: #489446;">}</span>
  <span style="color: #A8289C;">]</span>,
  <span style="color: #489446;">"outbounds"</span>: <span style="color: #A8289C;">[</span>
    <span style="color: #489446;">{</span>
      <span style="color: #489446;">"protocol"</span>: <span style="color: #489446;">"freedom"</span>,  <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#20027;&#20256;&#20986;&#21327;&#35758;</span>
      <span style="color: #489446;">"settings"</span>: <span style="color: #DA7A48;">{}</span>
    <span style="color: #489446;">}</span>
  <span style="color: #A8289C;">]</span>
<span style="color: #2C79F5;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE" class="outline-3">
<h3 id="%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE"><span class="section-number-3">2.4</span> 日志配置</h3>
<div class="outline-text-3" id="text-2-4">
<div class="org-src-container">
<pre class="src src-javascript"><span style="color: #2C79F5;">{</span>
  <span style="color: #489446;">"log"</span>: <span style="color: #A8289C;">{</span>
    <span style="color: #489446;">"loglevel"</span>: <span style="color: #489446;">"warning"</span>, <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#26085;&#24535;&#32423;&#21035;</span>
    <span style="color: #489446;">"access"</span>: <span style="color: #489446;">"D:\\v2ray\\access.log"</span>,  <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">&#36825;&#26159; Windows &#31995;&#32479;&#30340;&#36335;&#24452;</span>
    <span style="color: #489446;">"error"</span>: <span style="color: #489446;">"D:\\v2ray\\error.log"</span>
  <span style="color: #A8289C;">}</span>,
<span style="color: #2C79F5;">}</span>
</pre>
</div>

<p>
引用自配置指南：
</p>

<blockquote>
<p>
loglevel：日志级别，分别有5个，本例中设定的是 warning
</p>

<p>
debug：最详细的日志信息，专用于软件调试
</p>

<p>
info：比较详细的日志信息，可以看到 V2Ray 详细的连接信息
</p>

<p>
warning：警告信息。轻微的问题信息，经我观察 warning 级别的信息大多是网络错误。推荐使用 warning
</p>

<p>
error：错误信息。比较严重的错误信息。当出现 error 时该问题足以影响 V2Ray 的正常运行
</p>

<p>
none：空。不记录任何信息
</p>

<p>
access：将访问的记录保存到文件中，这个选项的值是要保存到的文件的路径
</p>

<p>
error：将错误的记录保存到文件中，这个选项的值是要保存到的文件的路径
</p>

<p>
error、access 字段留空，并且在手动执行 V2Ray 时，V2Ray 会将日志输出在 stdout 即命令行中（terminal、cmd 等），便于排错
</p>
</blockquote>
</div>
</div>
</div>

<div id="outline-container-%E8%BF%90%E8%A1%8C" class="outline-2">
<h2 id="%E8%BF%90%E8%A1%8C"><span class="section-number-2">3</span> 运行</h2>
<div class="outline-text-2" id="text-%E8%BF%90%E8%A1%8C">
</div>
<div id="outline-container-Arch-%E6%9C%8D%E5%8A%A1%E5%99%A8" class="outline-3">
<h3 id="Arch-%E6%9C%8D%E5%8A%A1%E5%99%A8"><span class="section-number-3">3.1</span> Arch 服务器</h3>
<div class="outline-text-3" id="text-3-1">
<p>
<code>systemd</code> 默认的配置文件地址在 <code>/etc/v2ray/config.json</code> 。 软链接或者直接修改文件。
</p>

<p>
开启/运行用 <code>systemd</code> 就好：
</p>
<div class="org-src-container">
<pre class="src src-shell">systemctl start/stop/restart v2ray
systemctl status v2ray
</pre>
</div>
</div>
</div>

<div id="outline-container-Mac%E5%AE%A2%E6%88%B7%E7%AB%AF" class="outline-3">
<h3 id="Mac%E5%AE%A2%E6%88%B7%E7%AB%AF"><span class="section-number-3">3.2</span> Mac客户端</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Homebrew的v2ray叫v2ray-core。安装以后默认的配置文件地址在 <code>/usr/local/etc/v2ray/config.json</code> ，同样，软链接或者直接替换文件都可以。因为配置文件在默认地址，启动只需要
</p>
<div class="org-src-container">
<pre class="src src-shell">brew services start v2ray-core
</pre>
</div>
<p>
并且之后会开机自动运行。
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2020-05-09 Sat&gt; </span></span> 更新：用macports的安装方法：
</p>
<div class="org-src-container">
<pre class="src src-shell">sudo port install v2ray
sudo port load v2ray
</pre>
</div>

<p>
打开System Preference - Network - Location （顶部） - Edit Locations，添加一个VPN的location。这样之后可以在顶部状态栏快速切换VPN和直连（最左Apple图标 - Locaion）。
</p>

<p>
在新的Location里打开Advanced - Proxies - SOCKS5 Proxy - SOCKS5 Proxy Server，按Mac客户端的配置文件填，之前的例子里是 <code>127.0.0.1:16823</code> 。IP地址 <code>127.0.0.1</code> 一般不会变，改端口号就可以。
</p>

<p>
修改完成后保存。启动客户端并把Location改为新的就可以科学上网了。
</p>
</div>
</div>

<div id="outline-container-iOS%E5%AE%A2%E6%88%B7%E7%AB%AF" class="outline-3">
<h3 id="iOS%E5%AE%A2%E6%88%B7%E7%AB%AF"><span class="section-number-3">3.3</span> iOS客户端</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Kitsunebi Lite，手动配置地址，端口和UUID，其他保持默认即可。
</p>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2019-05-19 Sun&gt; </span></span> 更新</b> ：Kitsunebi Lite下架又上了一个$5的Kitsunebi，太坑爹，现在建议用Shadowrocket，图标是小火箭。
</p>
</div>
</div>

<div id="outline-container-%E5%AE%89%E5%8D%93%E5%AE%A2%E6%88%B7%E7%AB%AF" class="outline-3">
<h3 id="%E5%AE%89%E5%8D%93%E5%AE%A2%E6%88%B7%E7%AB%AF"><span class="section-number-3">3.4</span> 安卓客户端</h3>
<div class="outline-text-3" id="text-3-4">
<p>
<a href="https://github.com/2dust/v2rayNG/releases">V2rayNG</a>，配置方法和iOS一样。
</p>

<p>
;; Local Variables: ;; word-wrap: nil ;; End:
</p>
</div>
</div>
</div>
]]></description>
<pubDate>Sat, 01 Dec 2018 19:28:00 -0500</pubDate>
</item>
<item>
<title>Blog in Org Mode, Revisited</title>
<link>https://archive.casouri.cat/note/2018/blog-in-org-mode-revisited</link>
<guid>https://archive.casouri.cat/note/2018/blog-in-org-mode-revisited</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Why-no-frameworks?">1. Why no frameworks?</a></li>
<li><a href="#Style">2. Style</a></li>
<li><a href="#Implementation">3. Implementation</a></li>
</ul>
</div>
</div>
<p>
I have an <a href="file:///note/2018/blog-with-only-org-mode/index.html">earlier post</a> about the same subject. Since then, a lot of things have changed, so I decide to revisit the topic and talk about my improved work flow. This post is a super set of the earlier one, so there is no need to check that out.
</p>

<p>
The source file of my blog at the time writing can be found <a href="https://github.com/casouri/casouri.github.io/tree/a709fe637823ea317bd127569220e945c5abfdc5/note">here</a>.
</p>

<div id="outline-container-Why-no-frameworks?" class="outline-2">
<h2 id="Why-no-frameworks?"><span class="section-number-2">1</span> Why no frameworks?</h2>
<div class="outline-text-2" id="text-1">
<p>
Personally, I don't like those static site generates, e.g. Hexo, Pelican, Hugo, Jekyll. Each one of them requires you to learn the framework and set it up correctly. It feels like too much work and complexity for a simple static site.
</p>

<p>
On the other hand, when directly exporting HTML files from Org files, you have the full control of the whole process. And customizing is often trivial.
</p>

<p>
I'll demonstrate how I build my blog with Org Mode and CSS, and let you decide whether to do the same.
</p>
</div>
</div>

<div id="outline-container-Style" class="outline-2">
<h2 id="Style"><span class="section-number-2">2</span> Style</h2>
<div class="outline-text-2" id="text-2">
<p>
I want my blog to be in the old school style like 90's hypertext pages. Some example includes <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html">Emacs Lisp Reference Manual</a>, <a href="https://www.w3.org/Provider/Style/">Style Guide for online hypertext</a>, <a href="https://web.stanford.edu/class/cs166/">CS166 of Stanford</a>. The simplicity, elegance and plain coolness (what's that?) really attract me, and I hope you, too.
</p>

<p>
Don't get me wrong, modern web pages like <a href="https://www.apple.com">apple.com</a> are beautiful, too. But they are complicated and hard to maintain. I don't feel like spending all the time to make a beautiful animated site while the time could be used to generate better contents. Plus I prefer the "old style" anyway.
</p>
</div>
</div>

<div id="outline-container-Implementation" class="outline-2">
<h2 id="Implementation"><span class="section-number-2">3</span> Implementation</h2>
<div class="outline-text-2" id="text-Implementation">
</div>
<div id="outline-container-File-structure" class="outline-3">
<h3 id="File-structure"><span class="section-number-3">3.1</span> File structure</h3>
<div class="outline-text-3" id="text-3-1">
<p>
The file structure of my blog, root directory is <a href="https://archive.casouri.co.uk/note/">https://archive.casouri.co.uk/note/</a>
</p>

<ul class="org-ul">
<li><code>index.org</code>: the Org file for the <a href="file:///note/index.html">index page</a></li>
<li><code>index.html</code>: the exported <a href="file:///note/index.html">index page</a></li>
<li><code>setup.org</code>: my setup file (kind of like template) for Org Mode export</li>
<li><code>style.css</code>: the style sheet for all the pages</li>
<li><code>script.js</code>: the script file for all the pages. Currently I don't have anything in there.</li>
<li>year(e.g. 2918)
<ul class="org-ul">
<li>post: each post is in a separate directory
<ul class="org-ul">
<li><code>index.org</code>: the Org file</li>
<li><code>index.html</code>: the exported HTML file</li>
<li>other static files used in the page</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-Links" class="outline-3">
<h3 id="Links"><span class="section-number-3">3.2</span> Links</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Because I want my site to work both online and on disk (that is, you can download the site to disk and view it the same), I use relative links everywhere.
</p>

<p>
One inconvenience is that I can't use link that points to a directory anymore: say <code>./2018/mypost/</code>. Instead, I need to explicitly write out the file: <code>./2018/mypost/index.html</code>. This looks a little bit dangerous, but should be OK.
</p>

<p>
For internal links, just use the headline name of the headline you want to reference as the link. So
</p>
<code>[[Template (Sorf of)][Headline below me]]</code>
<p>
will point to the headline below.
</p>
</div>
</div>

<div id="outline-container-Template-(sort-of)" class="outline-3">
<h3 id="Template-(sort-of)"><span class="section-number-3">3.3</span> Template (sort of)</h3>
<div class="outline-text-3" id="text-3-3">
<p>
This is my template:
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+OPTIONS: html-style:nil</span>
<span style="color: #9a9ea2; font-style: italic;">#+HTML_HEAD: &lt;link rel="stylesheet" type="text/css" href="../../style.css"/&gt;</span>
<span style="color: #9a9ea2; font-style: italic;">#+HTML_HEAD_EXTRA: &lt;script type="text/javascript" src="../../script.js"&gt;&lt;/script&gt;</span>
<span style="color: #9a9ea2; font-style: italic;">#+HTML_HEAD_EXTRA: &lt;link rel="icon" type="image/png" href="../../../favicon.png"&gt;</span>
<span style="color: #9a9ea2; font-style: italic;">#+HTML_LINK_UP: ../../index.html</span>
<span style="color: #9a9ea2; font-style: italic;">#+HTML_LINK_HOME: ../../index.html</span>
<span style="color: #9a9ea2; font-style: italic;">#+OPTIONS: toc:2</span>
</pre>
</div>

<p>
It is called setup file in Org Mode. In <code>index.org</code> file of each post, there is a line <code>#+SETUPFILE: ../../setup.org</code>. When Org exports the file, it first loads the setup file (<code>setup.org</code>), and environment set by that file will be used when exporting the post. You can think of it as adding these lines to every Org file before exporting.
</p>

<p>
The purpose of each line:
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+OPTIONS: html-style:nil</span>
</pre>
</div>

<p>
ꜛ disable the default styling that Org HTML exporter uses. I style my blog in my own CSS file.
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+HTML_HEAD: &lt;link rel="stylesheet" type="text/css" href="../../style.css"/&gt;</span>
</pre>
</div>

<p>
ꜛ Link to my style sheet.
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+HTML_HEAD_EXTRA: &lt;script type="text/javascript" src="../../script.js"&gt;&lt;/script&gt;</span>
</pre>
</div>

<p>
ꜛ Link to my script file.
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+HTML_HEAD_EXTRA: &lt;link rel="icon" type="image/png" href="../../../favicon.png"&gt;</span>
</pre>
</div>

<p>
ꜛ Link to my favicon.
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+HTML_LINK_UP: ../../index.html</span>
<span style="color: #9a9ea2; font-style: italic;">#+HTML_LINK_HOME: ../../index.html</span>
</pre>
</div>

<p>
ꜛ Add UP and HOME link to head line. <a href="#orgd35b26f">See more below</a>.
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+OPTIONS: toc:2</span>
</pre>
</div>

<p>
ꜛ Collect down to the second level header for TOC.
</p>
</div>
</div>

<div id="outline-container-TOC" class="outline-3">
<h3 id="TOC"><span class="section-number-3">3.4</span> TOC</h3>
<div class="outline-text-3" id="text-3-4">
<p>
On narrow screens, the table of content will simply be on top of the body. On wider screens, I made it to float on the right. If you are reading this post on a PC, you can probably see it.
</p>

<p>
It is achieved by this CSS snippet:
</p>

<div class="org-src-container">
<pre class="src src-css"><span style="color: #A8289C;">@media</span> screen and <span style="color: #2C79F5;">(</span>min-width: 800px<span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">{</span>
    <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">floating TOC </span><span style="color: #9a9ea2;">*/</span>
    <span style="color: #A8289C;">#table-of-contents  </span><span style="color: #A8289C;">{</span>
        <span style="color: #E04E49;">font-size</span>: 12pt;
        <span style="color: #E04E49;">bottom</span>:0;
        <span style="color: #E04E49;">position</span>:fixed;
        <span style="color: #E04E49;">overflow-y</span>:scroll;
        <span style="color: #E04E49;">overflow-x</span>:hidden;
        <span style="color: #E04E49;">top</span>: 5%;
        <span style="color: #E04E49;">right</span>: 2%;
        <span style="color: #E04E49;">width</span>: 20%;
    <span style="color: #A8289C;">}</span>
    <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">centered content </span><span style="color: #9a9ea2;">*/</span>
    <span style="color: #A8289C;">body </span><span style="color: #A8289C;">{</span>
        <span style="color: #E04E49;">margin-left</span>: 10%;
        <span style="color: #E04E49;">margin-right</span>: 30%;
        <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">this way floating TOC wouldn't touch content </span><span style="color: #9a9ea2;">*/</span>
        <span style="color: #E04E49;">width</span>: 58%;
    <span style="color: #A8289C;">}</span>
<span style="color: #2C79F5;">}</span>
</pre>
</div>

<p>
You can see that on wider screens, the content only occupies 60% (actually 58%) of the width of the screen.
</p>

<p>
For the TOC, <code>overflow-y:scroll;</code> makes TOC scroll able in case TOC is height is larger than the screen height.
</p>
</div>
</div>

<div id="outline-container-Head-line" class="outline-3">
<h3 id="Head-line"><span class="section-number-3">3.5</span> Head line</h3>
<div class="outline-text-3" id="text-3-5">
<blockquote>
<p>
Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-18 Sun&gt;</span></span>:
</p>

<p>
I made all pages to have the modified headline. See <a href="#org333ea25">below</a>.
</p>
</blockquote>


<p>
The head line is the strip on the very top of each page. Specifically the line <code>UP | HOME</code> on posts and <code>UP | HOME               RSS | Source | License</code>
on the <a href="file:///note/index.html">index page</a>.
</p>

<p>
The normal behavior of it is <code>UP | HOME</code>. Org HTML exporter adds this head line when you have
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #9a9ea2; font-style: italic;">#+HTML_LINK_UP: path-up-a-level</span>
<span style="color: #9a9ea2; font-style: italic;">#+HTML_LINK_HOME: path-to-home</span>
</pre>
</div>
<p>
in your setup. As you have already seen, I have these configured in my setup file.
</p>

<p>
For the <a href="file:///note/index.html">index page</a>, however, I hacked it a little bit. In <code>index.org</code> of the <a href="file:///note/index.html">index page</a>, I have this snippet in the end of the file:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"># Local Variables&#58;
# org-html-home/up-format: <span style="color: #489446;">"&lt;div id=\"org-div-home-and-up-index-page\"&gt; &lt;div&gt; &lt;a accesskey=\"h\" href=\"%s\"&gt; UP &lt;/a&gt; | &lt;a accesskey=\"H\" href=\"%s\"&gt; HOME &lt;/a&gt; &lt;/div&gt; &lt;div&gt; &lt;a href=\"./index.xml\"&gt; RSS &lt;/a&gt; | &lt;a href=\"https://github.com/casouri/casouri.github.io\"&gt; Source &lt;/a&gt; | &lt;a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"&gt; License &lt;/a&gt; &lt;/div&gt; &lt;/div&gt;"</span>
# End:
</pre>
</div>

<p>
That is a <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html">file local variable</a>, it sets <code>org-html-home/up-format</code> to
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #A8289C;">div</span> <span style="color: #A8289C;">id</span>=<span style="color: #489446;">"org-div-home-and-up-index-page"</span>&gt;
  &lt;<span style="color: #A8289C;">div</span>&gt;
    &lt;<span style="color: #A8289C;">a</span> <span style="color: #A8289C;">accesskey</span>=<span style="color: #489446;">"h"</span> <span style="color: #A8289C;">href</span>=<span style="color: #489446;">"../home/index.html"</span>&gt; UP &lt;/<span style="color: #A8289C;">a</span>&gt;
    |
    &lt;<span style="color: #A8289C;">a</span> <span style="color: #A8289C;">accesskey</span>=<span style="color: #489446;">"H"</span> <span style="color: #A8289C;">href</span>=<span style="color: #489446;">"../home/index.html"</span>&gt; HOME &lt;/<span style="color: #A8289C;">a</span>&gt;
  &lt;/<span style="color: #A8289C;">div</span>&gt;
  &lt;<span style="color: #A8289C;">div</span>&gt;
    &lt;<span style="color: #A8289C;">a</span> <span style="color: #A8289C;">href</span>=<span style="color: #489446;">"./index.xml"</span>&gt; RSS &lt;/<span style="color: #A8289C;">a</span>&gt;
    |
    &lt;<span style="color: #A8289C;">a</span> <span style="color: #A8289C;">href</span>=<span style="color: #489446;">"https://github.com/casouri/casouri.github.io"</span>&gt; Source &lt;/<span style="color: #A8289C;">a</span>&gt;
    |
    &lt;<span style="color: #A8289C;">a</span> <span style="color: #A8289C;">href</span>=<span style="color: #489446;">"https://creativecommons.org/licenses/by-sa/4.0/"</span>&gt; License &lt;/<span style="color: #A8289C;">a</span>&gt;
  &lt;/<span style="color: #A8289C;">div</span>&gt;
&lt;/<span style="color: #A8289C;">div</span>&gt;
</pre>
</div>

<p>
and in effect, injects <code>RSS | Source | License</code> part into the format.
</p>

<p>
To make the two part align with either side, I set the style of <code>org-div-home-and-up-index-page</code> as
</p>

<div class="org-src-container">
<pre class="src src-css"><span style="color: #A8289C;">div#org-div-home-and-up-index-page </span><span style="color: #2C79F5;">{</span>
    <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">headline </span><span style="color: #9a9ea2;">*/</span>
    <span style="color: #E04E49;">display</span>: flex;
    <span style="color: #E04E49;">justify-content</span>: space-between;
<span style="color: #2C79F5;">}</span>
</pre>
</div>

<p>
See <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">here</a> for more on CSS flex box.
</p>
</div>
</div>

<div id="outline-container-RSS" class="outline-3">
<h3 id="RSS"><span class="section-number-3">3.6</span> RSS</h3>
<div class="outline-text-3" id="text-3-6">
<p>
RSS feed is an essential part of a blog. However, Org Mode doesn't make it easy to add one for my blog.
</p>

<p>
Some references that helped me along the way:
</p>

<ul class="org-ul">
<li><a href="https://www.brautaset.org/articles/2018/org-mode-rss.html">Creating an RSS feed with Org mode</a></li>
<li><a href="https://orgmode.org/worg/dev/org-export-reference.html">Org Export Reference Documentation</a></li>
<li><a href="https://validator.w3.org/feed/docs/rss2.html">RSS 2.0 SPECIFICATION</a></li>
<li><a href="https://orgmode.org/manual/Macro-replacement.html">Macro replacement</a></li>
</ul>

<p>
I use a modified <a href="https://code.orgmode.org/bzg/org-mode/src/master/contrib/lisp/ox-rss.el">ox-rss.el</a> to generate RSS file. As its name suggests, it is a contrib package for Org Mode, so you need to download it first.
</p>
</div>

<div id="outline-container-What-does-%3Ccode%3Eox-rss.el%3C/code%3E-do" class="outline-4">
<h4 id="What-does-%3Ccode%3Eox-rss.el%3C/code%3E-do"><span class="section-number-4">3.6.1</span> What does <code>ox-rss.el</code> do</h4>
<div class="outline-text-4" id="text-3-6-1">
<p>
<code>ox-rss.el</code> exports each first-level header in the current file to an entry of RSS file. The description of each entry is whatever inside the header.
</p>

<p>
It adds <code>ID</code>, <code>PUBDATE</code> to each header if none exists.
<code>ID</code> is a pointer to the header so it can build a link that points to the header in RSS file. This is not useful for me because each headline in the <a href="file:///note/index.html">index page</a> is really just a link to my post with a short description. The actual content is not there. For that matter, I use <code>RSS_PERMALINK</code> to set the link manually.
<code>PUBDATE</code> is the publication date of the post.
</p>

<p>
So a header will look like this (the backslash on the first line is for escaping asterisk after it):
</p>

<pre class="example">
\* [[./2018/this-is-my-post/index.html][This Is My Post]] :COOL:
:PROPERTIES:
  :ID: some-id-afnoef73r3rb3rv3l
  :PUBDATE: &lt;2018-11-16 Fri&gt;
  :RSS_PERMALINK: https://archive.casouri.co.uk/note/2018/this-is-my-post/index.html
:END:
This is my post. It's cool.
</pre>

<p>
Some issues:
</p>
<ol class="org-ol">
<li>That's a lot of typing</li>
<li>I'm repeating the path to my post and the root url of my blog, that's not <a href="https://en.wikipedia.org/wiki/Don%2527t_repeat_yourself">DRY</a>.</li>
<li>I have <code>DATE</code> set in each post's <code>index.org</code>. And I don't feel like manually typing them here. That isn't <a href="https://en.wikipedia.org/wiki/Don%2527t_repeat_yourself">DRY</a>, either.</li>
</ol>

<p>
On top of that, <code>ox-rss</code> does something not so good with <code>RSS_PERMALINK</code>: it prefixes my link with path of UP or HOME if they exists. In my case they do, and the final url becomes
<code>../index.htmlhttps://archive.casouri.co.uk/note/path/to/my/post/index.html</code>.
</p>
</div>
</div>

<div id="outline-container-My-modification" class="outline-4">
<h4 id="My-modification"><span class="section-number-4">3.6.2</span> My modification</h4>
<div class="outline-text-4" id="text-3-6-2">
<p>
I don't want to modify the default behavior of <code>ox-rss.el</code>, so I added two properties — <code>RSS_BASE_URL</code> and <code>RSS_RELATIVE_LINK</code>. And modified the source of <code>ox-rss.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">In `</span><span style="color: #A8289C;">org-rss-headline</span><span style="color: #9a9ea2;">'</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">let</span> <span style="color: #A8289C;">(</span>...
      <span style="color: #489446;">(</span>hl-rel <span style="color: #DA7A48;">(</span>org-element-property <span style="color: #A8289C;">:RSS_RELATIVE_LINK</span> headline<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>url-base <span style="color: #DA7A48;">(</span>org-element-property <span style="color: #A8289C;">:RSS_URL_BASE</span> headline<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
...
<span style="color: #A8289C;">(</span>publink
 <span style="color: #489446;">(</span><span style="color: #E04E49;">or</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">and</span> hl-rel url-base <span style="color: #A8289C;">(</span>concat url-base hl-rel<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
     <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">and</span> hl-perm <span style="color: #A8289C;">(</span>concat <span style="color: #987816;">(</span><span style="color: #E04E49;">or</span> hl-home hl-pdir<span style="color: #987816;">)</span> hl-perm<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
     <span style="color: #DA7A48;">(</span>concat
      <span style="color: #A8289C;">(</span><span style="color: #E04E49;">or</span> hl-home hl-pdir<span style="color: #A8289C;">)</span>
      <span style="color: #A8289C;">(</span>file-name-nondirectory
       <span style="color: #987816;">(</span>file-name-sans-extension
        <span style="color: #2C79F5;">(</span>plist-get info <span style="color: #A8289C;">:input-file</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span> <span style="color: #987816;">"."</span><span style="color: #987816;"> htmlext </span><span style="color: #987816;">"#"</span><span style="color: #987816;"> anchor</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #987816;"> htmlext </span><span style="color: #987816;">"#"</span><span style="color: #987816;"> anchor</span><span style="color: #2C79F5;">)</span><span style="color: #E04E49;">)))</span>
</pre>
</div>

<p>
And the header would look like
</p>

<pre class="example">
\* [[./2018/this-is-my-post/index.html][This Is My Post]] :COOL:
  :PROPERTIES:
  :ID: some-id-afnoef73r3rb3rv3l
  :PUBDATE: &lt;2018-11-16 Fri&gt;
  :RSS_BASE_URL: https://archive.casouri.co.uk/note/
  :RSS_RELATIVE_LINK: 2018/this-is-my-post/index.html
  :END:
This is my post. It's cool.
</pre>
</div>
</div>

<div id="outline-container-Macro-make-it-DRY" class="outline-4">
<h4 id="Macro-make-it-DRY"><span class="section-number-4">3.6.3</span> Macro make it DRY</h4>
<div class="outline-text-4" id="text-3-6-3">
<p>
It works now, but the issues 1, 2, 3 are still not resolved. For that, we can use a macro to do the typing for us.
</p>

<p>
With macro <code>post</code>, above text shrinks to
</p>
<pre class="example">
{{{post(This Is My Post,2018/this-is-my-post/,:COOL:)}}}
This is my post. It's cool.
</pre>

<p>
I have a command<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> to type even that for me, so all I need is type the title: "This Is My Post".
</p>

<p>
The <a href="https://orgmode.org/manual/Macro-replacement.html">macro</a><sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> is defined as:
</p>

<pre class="example">
#+MACRO: post (eval (format "* [[./$2index.html][$1]] $3\n  :PROPERTIES:\n  :RSS_RELATIVE_LINK: $2\n  :RSS_URL_BASE: https://archive.casouri.co.uk/note/\n  :PUBDATE: %s\n  :END:" (let ((buffer (find-file-noselect "$2index.org")) date) (setq date (with-current-buffer buffer (plist-get (car (cdr (car (plist-get (org-export-get-environment) :date)))) :raw-value))) (kill-buffer buffer) date)))
</pre>

<p>
I know looks like heap of crap, here is the code prettied:
<code>$1</code> is the first argument — the title,
<code>$2</code> is the path, <code>$3</code> are the tags.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>eval
 <span style="color: #A8289C;">(</span>format <span style="color: #489446;">"* [[./$2index.html][$1]] $3</span>
<span style="color: #489446;">  :PROPERTIES:</span>
<span style="color: #489446;">  :RSS_RELATIVE_LINK: $2</span>
<span style="color: #489446;">  :RSS_URL_BASE: https://archive.casouri.co.uk/note/</span>
<span style="color: #489446;">  :PUBDATE: %s</span>
<span style="color: #489446;">  :END:"</span>
         <span style="color: #489446;">(</span><span style="color: #E04E49;">let</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>buffer <span style="color: #987816;">(</span>find-file <span style="color: #489446;">"$2index.org"</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
               date<span style="color: #DA7A48;">)</span>
           <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> date <span style="color: #A8289C;">(</span><span style="color: #E04E49;">with-current-buffer</span>
                          <span style="color: #987816;">(</span>plist-get
                           <span style="color: #2C79F5;">(</span>car
                            <span style="color: #80a880;">(</span>cdr
                             <span style="color: #887070;">(</span>car
                              <span style="color: #2C79F5;">(</span>plist-get
                               <span style="color: #A8289C;">(</span>org-export-get-environment<span style="color: #A8289C;">)</span>
                               <span style="color: #A8289C;">:date</span><span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
                           <span style="color: #A8289C;">:raw-value</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
           <span style="color: #DA7A48;">(</span>kill-buffer buffer<span style="color: #DA7A48;">)</span>
           date<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
The <code>(with-current-buffer ...)</code> part opens the post's <code>index.org</code> file and extracts the date out.
</p>
</div>
</div>
</div>

<div id="outline-container-Tag-filters-for-index-page" class="outline-3">
<h3 id="Tag-filters-for-index-page"><span class="section-number-3">3.7</span> Tag filters for index page</h3>
<div class="outline-text-3" id="text-3-7">
<p>
(Updated on <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-18 Sun&gt;</span></span>)
</p>

<p>
I have tags on the right of each header on the <a href="file:///note/index.html">index page</a>. You can't click them, though.
</p>

<p>
Normally when a blog has tags, you can click one, and it brings you to a page listing all the posts with that tag. I didn't go along with that approach, but make a filter button for each tag. Selecting and de-selecting each tag will hide and show posts with that particular tag on the index page. It's pretty cool.
</p>

<p>
Initially I made the buttons to have three states: <code>include</code>, <code>noselect</code>, and <code>exclude</code>.
<code>include</code> and <code>noselect</code> are normal selecting and de=selecting.
<code>excluede</code> means “don't show posts with this tag, not even when the post has a tag that is in <code>include</code> state”.
</p>

<p>
I figure it would probably confuse people and it's use case is pretty limited; so I removed it.
</p>

<p>
The idea is, each time a button is clicked, toggle it's state (implemented with class attribute) and add/remove it from "included tags list" (initial every tag is in the list). Then scan through the DOM and display/hide according to "included tags list".
</p>

<p>
I put the HTML, CSS and JavaScript in <a href="#orga41e452">3.11</a>.
</p>
</div>
</div>

<div id="outline-container-Publish" class="outline-3">
<h3 id="Publish"><span class="section-number-3">3.8</span> Publish</h3>
<div class="outline-text-3" id="text-3-8">
<p>
(Updated on <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-18 Sun&gt;</span></span>)
</p>

<p>
I write this publish function so I don't need to export by hand. The function only export when org file is newer than html file.
</p>

<p>
Another benefit of publish function is that I can add custom environment variables before export. I set <code>org-html-home/up-format</code> and <code>org-html-postamble-format</code>
to custom values.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">moon-org-html-postamble-format</span>
  '<span style="color: #A8289C;">(</span><span style="color: #489446;">(</span><span style="color: #489446;">"en"</span> <span style="color: #489446;">"&lt;p class=\"author\"&gt;Written by %a &lt;%e&gt;&lt;/p&gt;</span>
<span style="color: #489446;">&lt;p class=\"first-publish\"&gt;First Published on %d&lt;/p&gt;</span>
<span style="color: #489446;">&lt;p class-\"last-modified\"&gt;Last modified on %C&lt;/p&gt;"</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">moon-org-html-home/up-format</span>
  <span style="color: #489446;">"&lt;div id=\"org-div-home-and-up-index-page\"&gt;</span>
<span style="color: #489446;">&lt;div&gt;</span>
<span style="color: #489446;">&lt;a accesskey=\"h\" href=\"%s\"&gt; UP &lt;/a&gt; |</span>
<span style="color: #489446;">&lt;a accesskey=\"H\" href=\"%s\"&gt; HOME &lt;/a&gt;</span>
<span style="color: #489446;">&lt;/div&gt;</span>
<span style="color: #489446;">&lt;div&gt;</span>
<span style="color: #489446;">&lt;a href=\"./index.xml\"&gt; RSS &lt;/a&gt; |</span>
<span style="color: #489446;">&lt;a href=\"https://github.com/casouri/casouri.github.io\"&gt; Source &lt;/a&gt; |</span>
<span style="color: #489446;">&lt;a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"&gt; License &lt;/a&gt;</span>
<span style="color: #489446;">&lt;/div&gt;</span>
<span style="color: #489446;">&lt;/div&gt;"</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">moon-publish-root-dir</span> <span style="color: #489446;">"~/p/casouri/note/"</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">f</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">moon/publish</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">&amp;optional</span> force<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Publish my blog.</span>
<span style="color: #9a9ea2;">If FORCE is non-nil, only export when org file is newer than html file."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #489446;">(</span>dir <span style="color: #DA7A48;">(</span>f-directories moon-publish-root-dir<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #DA7A48;">(</span>post-dir <span style="color: #A8289C;">(</span>f-directories dir<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span>moon-html-export post-dir force<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">ox-rss</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>moon-html-export moon-publish-root-dir force<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>buffer <span style="color: #A8289C;">(</span>find-file <span style="color: #987816;">(</span>expand-file-name <span style="color: #489446;">"index.org"</span> moon-publish-root-dir<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">with-current-buffer</span> buffer
      <span style="color: #DA7A48;">(</span>org-rss-export-to-rss<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>kill-buffer buffer<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">moon-html-export</span> <span style="color: #A8289C;">(</span>dir <span style="color: #987816;">&amp;optional</span> force<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Export index.org to index.html in DIR is the latter is older.</span>
<span style="color: #9a9ea2;">If FORCE is non-nil, only export when org file is newer than html file."</span>
  <span style="color: #A8289C;">(</span>moon-load-theme 'doom-one-light<span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>org-html-postamble-format moon-org-html-postamble-format<span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span>org-html-postamble t<span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span>org-html-home/up-format moon-org-html-home/up-format<span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span>org-file <span style="color: #A8289C;">(</span>expand-file-name <span style="color: #489446;">"index.org"</span> dir<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span>html-file <span style="color: #A8289C;">(</span>expand-file-name <span style="color: #489446;">"index.html"</span> dir<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">when</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">or</span> force <span style="color: #A8289C;">(</span>file-newer-than-file-p org-file html-file<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">let</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>buffer <span style="color: #2C79F5;">(</span>find-file org-file<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">with-current-buffer</span> buffer
          <span style="color: #987816;">(</span>org-html-export-to-html<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>kill-buffer<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span>moon-load-theme 'doom-cyberpunk<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-Other-CSS-tricks" class="outline-3">
<h3 id="Other-CSS-tricks"><span class="section-number-3">3.9</span> Other CSS tricks</h3>
<div class="outline-text-3" id="text-Other-CSS-tricks">
</div>
<div id="outline-container-Code-block" class="outline-4">
<h4 id="Code-block"><span class="section-number-4">3.9.1</span> Code block</h4>
<div class="outline-text-4" id="text-3-9-1">
<div class="org-src-container">
<pre class="src src-css"><span style="color: #A8289C;">code, .example, .src </span><span style="color: #2C79F5;">{</span>
    <span style="color: #E04E49;">padding</span>: 3px;
    <span style="color: #E04E49;">background-color</span>: <span style="color: #000000; background-color: #F4F6F6;">#F4F6F6</span>;
    <span style="color: #E04E49;">font-size</span>: 12pt;
    <span style="color: #E04E49;">overflow-x</span>: scroll;
<span style="color: #2C79F5;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Tags" class="outline-4">
<h4 id="Tags"><span class="section-number-4">3.9.2</span> Tags</h4>
<div class="outline-text-4" id="text-3-9-2">
<div class="org-src-container">
<pre class="src src-css"><span style="color: #A8289C;">span.tag span </span><span style="color: #2C79F5;">{</span>
    <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">headline tags </span><span style="color: #9a9ea2;">*/</span>
    <span style="color: #E04E49;">font-size</span>: 12pt;
    <span style="color: #E04E49;">border-width</span>: 2px;
    <span style="color: #E04E49;">border-style</span>: solid;
<span style="color: #2C79F5;">}</span>
<span style="color: #A8289C;">code </span><span style="color: #2C79F5;">{</span>
    <span style="color: #E04E49;">white-space</span>: nowrap;
<span style="color: #2C79F5;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Footnote" class="outline-4">
<h4 id="Footnote"><span class="section-number-4">3.9.3</span> Footnote</h4>
<div class="outline-text-4" id="text-3-9-3">
<div class="org-src-container">
<pre class="src src-css"><span style="color: #A8289C;">.footdef </span><span style="color: #2C79F5;">{</span>
    <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">make footnote number and content to be on th same line </span><span style="color: #9a9ea2;">*/</span>
    <span style="color: #E04E49;">display</span>: flex;
<span style="color: #2C79F5;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Image-size" class="outline-4">
<h4 id="Image-size"><span class="section-number-4">3.9.4</span> Image size</h4>
<div class="outline-text-4" id="text-3-9-4">
<p>
I limit the image size to 600px width:
</p>
<div class="org-src-container">
<pre class="src src-css"><span style="color: #A8289C;">img </span><span style="color: #2C79F5;">{</span>
    <span style="color: #E04E49;">max-width</span>: 600px;
<span style="color: #2C79F5;">}</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-Misc" class="outline-3">
<h3 id="Misc"><span class="section-number-3">3.10</span> Misc</h3>
<div class="outline-text-3" id="text-Misc">
</div>
<div id="outline-container-Syntax-highlight" class="outline-4">
<h4 id="Syntax-highlight"><span class="section-number-4">3.10.1</span> Syntax highlight</h4>
<div class="outline-text-4" id="text-3-10-1">
<p>
Syntax highlight takes the current font-lock color for the exported HTML. So switch to a light theme for reasonable syntax colors.
</p>
</div>
</div>
</div>

<div id="outline-container-Filter-code" class="outline-3">
<h3 id="Filter-code"><span class="section-number-3">3.11</span> Filter code</h3>
<div class="outline-text-3" id="text-3-11">
<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #A8289C;">div</span> <span style="color: #A8289C;">id</span>=<span style="color: #489446;">"taglist"</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleAll()"</span> <span style="color: #A8289C;">id</span>=<span style="color: #489446;">"tagAll"</span>&gt;All&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Emacs&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Org_Mode&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Web&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Programming&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Network&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Music&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Design&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Anime&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;<span style="color: #A8289C;">p</span> <span style="color: #A8289C;">onclick</span>=<span style="color: #489446;">"toggleTag(this)"</span>&gt;Hacker&lt;/<span style="color: #A8289C;">p</span>&gt;
&lt;/<span style="color: #A8289C;">div</span>&gt;
</pre>
</div>

<div class="org-src-container">
<pre class="src src-css"><span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">desktop, tablet landscape </span><span style="color: #9a9ea2;">*/</span>
<span style="color: #A8289C;">@media</span> screen and <span style="color: #2C79F5;">(</span>min-width: 1025px<span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">{</span>
    <span style="color: #A8289C;">div#taglist  </span><span style="color: #A8289C;">{</span>
        <span style="color: #E04E49;">position</span>: fixed;
        <span style="color: #E04E49;">overflow-y</span>: scroll;
        <span style="color: #E04E49;">overflow-x</span>: wrap;
        <span style="color: #E04E49;">top</span>: 40pt;
        <span style="color: #E04E49;">left</span>: 2%;
        <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">width: 20%; </span><span style="color: #9a9ea2;">*/</span>
    <span style="color: #A8289C;">}</span>
    <span style="color: #A8289C;">div#taglist p </span><span style="color: #A8289C;">{</span>
        <span style="color: #9a9ea2;">/* </span><span style="color: #9a9ea2;">make cursor hand on hover </span><span style="color: #9a9ea2;">*/</span>
        <span style="color: #E04E49;">cursor</span>: pointer;
        <span style="color: #E04E49;">margin-top</span>: 20pt;
        <span style="color: #E04E49;">border-width</span>: 2px;
        <span style="color: #E04E49;">border-style</span>: solid;
        <span style="color: #E04E49;">padding-left</span>: 1em;
        <span style="color: #E04E49;">padding-right</span>: 1em;
        <span style="color: #E04E49;">text-align</span>: right;
    <span style="color: #A8289C;">}</span>
    <span style="color: #A8289C;">div#taglist p:hover </span><span style="color: #A8289C;">{</span>
        <span style="color: #E04E49;">background-color</span>: <span style="color: #ffffff; background-color: #000000;">black</span> <span style="color: #A8289C;">!important</span>;
        <span style="color: #E04E49;">color</span>: <span style="color: #000000; background-color: #ffffff;">white</span> <span style="color: #A8289C;">!important</span>;
    <span style="color: #A8289C;">}</span>

    <span style="color: #A8289C;">div#taglist p.noselect </span><span style="color: #A8289C;">{</span>
        <span style="color: #E04E49;">color</span>: <span style="color: #ffffff; background-color: #808080;">gray</span>;
        <span style="color: #E04E49;">border-color</span>: <span style="color: #ffffff; background-color: #808080;">gray</span>;
    <span style="color: #A8289C;">}</span>

    <span style="color: #A8289C;">div#taglist p.include </span><span style="color: #A8289C;">{</span>
        <span style="color: #E04E49;">color</span>: <span style="color: #ffffff; background-color: #000000;">black</span>;
        <span style="color: #E04E49;">border-color</span>:<span style="color: #ffffff; background-color: #000000;">black</span>
    <span style="color: #A8289C;">}</span>

    <span style="color: #A8289C;">div#taglist p.exclude </span><span style="color: #A8289C;">{</span>
        <span style="color: #E04E49;">text-decoration</span>: line-through;
    <span style="color: #A8289C;">}</span>
<span style="color: #2C79F5;">}</span>
</pre>
</div>

<p>
I commented out the exclude part, if you like it, you can put it back in.
</p>

<div class="org-src-container">
<pre class="src src-javascript"><span style="color: #E04E49;">function</span> <span style="color: #A8289C;">myremove</span><span style="color: #2C79F5;">(</span><span style="color: #A8289C;">lst</span>, <span style="color: #A8289C;">elt</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">{</span>
  <span style="color: #E04E49;">var</span> <span style="color: #A8289C;">index</span> = lst.indexOf<span style="color: #A8289C;">(</span>elt<span style="color: #A8289C;">)</span>
  <span style="color: #E04E49;">if</span> <span style="color: #A8289C;">(</span>index &gt; -1<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">{</span>
    lst.splice<span style="color: #489446;">(</span>index, 1<span style="color: #489446;">)</span>
  <span style="color: #A8289C;">}</span>
<span style="color: #2C79F5;">}</span>

<span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">tag filtering</span>


window.onload = setupTagList

<span style="color: #E04E49;">var</span> <span style="color: #A8289C;">excludeTagList</span> = <span style="color: #2C79F5;">[]</span>
<span style="color: #E04E49;">var</span> <span style="color: #A8289C;">includeTagList</span> = <span style="color: #2C79F5;">[]</span>
<span style="color: #E04E49;">var</span> <span style="color: #A8289C;">allTagList</span> = <span style="color: #2C79F5;">[]</span>

<span style="color: #E04E49;">function</span> <span style="color: #A8289C;">setupTagList</span><span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">{</span>
  <span style="color: #E04E49;">for</span> <span style="color: #A8289C;">(</span><span style="color: #E04E49;">var</span> <span style="color: #A8289C;">tag</span> <span style="color: #E04E49;">of</span> document.getElementById<span style="color: #489446;">(</span><span style="color: #489446;">'taglist'</span><span style="color: #489446;">)</span>.children<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">{</span>
    tag.className = <span style="color: #489446;">'include'</span>
    includeTagList.push<span style="color: #489446;">(</span>tag.innerHTML<span style="color: #489446;">)</span>
    allTagList.push<span style="color: #489446;">(</span>tag<span style="color: #489446;">)</span>
  <span style="color: #A8289C;">}</span>
<span style="color: #2C79F5;">}</span>

<span style="color: #E04E49;">function</span> <span style="color: #A8289C;">toggleAll</span><span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">{</span>
  toggleTag<span style="color: #A8289C;">(</span>document.getElementById<span style="color: #489446;">(</span><span style="color: #489446;">'tagAll'</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #E04E49;">for</span> <span style="color: #A8289C;">(</span>tag <span style="color: #E04E49;">of</span> allTagList<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">{</span>
    <span style="color: #E04E49;">while</span> <span style="color: #489446;">(</span>tag.className !== tagAll.className<span style="color: #489446;">)</span> <span style="color: #489446;">{</span>
      toggleTag<span style="color: #DA7A48;">(</span>tag<span style="color: #DA7A48;">)</span>
    <span style="color: #489446;">}</span>
  <span style="color: #A8289C;">}</span>
<span style="color: #2C79F5;">}</span>

<span style="color: #E04E49;">function</span> <span style="color: #A8289C;">toggleTag</span><span style="color: #2C79F5;">(</span><span style="color: #A8289C;">tag</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">{</span>
  <span style="color: #E04E49;">switch</span> <span style="color: #A8289C;">(</span>tag.className<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">{</span>
    <span style="color: #E04E49;">case</span> <span style="color: #489446;">'include'</span>:
      <span style="color: #E04E49;">var</span> <span style="color: #A8289C;">nextState</span> = <span style="color: #489446;">'noselect'</span>
      myremove<span style="color: #489446;">(</span>includeTagList, tag.innerHTML<span style="color: #489446;">)</span>
      <span style="color: #E04E49;">break</span>
    <span style="color: #E04E49;">case</span> <span style="color: #489446;">'noselect'</span>:
      <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">var nextState = 'exclude'</span>
    <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">excludeTagList.push(tag.innerHTML)</span>
    <span style="color: #E04E49;">var</span> <span style="color: #A8289C;">nextState</span> = <span style="color: #489446;">'include'</span>
      includeTagList.push<span style="color: #489446;">(</span>tag.innerHTML<span style="color: #489446;">)</span>
      <span style="color: #E04E49;">break</span>
    <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">case 'exclude':</span>
    <span style="color: #9a9ea2;">//   </span><span style="color: #9a9ea2;">var nextState = 'include'</span>
    <span style="color: #9a9ea2;">//   </span><span style="color: #9a9ea2;">myremove(excludeTagList, tag.innerHTML)</span>
    <span style="color: #9a9ea2;">//   </span><span style="color: #9a9ea2;">includeTagList.push(tag.innerHTML)</span>
    <span style="color: #9a9ea2;">//   </span><span style="color: #9a9ea2;">break</span>
  <span style="color: #A8289C;">}</span>
  tag.className = nextState
  filterHeaders<span style="color: #A8289C;">()</span>
<span style="color: #2C79F5;">}</span>

<span style="color: #E04E49;">function</span> <span style="color: #A8289C;">filterHeaders</span><span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">{</span>
  <span style="color: #E04E49;">for</span> <span style="color: #A8289C;">(</span><span style="color: #E04E49;">var</span> <span style="color: #A8289C;">header</span> <span style="color: #E04E49;">of</span> document.getElementById<span style="color: #489446;">(</span><span style="color: #489446;">'content'</span><span style="color: #489446;">)</span>.children<span style="color: #A8289C;">)</span> <span style="color: #A8289C;">{</span>
    <span style="color: #E04E49;">if</span> <span style="color: #489446;">(</span>header.className === <span style="color: #489446;">"outline-2"</span><span style="color: #489446;">)</span> <span style="color: #489446;">{</span>
      <span style="color: #E04E49;">for</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">var</span> <span style="color: #A8289C;">tag</span> <span style="color: #E04E49;">of</span> header.getElementsByClassName<span style="color: #A8289C;">(</span><span style="color: #489446;">'tag'</span><span style="color: #A8289C;">)[</span>0<span style="color: #A8289C;">]</span>.children<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">{</span>
        <span style="color: #E04E49;">if</span> <span style="color: #A8289C;">(</span>includeTagList.includes<span style="color: #987816;">(</span>tag.innerHTML<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span> <span style="color: #A8289C;">{</span>
          header.style.display = <span style="color: #489446;">'block'</span>
          <span style="color: #E04E49;">break</span>
        <span style="color: #A8289C;">}</span> <span style="color: #E04E49;">else</span> <span style="color: #A8289C;">{</span>
          header.style.display = <span style="color: #489446;">'none'</span>
        <span style="color: #A8289C;">}</span>
      <span style="color: #DA7A48;">}</span>
      <span style="color: #9a9ea2;">// </span><span style="color: #9a9ea2;">exclude list overrides include list</span>
      <span style="color: #E04E49;">for</span> <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">var</span> <span style="color: #A8289C;">tag</span> <span style="color: #E04E49;">of</span> header.getElementsByClassName<span style="color: #A8289C;">(</span><span style="color: #489446;">'tag'</span><span style="color: #A8289C;">)[</span>0<span style="color: #A8289C;">]</span>.children<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">{</span>
        <span style="color: #E04E49;">if</span> <span style="color: #A8289C;">(</span>excludeTagList.includes<span style="color: #987816;">(</span>header.tagName<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span> <span style="color: #A8289C;">{</span>
          header.style.display = <span style="color: #489446;">'none'</span>
        <span style="color: #A8289C;">}</span>
      <span style="color: #DA7A48;">}</span>
    <span style="color: #489446;">}</span>
  <span style="color: #A8289C;">}</span>
<span style="color: #2C79F5;">}</span>
</pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
The command also creates files and folders for me and types the necessary options for me. Here is the code:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">moon/new-blog</span> <span style="color: #A8289C;">(</span>title<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Make a new blog post with TITLE."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span> <span style="color: #489446;">"M"</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>year <span style="color: #A8289C;">(</span>shell-command-to-string <span style="color: #489446;">"echo -n $(date +%Y)"</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>dir-file-name <span style="color: #A8289C;">(</span>downcase <span style="color: #987816;">(</span>replace-regexp-in-string <span style="color: #489446;">" "</span> <span style="color: #489446;">"-"</span> title<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>dir-path <span style="color: #A8289C;">(</span>concat <span style="color: #987816;">(</span>format  <span style="color: #489446;">"~/p/casouri/note/%s/"</span>
                                    year<span style="color: #987816;">)</span>
                           dir-file-name<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>file-path <span style="color: #A8289C;">(</span>concat dir-path
                            <span style="color: #489446;">"/index.org"</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>mkdir dir-path<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>find-file file-path<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>insert <span style="color: #DA7A48;">(</span>format <span style="color: #489446;">"#+SETUPFILE: ../../setup.org</span>
<span style="color: #489446;">#+TITLE: %s</span>
<span style="color: #489446;">#+DATE:</span>
<span style="color: #489446;">"</span>
                    title<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>kill-new <span style="color: #DA7A48;">(</span>format <span style="color: #489446;">"{{{post(%s/%s/,%s)}}}"</span>
                      title
                      year
                      dir-file-name<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>save-buffer<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span>find-file <span style="color: #489446;">"~/p/casouri/note/index.org"</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
The manual doesn't mention that you can use <code>(eval)</code> inside macros. Note that if you use <code>(eval)</code>, the whole macro definition has to be in <code>(eval)</code>:
</p>

<pre class="example">
#+MACRO naive-macro something (eval "like this") doesn't work.
</pre>

<p class="footpara">
That will just expand to
</p>

<pre class="example">
something (eval "like this") doesn't work.
</pre>

<p class="footpara">
On the other hand,
</p>

<pre class="example">
#+MACRO reasonable-macro (eval "Something like this works.")
</pre></div></div>


</div>
</div>]]></description>
<pubDate>Fri, 16 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>Easy Bindings when Region Is Active</title>
<link>https://archive.casouri.cat/note/2018/easy-bindings-when-region-is-active</link>
<guid>https://archive.casouri.cat/note/2018/easy-bindings-when-region-is-active</guid>
<description><![CDATA[<p>
In Emacs, "region active" means <code>transient-mark-mode</code> is on, which roughly means you selected some text. In this state, you can bind some "easy" bindings, i.e., bindings without modifiers. These easy bindings can greatly improve your text editing experience. Here is what I binded:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key</th>
<th scope="col" class="org-left">Operation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>p</code></td>
<td class="org-left"><code>yank</code> (paste)</td>
</tr>

<tr>
<td class="org-left"><code>y</code></td>
<td class="org-left"><code>kill-ring-save</code> (copy)</td>
</tr>

<tr>
<td class="org-left"><code>C-y</code></td>
<td class="org-left"><code>kill-ring-save</code> (copy)</td>
</tr>

<tr>
<td class="org-left"><code>Y</code></td>
<td class="org-left">(copy but don't exist <code>transient-mark-mode</code>)</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left"><code>s</code></td>
<td class="org-left"><code>isolate-quick-add</code></td>
</tr>

<tr>
<td class="org-left"><code>S</code></td>
<td class="org-left"><code>isolate-long-add</code></td>
</tr>

<tr>
<td class="org-left"><code>d</code></td>
<td class="org-left"><code>isolate-quick-delete</code></td>
</tr>

<tr>
<td class="org-left"><code>D</code></td>
<td class="org-left"><code>isolate-long-delete</code></td>
</tr>

<tr>
<td class="org-left"><code>c</code></td>
<td class="org-left"><code>isolate-quick-change</code></td>
</tr>

<tr>
<td class="org-left"><code>C</code></td>
<td class="org-left"><code>isolate-long-change</code></td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left"><code>f</code></td>
<td class="org-left"><code>er/mark-defun</code> (select function point)</td>
</tr>

<tr>
<td class="org-left"><code>w</code></td>
<td class="org-left"><code>er/mark-word</code> (select word at point)</td>
</tr>

<tr>
<td class="org-left"><code>W</code></td>
<td class="org-left"><code>er/mark-symbol</code> (select symbol at point)</td>
</tr>

<tr>
<td class="org-left"><code>P</code></td>
<td class="org-left"><code>mark-paragraph</code> (select paragraph at point)</td>
</tr>

<tr>
<td class="org-left"><code>q</code></td>
<td class="org-left"><code>er/mark-inside-quotes</code> (select inside quote)</td>
</tr>

<tr>
<td class="org-left"><code>Q</code></td>
<td class="org-left"><code>er/mark-outside-quotes</code> (select including quote)</td>
</tr>

<tr>
<td class="org-left"><code>b</code></td>
<td class="org-left"><code>er/mark-inside-pairs</code> (select inside pair)</td>
</tr>

<tr>
<td class="org-left"><code>B</code></td>
<td class="org-left"><code>er/mark-outside-pairs</code> (selct including pair)</td>
</tr>
</tbody>
</table>

<p>
Some remarks:
</p>

<ol class="org-ol">
<li>I bind <code>C-y</code> to <code>yank</code> out side selection, so <code>C-y</code> pastes when nothing is selected and copies when something is selected.</li>
<li><code>isolate-xxx</code> commands are from <a href="https://github.com/casouri/isolate">isolate.el</a>, basically <a href="https://github.com/emacs-evil/evil-surround/blob/master/readme.org">evil-surround</a> for vanilla Emacs.</li>
<li>marking commands are like Vim text objects, I normally start region with <code>set-mark-command</code>
and use these short cuts to select the text object that I want.</li>
</ol>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2019-08-03 Sat&gt; </span></span> Update:</b>
</p>

<p>
Code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defconst</span> <span style="color: #A8289C;">angel-transient-mode-map-alist</span>
  `<span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>mark-active
     ,@<span style="color: #DA7A48;">(</span><span style="color: #E04E49;">let</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>map <span style="color: #2C79F5;">(</span>make-sparse-keymap<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">operations</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"p"</span> <span style="color: #987816;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">(</span>b e<span style="color: #2C79F5;">)</span>
                               <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span> <span style="color: #489446;">"r"</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>delete-region b e<span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>yank<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"x"</span> #'exchange-point-and-mark<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">";"</span> #'comment-dwim<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"y"</span> #'kill-ring-save<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #987816;">(</span>kbd <span style="color: #489446;">"C-y"</span><span style="color: #987816;">)</span> #'kill-ring-save<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"Y"</span> <span style="color: #987816;">(</span><span style="color: #E04E49;">lambda</span>
                               <span style="color: #2C79F5;">(</span>b e<span style="color: #2C79F5;">)</span>
                               <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span> <span style="color: #489446;">"r"</span><span style="color: #2C79F5;">)</span>
                               <span style="color: #2C79F5;">(</span>kill-new <span style="color: #80a880;">(</span>buffer-substring b e<span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
                               <span style="color: #2C79F5;">(</span>message <span style="color: #489446;">"Region saved"</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">isolate</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"s"</span> #'isolate-quick-add<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"S"</span> #'isolate-long-add<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"d"</span> #'isolate-quick-delete<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"D"</span> #'isolate-long-delete<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"c"</span> #'isolate-quick-change<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"C"</span> #'isolate-long-change<span style="color: #A8289C;">)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">mark things</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"f"</span> #'er/mark-defun<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"w"</span> #'er/mark-word<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"W"</span> #'er/mark-symbol<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"P"</span> #'mark-paragraph<span style="color: #A8289C;">)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">inner &amp; outer</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(define-key map "C-i" inner-map)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(define-key map "C-a" outer-map)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(define-key inner-map "q" #'er/mark-inside-quotes)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(define-key outer-map "q" #'er/mark-outside-quotes)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(define-key inner-map "b" #'er/mark-inside-pairs)</span>
         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">(define-key outer-map "b" #'er/mark-outside-pairs)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"q"</span> #'er/mark-inside-quotes<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #489446;">"b"</span> #'er/mark-inside-pairs<span style="color: #A8289C;">)</span>

         <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">expand-region</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #987816;">(</span>kbd <span style="color: #489446;">"C--"</span><span style="color: #987816;">)</span> #'er/contract-region<span style="color: #A8289C;">)</span>
         <span style="color: #A8289C;">(</span>define-key map <span style="color: #987816;">(</span>kbd <span style="color: #489446;">"C-="</span><span style="color: #987816;">)</span> #'er/expand-region<span style="color: #A8289C;">)</span>
         map<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span>add-to-list 'emulation-mode-map-alists
             'angel-transient-mode-map-alist t<span style="color: #2C79F5;">)</span>
</pre>
</div>
]]></description>
<pubDate>Thu, 15 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>Emacs Keymap Precedence</title>
<link>https://archive.casouri.cat/note/2018/emacs-keymap-precedence</link>
<guid>https://archive.casouri.cat/note/2018/emacs-keymap-precedence</guid>
<description><![CDATA[<p>
Discussion from <a href="https://emacs-china.org/t/topic/7587/6">a post in emacs-china</a>. Copied from <a href="https://xuchunyang.me">xuchunyang</a>.
</p>

<p>
As a quick note, Emacs keymaps take precedence as follows:
</p>

<ol class="org-ol">
<li>overriding-terminal-local-map</li>
<li>overriding-local-map</li>
<li>text property's 'keymap property</li>
<li>emulation-mode-map-alists</li>
<li>minor-mode-overriding-map-alist</li>
<li>minor-mode-map-alist (Minor Mode)</li>
<li>text property's 'local-map property</li>
<li>(current-local-map) (Major Mode)</li>
<li>(current-global-map) (Global Map)</li>
</ol>

<p>
Related <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Searching-Keymaps.html">Emacs Manual Node</a>.
</p>
]]></description>
<pubDate>Thu, 15 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>Who Called My Function?</title>
<link>https://archive.casouri.cat/note/2018/who-called-my-function</link>
<guid>https://archive.casouri.cat/note/2018/who-called-my-function</guid>
<description><![CDATA[<p>
Someone asked why his Emacs starts up with two split screen. Apparently something in his <code>init.el</code> caused that.
</p>

<p>
But how can we find what caused the problem? I searched around and found a way to check "backtrace frame" in Emacs: <code>backtrace-frames</code>.
</p>

<p>
Here is what I cooked up:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>advice-add 'split-window-right <span style="color: #A8289C;">:before</span> <span style="color: #A8289C;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #489446;">(</span><span style="color: #987816;">&amp;rest</span> _<span style="color: #489446;">)</span> <span style="color: #489446;">(</span>print <span style="color: #DA7A48;">(</span>backtrace-frames<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">some-function</span> <span style="color: #A8289C;">()</span> <span style="color: #A8289C;">(</span>split-window-right<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
So when I call the function <code>some-funtion</code>, a split window is created with following information printed:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #A8289C;">(</span>t backtrace-frames nil nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>nil print
      <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>backtrace-frames<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t
  <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span>
    <span style="color: #DA7A48;">(</span><span style="color: #987816;">&amp;rest</span> _<span style="color: #DA7A48;">)</span>
    <span style="color: #DA7A48;">(</span>print
     <span style="color: #A8289C;">(</span>backtrace-frames<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
  nil nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t apply
    <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span><span style="color: #E04E49;">lambda</span>
       <span style="color: #A8289C;">(</span><span style="color: #987816;">&amp;rest</span> _<span style="color: #A8289C;">)</span>
       <span style="color: #A8289C;">(</span>print
        <span style="color: #987816;">(</span>backtrace-frames<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
     nil<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t split-window-right nil nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t some-function nil nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t eval
    <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>some-function<span style="color: #DA7A48;">)</span>
     nil<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t elisp--eval-last-sexp
    <span style="color: #489446;">(</span>t<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t eval-last-sexp
    <span style="color: #489446;">(</span>t<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t eval-print-last-sexp
    <span style="color: #489446;">(</span>nil<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t funcall-interactively
    <span style="color: #489446;">(</span>eval-print-last-sexp nil<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t call-interactively
    <span style="color: #489446;">(</span>eval-print-last-sexp nil nil<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span>
 <span style="color: #A8289C;">(</span>t command-execute
    <span style="color: #489446;">(</span>eval-print-last-sexp<span style="color: #489446;">)</span>
    nil<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
We can see <code>some-funtion</code> is right before <code>split-window</code>. Cool. As for the other <code>t</code> and <code>nil</code> stuff, I chose to not bother.
</p>
]]></description>
<pubDate>Sun, 14 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Emacs Gateway Drug</title>
<link>https://archive.casouri.cat/note/2018/emacs-gateway-drug</link>
<guid>https://archive.casouri.cat/note/2018/emacs-gateway-drug</guid>
<description><![CDATA[<p>
Every time I try to introduce my friend Emacs, they ask "why?" Well I can't really think of anything except "you can do anything you want with it". Of course that statement is too broad and unconvincing. So I though I'd collect some cool features that can lure my friends into using Emacs.
</p>

<p>
These tricks must be easily understandable and looks very cool even to laymen. So here we go:
</p>

<ol class="org-ol">
<li><code>C-f/b</code> <code>M-f/b</code> <code>C-a/e</code></li>
<li><code>undo-tree-visualize</code></li>
<li>Org Mode</li>
<li>Keyboard Macros</li>
<li>Rectangle Selection</li>
<li>query replace</li>
<li>inline-replace</li>
<li>package installation (that's a bit controversial)</li>
<li>regexp-replace</li>
<li>(for programming) outshine</li>
<li>(mostle for programming) magit</li>
</ol>
]]></description>
<pubDate>Sun, 07 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Retro Terminal Blog Style</title>
<link>https://archive.casouri.cat/note/2018/retro-terminal-blog-style</link>
<guid>https://archive.casouri.cat/note/2018/retro-terminal-blog-style</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Color-and-content">1. Color and content</a></li>
<li><a href="#Animation">2. Animation</a></li>
</ul>
</div>
</div>

<div id="org2609c2a" class="figure">
<p><img src="/note/2018/retro-terminal-blog-style/retro-term-css.gif" alt="retro-term-css.gif" />
</p>
</div>

<div id="outline-container-Color-and-content" class="outline-2">
<h2 id="Color-and-content"><span class="section-number-2">1</span> Color and content</h2>
<div class="outline-text-2" id="text-1">
<p>
Basically I made it looks like some official trying to search a person's archive in database via a terminal.
</p>

<pre class="example">
$ visit BHL0388

Warning: Prohibited content with privilege B and lower

$ authorize ************************************

Welcome back, last login: Sep 8 2018 Sat 17:54:39 from
c-68-80-3-96.hsd1.pa.comcast.net

Jumping back to last visited...

BHL0388

Name: ██████

███████████████

Surname: casouri

██████████████████████████████████

Associated Organization: Pluto Alice

████████████████████

███████████████████████████

█████████████████████████████████████████
</pre>

<p>
Blackouts are cool, aren't they?
</p>

<p>
My font spec:
</p>
<div class="org-src-container">
<pre class="src src-CSS">.mono:lang(en-us), .mono {
    font-family: Courier, Courier New;
}

:lang(zh-Hans) {
    font-family: Songti SC;
}
</pre>
</div>

<p>
And I added this retry terminal style with green text color and text-shadow by CSS:
</p>

<div class="org-src-container">
<pre class="src src-CSS">.retro  {
    background-color: #282828;
    color: #66FF66;
    text-shadow: 0 0 10px #33FF33;
}
</pre>
</div>

<p>
I got the color of retro displays form this <a href="https://superuser.com/questions/361297/what-colour-is-the-dark-green-on-old-fashioned-green-screen-computer-displays">stackexchange question</a>.
</p>

<p>
I also need to change my black-and-white profile image to glowing green,
<a href="https://www.youtube.com/watch?v=8DNIVet1PgI">this YouTube video</a> is a nice tutorial on add glowing effects onto image.
</p>


<p>
If you want to know more, just look at my index page's HTML and CSS directly.
</p>
</div>
</div>

<div id="outline-container-Animation" class="outline-2">
<h2 id="Animation"><span class="section-number-2">2</span> Animation</h2>
<div class="outline-text-2" id="text-2">
<p>
It's pretty cool now, but wouldn't it be better if it shows the actual animation of typing?
</p>

<p>
Turns out it's quite simple, your can achieve that in pure CSS.
</p>

<p>
What we need is <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations">CSS animation</a>. <a href="https://codepen.io/thiagoteles/pen/ogoxLw">Here</a> is a nice snippet that has the exact effect we want.
</p>

<p>
The idea is to set width of the tag to 0 initially, then use the animation to gradually expand the width.
</p>

<p>
I modified the snippet a bit: (get the files from here: <a href="file:///note/2018/retro-terminal-blog-style/test.html">HTML</a> <a href="file:///note/2018/retro-terminal-blog-style/style.css">CSS</a>)
</p>

<div class="org-src-container">
<pre class="src src-CSS">/* Google Fonts */
@import url(https://fonts.googleapis.com/css?family=Anonymous+Pro);

/* Global */
html{
    min-height: 100%;
    overflow: hidden;
}
body{
    color: rgba(255,255,255,.75);
    font-family: 'Anonymous Pro', monospace;
    background-color: rgb(25,25,25);
}

.line-1{
    width: 44ch;
    border-right: 1ch solid rgba(255,255,255,.75);
    white-space: nowrap;
    overflow: hidden;
}

/* Animation */
.anim-typewriter{
    animation: typewriter 6s steps(44) 1s 1 normal both,
               blinkTextCursor 1s steps(44) infinite normal;
}
@keyframes typewriter{
    from{width: 0;}
    to{width: 44ch;}
}

@keyframes blinkTextCursor{
    from{border-right-color: rgba(255,255,255,.75);}
    to{border-right-color: transparent;}
}
</pre>
</div>

<ul class="org-ul">
<li><code>overflow: hidden;</code> makes sure the content outside current width is hidden</li>
<li><code>white-space: nowrap;</code> makes sure the line is not wrapped</li>
<li>Here is what I modified: because the text has 44 characters, set width to <code>44ch</code>, and set animation steps to 44. This way we get a nice crisp typing animation. (<code>ch</code> is the width of <code>0</code> in current font)</li>
</ul>


<p>
Now all we need to do is apply animations and calculate the timing for each one.
</p>

<p>
For the "printing" content, I use a <code>showup</code> animation:
</p>

<div class="org-src-container">
<pre class="src src-CSS">@keyframes stage3-animation-a {
    from{opacity: 0;}
    to{opacity: 1;}
}
</pre>
</div>

<p>
It just changes opacity from <code>0</code> to <code>1</code>.
</p>
</div>

<div id="outline-container-And-Cursor?" class="outline-3">
<h3 id="And-Cursor?"><span class="section-number-3">2.1</span> And Cursor?</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The tutorial covers how to make a blinking cursor, I just want to add how to make cursor disappear after the "user" finished typing.
</p>

<p>
To fake this effect, set the initial border color to <code>transparant</code>, and add a time duration to the cursor animation. For example, if the typing animation takes 3 seconds, set your cursor animation to around 4 seconds. I added a second because no one type and hit enter linearly, people type in commands, stop, and hit enter.
</p>

<p>
So when the cursor animation is over, the border color goes back to <code>transparant</code>: it disappears.
</p>
</div>
</div>
</div>
]]></description>
<pubDate>Fri, 05 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Join chat on IRC</title>
<link>https://archive.casouri.cat/note/2018/join-chat-on-irc</link>
<guid>https://archive.casouri.cat/note/2018/join-chat-on-irc</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Server">1. Server</a></li>
<li><a href="#Client">2. Client</a></li>
<li><a href="#Join-a-Channel">3. Join a Channel</a></li>
<li><a href="#Quit">4. Quit</a></li>
<li><a href="#Other-commands">5. Other commands</a></li>
<li><a href="#Useful-Tips">6. Useful Tips</a></li>
</ul>
</div>
</div>
<p>
IRC is a cool protocol that hackers all over the world have been using for decades. Many communities have a IRC channel.
</p>

<div id="outline-container-Server" class="outline-2">
<h2 id="Server"><span class="section-number-2">1</span> Server</h2>
<div class="outline-text-2" id="text-1">
<p>
Most of the IRC channels I know are on <a href="https://freenode.net">https://freenode.net</a>. Check the server your community uses.
</p>
</div>
</div>

<div id="outline-container-Client" class="outline-2">
<h2 id="Client"><span class="section-number-2">2</span> Client</h2>
<div class="outline-text-2" id="text-2">
<p>
First, freenode has an <a href="https://webchat.freenode.net">online client</a> for you. I prefer to use Emacs, and luckily Emacs comes with a nice IRC client called erc.
</p>

<p>
Start it up with <code>M-x erc</code>, it asks you for server and port, just leave the default. Then for the user name you can just type whatever you want. You actually “use” the nick name before you register it on IRC. Once you are in freenode, you can register your nick name by this command:
</p>

<pre class="example">
/msg NickServ REGISTER password youremail@example.com
</pre>
<p>
To “login” (freenode call it “identify”):
</p>
<pre class="example">
/msg NickServ IDENTIFY nickname password
</pre>

<p>
This is not really IRC protocol but a freenode protocol. You are actually sending a message to a special user <code>NickServ</code>, and the massage is <code>REGISTER password youremail@example.com</code>.
</p>
</div>
</div>

<div id="outline-container-Join-a-Channel" class="outline-2">
<h2 id="Join-a-Channel"><span class="section-number-2">3</span> Join a Channel</h2>
<div class="outline-text-2" id="text-3">
<p>
To join a channel:
</p>
<pre class="example">
/join #channel
</pre>
<p>
For example:
</p>
<pre class="example">
/join #emacs
</pre>
<p>
Channel names always start with <code>#</code>, I think.
</p>
</div>
</div>

<div id="outline-container-Quit" class="outline-2">
<h2 id="Quit"><span class="section-number-2">4</span> Quit</h2>
<div class="outline-text-2" id="text-4">
<p>
Quit with
</p>
<pre class="example">
/quit
</pre>
</div>
</div>

<div id="outline-container-Other-commands" class="outline-2">
<h2 id="Other-commands"><span class="section-number-2">5</span> Other commands</h2>
<div class="outline-text-2" id="text-5">
<p>
You can learn other IRC commands at <a href="http://www.ircbeginner.com/ircinfo/ircc-commands.html">here</a>.
</p>
</div>
</div>

<div id="outline-container-Useful-Tips" class="outline-2">
<h2 id="Useful-Tips"><span class="section-number-2">6</span> Useful Tips</h2>
<div class="outline-text-2" id="text-Useful-Tips">
</div>
<div id="outline-container-How-to-%22@%22-people" class="outline-3">
<h3 id="How-to-%22@%22-people"><span class="section-number-3">6.1</span> How to "@" people</h3>
<div class="outline-text-3" id="text-6-1">
<p>
Normally you type the person’s name and add a <code>:</code>. So <code>@cooldude xxx</code> would be <code>cooldude: xxx</code>. This is how we reply to people specifically.
</p>
</div>
</div>

<div id="outline-container-How-to-see-chat-history?" class="outline-3">
<h3 id="How-to-see-chat-history?"><span class="section-number-3">6.2</span> How to see chat history?</h3>
<div class="outline-text-3" id="text-6-2">
<p>
You can’t. You have to stay online to see the conversation. You can setup a remote server to stay online  and <code>ssh</code> to the server to chat. But really, you can just login and ask your question, if no one is online, just check in some other time. You don’t need to record every message every send to the channel.
</p>
</div>
</div>
</div>
]]></description>
<pubDate>Tue, 02 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Wanderlust</title>
<link>https://archive.casouri.cat/note/2018/wanderlust</link>
<guid>https://archive.casouri.cat/note/2018/wanderlust</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#References">1. References</a></li>
<li><a href="#Install">2. Install</a></li>
<li><a href="#Receive-Mail">3. Receive Mail</a></li>
<li><a href="#Folder-Buffer">4. Folder Buffer</a></li>
<li><a href="#Summary-Buffer">5. Summary Buffer</a></li>
<li><a href="#Send-Mail">6. Send Mail</a></li>
<li><a href="#Address-Book">7. Address Book</a></li>
<li><a href="#Search-Mail">8. Search Mail</a></li>
<li><a href="#Auto-Refile">9. Auto Refile</a></li>
<li><a href="#Expire-rules">10. Expire rules</a></li>
<li><a href="#Other">11. Other</a></li>
<li><a href="#Funny-Quote">12. Funny Quote</a></li>
</ul>
</div>
</div>
<p>
Wanderlust is a Emacs email client, I have had enough with Thunderbird and Mail on macOS (Thunderbird uses a ton of RAM and Mail got werid bugs that no one except me seems have encountered, and both of them sucks at searching mails), and apparently Outlook doesn't work on mac, so I'm finally getting my hand dirty with Emacs email client.
</p>

<div id="outline-container-References" class="outline-2">
<h2 id="References"><span class="section-number-2">1</span> References</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://github.com/LdBeth/Emacs-for-Noobs/blob/master/WanderLust.org">LdBeth's tutorial</a>
</p>

<p>
<a href="https://www.emacswiki.org/emacs/WanderLust">EmacsWiki</a>
</p>

<p>
<a href="https://www.emacswiki.org/emacs/WlFaq">EmacsWiki FAQ</a>
</p>

<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html">Manual</a>
</p>

<p>
<a href="http://dis-dot-dat.blogspot.com/2010/04/ive-used-combination-of-mutt-emacs.html">Some good snippets</a>
</p>
</div>
</div>

<div id="outline-container-Install" class="outline-2">
<h2 id="Install"><span class="section-number-2">2</span> Install</h2>
<div class="outline-text-2" id="text-2">
<p>
You need APEL, FLIM/CLIME, SEMI, in that order, and, of course, wanderlust.
</p>

<p>
I installed them with my cowboy.el (in the brute force manner), you can just install from melpa.
</p>
</div>
</div>

<div id="outline-container-Receive-Mail" class="outline-2">
<h2 id="Receive-Mail"><span class="section-number-2">3</span> Receive Mail</h2>
<div class="outline-text-2" id="text-Receive-Mail">
</div>
<div id="outline-container-Folder" class="outline-3">
<h3 id="Folder"><span class="section-number-3">3.1</span> Folder</h3>
<div class="outline-text-3" id="text-3-1">
<p>
First, config file is <code>~/.folders</code>, you can change it by <code>wl-folders-file</code>. Here you setup "folders", for wanderlust there is only folder, no account.
</p>

<p>
<a href="http://mihai.bazon.net/articles/emacs/wanderlust-email-client/configure-email-folders">Mishoo</a> has a detailed and helpful explanation of this, but for archiving purpose I'll repeat him below.
</p>

<blockquote>
<p>
WL stores the folders information in the file “$HOME/.folders” (dot folders).  Here's the syntax for one IMAP folder:
</p>

<p>
%INBOX:johndoe/clear@mail.domain.com:993!   "INBOX"
</p>

<p>
The above tells WL that we have an IMAP folder (starts with “%”), on the server named “mail.domain.com”, using “clear” (plain) authentication, user name “johndoe”, port “993” and should use secure sockets layer (SSL) when connecting (ends with “!”).  Additionally, the string "INBOX" at the end specifies how this folder should be named locally.
</p>
</blockquote>

<p>
P.S. <code>%</code> is IMAP folder, <code>+</code> is local folder, other folders see <a href="http://wanderlust.github.io/wl-docs/wl.html#Folders">the manual</a>.
</p>
</div>
</div>

<div id="outline-container-Grouping" class="outline-3">
<h3 id="Grouping"><span class="section-number-3">3.2</span> Grouping</h3>
<div class="outline-text-3" id="text-3-2">
<p>
A single folder is not very useful, here is how to setup groups in WL:
</p>

<div class="org-src-container">
<pre class="src src-unix-config">GMAIL {
   %Inbox:casouri/clear@imap.gmail.com:993!             "Inbox"
   %[Gmail]/All Mail:casouri/clear@imap.gmail.com:993!  "All Mail"
   %[Gmail]/Sent Mail:casouri/clear@imap.gmail.com:993! "Sent"
   %[Gmail]/Starred:casouri/clear@imap.gmail.com:993!   "Starred"
   %[Gmail]/Drafts:casouri/clear@imap.gmail.com:993!    "Draft"
   %[Gmail]/Trash:casouri/clear@imap.gmail.com:993!     "Trash"
}
</pre>
</div>

<p>
And it looks like this in WL:
</p>

<pre class="example">
[-]Desktop:0/37/24319
  [-]GMAIL :0/37/24319
    Inbox:0/0/2
    All Mail:0/0/544
    Sent:0/0/304
    Starred:0/0/1
    Draft:0/0/0
    Trash:0/37/23468
</pre>

<p>
(The <code>Desktop</code> can be changed by variable <code>wl-folder-desktop-name</code>)
</p>

<p>
It took me a while to sync up the labels in Gmail and my local WL folders.
</p>

<p>
The part <code>[Gmail]/All Mail</code> is the folder (label in Gmail). I thought that the <code>[Gmail]</code> is some sort of special syntax, turns out it's just how Google name their system labels (folders) in Gmail.
</p>

<p>
Also you need to make sure you have made these system labels available to SMTP:
</p>


<div id="org8970957" class="figure">
<p><img src="/note/2018/wanderlust/label-setting.png" alt="label-setting.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-update:-Use-%3Ccode%3Efetchmail%3C/code%3E-to-Download-Mails" class="outline-3">
<h3 id="update:-Use-%3Ccode%3Efetchmail%3C/code%3E-to-Download-Mails"><span class="section-number-3">3.3</span> Update: Use <code>fetchmail</code> to Download Mails</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Not downloading the mail until I read it sound silly, it's not like I don't read every mail&#x2026; Plus WL is super slow when fetching mails when I open each mail.
</p>
</div>

<div id="outline-container-What-You-Need" class="outline-4">
<h4 id="What-You-Need"><span class="section-number-4">3.3.1</span> What You Need</h4>
<div class="outline-text-4" id="text-3-3-1">
<p>
<code>fetchmail</code> and <code>postfix</code>.
</p>
</div>
</div>

<div id="outline-container-%3Ccode%3Efetchmail%3C/code%3E" class="outline-4">
<h4 id="%3Ccode%3Efetchmail%3C/code%3E"><span class="section-number-4">3.3.2</span> <code>fetchmail</code></h4>
<div class="outline-text-4" id="text-3-3-2">
<p>
<a href="http://www.fetchmail.info/fetchmail-man.html">fetchmail manual</a>
</p>

<p>
<a href="https://www.linode.com/docs/email/clients/using-fetchmail-to-retrieve-email/">a tutorial</a>
</p>

<p>
Configure <code>fetchmail</code> with <code>~/.fetchmailrc</code>.
</p>

<p>
In the following line:
</p>

<div class="org-src-container">
<pre class="src src-shell">poll imap.gmail.com protocol IMAP auth password
    user <span style="color: #489446;">"apprentice@gmail.com"</span> is apprentice here
    password <span style="color: #489446;">'klwpcmaqeycndist'</span>
    ssl, sslcertck, idle
</pre>
</div>

<p>
(Note: If I use <code>set deamon 60</code>, fetchmail cannot resolve DNS correctly.)
</p>

<p>
Then change <code>.folder</code> file:
</p>

<div class="org-src-container">
<pre class="src src-unix-config">GMAIL {
   .inbox             "Inbox"
}
</pre>
</div>

<p>
<code>.</code> means <a href="https://en.wikipedia.org/wiki/Maildir">maildir format</a>.
</p>
</div>
</div>

<div id="outline-container-%3Ccode%3Epostfix%3C/code%3E" class="outline-4">
<h4 id="%3Ccode%3Epostfix%3C/code%3E"><span class="section-number-4">3.3.3</span> <code>postfix</code></h4>
<div class="outline-text-4" id="text-3-3-3">
<p>
Open <code>/etc/postfix/main.cf</code>, Add/ucomment there lines:
</p>

<pre class="example">
home_mailbox = Maildir/
mailbox_command =
</pre>

<p>
Also make sure <code>inet_interface</code> is set to <code>loopback-only</code> (127.0.0.1):
</p>

<pre class="example">
inet_interfaces = loopback-only
</pre>

<p>
So you don't listen to mail comes from places other than <code>fetchmail</code>.
</p>

<p>
Note that <code>postfix</code> choses mail format between mailbox and maildir depends on whether <code>home_mailbox</code>
is a directory or a file (the slash). The name of the directory (or file) can be changed how ever you like.
</p>
</div>
</div>

<div id="outline-container-Use-%3Ccode%3Eprocmail%3C/code%3E-to-replace-%3Ccode%3Epostfix%3C/code%3E" class="outline-4">
<h4 id="Use-%3Ccode%3Eprocmail%3C/code%3E-to-replace-%3Ccode%3Epostfix%3C/code%3E"><span class="section-number-4">3.3.4</span> Use <code>procmail</code> to replace <code>postfix</code></h4>
<div class="outline-text-4" id="text-3-3-4">
<p>
For some reason I cannot start <code>postfix</code> on my machine. This might be another culprit of macOS Mojave&#x2026;
</p>

<p>
Anyway, I then replaced it with <code>procmail</code>.
</p>

<p>
First change the <code>.fetchmailrc</code> to make it use another MDA:
</p>

<pre class="example">
mda '/usr/local/bin/procmail ~/.procmailrc'
</pre>

<p>
Then configure <code>~/.procmailrc</code>:
</p>

<p>
I found a detailed tutorial <a href="https://groups.csail.mit.edu/mac/ftpdir/users/mrb/Hacks/ELisp/Spam/spambnc.proctut.shtml">here</a>. And this is the <a href="http://archive.is/OTMaa">archived link</a> in case the original broke.
</p>

<pre class="example">
SHELL=/bin/sh
PATH=/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
MAILDIR=$HOME/Mail/
LOGFILE=$HOME/.procmail.log
VERBOSE=yes
DEFAULT=$MAILDIR/inbox/
</pre>
</div>
</div>
</div>

<div id="outline-container-update:-Use-%3Ccode%3Embsync%3C/code%3E-(%3Ccode%3Eisync%3C/code%3E)-to-Download-Mails" class="outline-3">
<h3 id="update:-Use-%3Ccode%3Embsync%3C/code%3E-(%3Ccode%3Eisync%3C/code%3E)-to-Download-Mails"><span class="section-number-3">3.4</span> Update: Use <code>mbsync</code> (<code>isync</code>) to Download Mails</h3>
<div class="outline-text-3" id="text-3-4">
<p>
It seems <code>mbsync</code> is faster and easier to configure.
</p>

<p>
Here is <a href="http://isync.sourceforge.net/mbsync.html">the manual</a>.
</p>

<p>
Configure <code>~/.mbsyncrc</code>:
</p>

<pre class="example">
IMAPAccount gmail
# Address to connect to
Host imap.gmail.com
User user@gmail.com
Pass password
# To store the password in an encrypted file use PassCmd instead of Pass
# PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.mailpass.gpg"
#
# Use SSL
SSLType IMAPS
AuthMechs LOGIN

# The following line should work. If get certificate errors, uncomment the two following lines and read the "Troubleshooting" section.
# CertificateFile /etc/ssl/certs/ca-certificates.crt
#CertificateFile ~/.cert/imap.gmail.com.pem
#CertificateFile ~/.cert/Equifax_Secure_CA.pem

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path ~/Mail/Gmail/
SubFolders Verbatim
Inbox ~/Mail/Gmail/Inbox

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
# Exclude everything under the internal [Gmail] folder, except the interesting folders
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail"
# Or include everything
#Patterns *
# Automatically create missing mailboxes, both locally and on the server
Create Both
# Save the synchronization state files in the relevant directory
SyncState *


IMAPAccount psu
Host outlook.office365.com
User user@psu.edu
Pass password
SSLType IMAPS
AuthMechs LOGIN

IMAPStore psu-remote
Account psu

MaildirStore psu-local
Path ~/Mail/PSU/
SubFolders Verbatim
Inbox ~/Mail/PSU/Inbox

Channel psu
Master :psu-remote:
Slave :psu-local:
Patterns "Archive" "Sent Items"
Create Both
SyncState *
</pre>

<p>
Most of the stuff can be found in manual. If you are not sure what folders there are, you can set <code>Pattern</code> to <code>*</code> and retrieve everything. Once you know the name for each folder, you can set specific rules to get only the ones you want.
</p>

<p>
Note that mbsync is sensitive to empty lines. You got to keep each "block" together.
</p>

<p>
Fetch your mail by <code>mbsync &lt;account&gt;</code>, e.g. <code>mbsync gmail</code> or <code>mbsync psu</code>. You can set a corn job (linux) or launchd job (macOS) to run it periodically.
</p>
</div>

<div id="outline-container-Use-a-Password-File-instead-of-plain-text" class="outline-4">
<h4 id="Use-a-Password-File-instead-of-plain-text"><span class="section-number-4">3.4.1</span> Use a Password File instead of plain text</h4>
<div class="outline-text-4" id="text-3-4-1">
<p>
Currently the password of my email account is just lying in the <code>.mbsyncrc</code>, which makes me a bit uncomfortable and I can't put it under (public) version control. However, the tutorial that I based my config on already gave a solution: use a password file.
</p>

<p>
This way I can manage my config with git, cool.
</p>

<p>
So the concept is basically create a file with password, encrypt it with gpg, when <code>mbsync</code> needs password, it runs gpg to decrypt the password.
</p>

<p>
I created <code>gmailpass</code> with my Gmail password in it. Then encrypted it with
</p>

<div class="org-src-container">
<pre class="src src-shell">gpg -c gmailpass
</pre>
</div>

<p>
If you have gpg setup correclty, it should ask you for a password, I just repeated the Gmail password at here because I'm lazy. Then you'll get a <code>gmaipass.gpg</code> file, that's your encrypted password file. Now you can delete the plain text <code>gmailpass</code>.
</p>

<p>
Then set PassCmd in <code>~/.mbsyncrc</code>:
</p>

<pre class="example">
IMAPAccount gmail
# Address to connect to
Host imap.gmail.com
User casouri@gmail.com
# To store the password in an encrypted file use PassCmd instead of Pass
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/gmailpass.gpg"
</pre>

<p>
If you run that command <code>gpg -q --for-your-eyes-only --no-tty -d ~/gmailpass.gpg</code>, the password is actually printed back, so you can guess how does that work.
</p>

<p>
Now you can put <code>~/.mbsyncrc</code> and password file in your config repo safely.
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-Folder-Buffer" class="outline-2">
<h2 id="Folder-Buffer"><span class="section-number-2">4</span> Folder Buffer</h2>
<div class="outline-text-2" id="text-4">
<p>
Once you start up WL with <code>M-x wl</code> and entered your password, you are in folder mode:
</p>

<pre class="example">
[-]Desktop:0/0/307
  [-]GMAIL :0/0/307
    Inbox:0/0/2
    All Mail:0/0/0
    Sent:0/0/304
    Starred:0/0/1
    Draft:0/0/0
    Trash:0/0/0
</pre>

<p>
A couple bindings:
</p>

<dl class="org-dl">
<dt><code>n/p</code></dt><dd>move down/up</dd>
<dt><code>N/P</code></dt><dd>next/last folder with unread mail</dd>
<dt><code>q</code></dt><dd>quit WL</dd>
<dt><code>z</code></dt><dd>suspend WL</dd>
<dt><code>RET/SPC</code></dt><dd>open a folder and go to summary mode</dd>
<dt><code>c</code></dt><dd>mark all mail as read</dd>
<dt><code>M-RET</code></dt><dd>toggle child</dd>
<dt><code>[</code></dt><dd>expand all folders</dd>
<dt><code>]</code></dt><dd>collapse all folders</dd>
<dt><code>'</code></dt><dd>quick search</dd>
</dl>

<p>
For more bindings, checkout <a href="http://wanderlust.github.io/wl-docs/wl.html#Folder">the manual</a>.
</p>
</div>
</div>

<div id="outline-container-Summary-Buffer" class="outline-2">
<h2 id="Summary-Buffer"><span class="section-number-2">5</span> Summary Buffer</h2>
<div class="outline-text-2" id="text-5">
<p>
Here you see all your mails:
</p>

<pre class="example">
377  09/16(Wed)11:57 [+1: Takuro Kitame  ] Bug?
381  09/17(Thu)00:16 [+3: Fujikazu Okuni ] elmo-lha.el -- LHA interface
384  09/17(Thu)01:32 [+1: Yuuichi Terani ] wl-0.6.2
389 N09/18(Fri)01:07 [+2: Yuuichi Terani ] wl-0.6.3
</pre>

<p>
The columns are: Message number, Temporal mark, Persistent mark, Date, Sender, Subject.
</p>

<p>
Bindings:
</p>

<dl class="org-dl">
<dt><code>l</code></dt><dd>Toggle folder buffer in the left.</dd>
<dt><code>v</code></dt><dd>toggle display of message window. I found this important&#x2026;</dd>
<dt><code>n/p</code></dt><dd>move down/up</dd>
<dt><code>N/P</code></dt><dd>next/last unread mail</dd>
<dt><code>*</code></dt><dd>mark</dd>
<dt><code>u</code></dt><dd>unmark</dd>
<dt><code>U</code></dt><dd>unmark all</dd>
<dt><code>q</code></dt><dd>go back</dd>
<dt><code>SPC/RET</code></dt><dd>view mail, you can still use <code>n/p</code> to go through mails. Keep tapping <code>SPC</code> to go through all unread mails.</dd>
<dt><code>s</code></dt><dd>refresh</dd>
<dt><code>/</code></dt><dd>toggle thread(conversation)</dd>
<dt><code>[/]</code></dt><dd>expand/collapse all thread</dd>
<dt><code>a</code></dt><dd>reply</dd>
<dt><code>f</code></dt><dd>forward</dd>
<dt><code>$</code></dt><dd>toggle <code>important</code> flag</dd>
<dt><code>w</code></dt><dd>new draft</dd>
<dt><code>q</code></dt><dd>quit WL</dd>
<dt><code>z</code></dt><dd>suspend WL</dd>
<dt><code>Z</code></dt><dd>sync with address book</dd>
<dt><code>!</code></dt><dd>Mark as unread</dd>
<dt><code>S</code></dt><dd>Sort</dd>
<dt><code>R</code></dt><dd>Mark as read</dd>
<dt><code>o</code></dt><dd>put refile mark</dd>
<dt><code>O</code></dt><dd>put copy mark</dd>
<dt><code>C-o</code></dt><dd>autorefile</dd>
<dt><code>d</code></dt><dd>put dispose mark, the result of disposal is controlled by <code>wl-dispose-folder-alist</code>.</dd>
<dt><code>@</code></dt><dd>add/remove/change sender to/from/in address book</dd>
<dt><code>'</code></dt><dd>quick search</dd>
</dl>

<p>
More in <a href="http://wanderlust.github.io/wl-docs/wl.html#Key-Bindings-of-Summary">the manual</a>
</p>
</div>

<div id="outline-container-Format-of-summary-lines" class="outline-4">
<h4 id="Format-of-summary-lines"><span class="section-number-4">5.0.1</span> Format of summary lines</h4>
<div class="outline-text-4" id="text-5-0-1">
<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Summary-View">manual</a>
</p>
</div>
</div>

<div id="outline-container-Message-Buffer" class="outline-3">
<h3 id="Message-Buffer"><span class="section-number-3">5.1</span> Message Buffer</h3>
<div class="outline-text-3" id="text-5-1">
<dl class="org-dl">
<dt><code>l</code></dt><dd>toggle display of summary buffer on the top</dd>
</dl>
</div>
</div>
</div>

<div id="outline-container-Send-Mail" class="outline-2">
<h2 id="Send-Mail"><span class="section-number-2">6</span> Send Mail</h2>
<div class="outline-text-2" id="text-Send-Mail">
</div>
<div id="outline-container-Configure" class="outline-3">
<h3 id="Configure"><span class="section-number-3">6.1</span> Configure</h3>
<div class="outline-text-3" id="text-6-1">
<p>
I have two email address, this way I can chose which address I send mails from. Hit <code>C-c C-j</code> in message mode to chose.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">default template</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-smtp-connection-type 'starttls
      wl-smtp-posting-port 587
      wl-smtp-authenticate-type <span style="color: #489446;">"plain"</span>
      wl-smtp-posting-user <span style="color: #489446;">"casouri"</span>
      wl-smtp-posting-server <span style="color: #489446;">"smtp.gmail.com"</span>
      wl-local-domain <span style="color: #489446;">"gmail.com"</span>
      wl-message-id-domain <span style="color: #489446;">"smtp.gmail.com"</span><span style="color: #2C79F5;">)</span>
<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">multi address</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-user-mail-address-list '<span style="color: #A8289C;">(</span><span style="color: #489446;">"casouri@gmail.com"</span> <span style="color: #489446;">"ykf5041@psu.edu"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-template-alist
      '<span style="color: #A8289C;">(</span><span style="color: #489446;">(</span><span style="color: #489446;">"GMAIL"</span>
         <span style="color: #DA7A48;">(</span>wl-from . <span style="color: #489446;">"Yuan Fu <a href="mailto:casouri%40gmail.com">&lt;casouri@gmail.com&gt;</a>"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-posting-user . <span style="color: #489446;">"casouri"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-posting-server . <span style="color: #489446;">"smtp.gmail.com"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-authenticate-type .<span style="color: #489446;">"plain"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-connection-type . 'starttls<span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-posting-port . 587<span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-local-domain . <span style="color: #489446;">"gmail.com"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-message-id-domain . <span style="color: #489446;">"smtp.gmail.com"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span><span style="color: #489446;">"From"</span> . wl-from<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
        <span style="color: #489446;">(</span><span style="color: #489446;">"PSU"</span>
         <span style="color: #DA7A48;">(</span>wl-from . <span style="color: #489446;">"Yuan Fu <a href="mailto:ykf5041%40psu.edu">&lt;ykf5041@psu.edu&gt;</a>"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-posting-user . <span style="color: #489446;">"ykf5041@psu.edu"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-authenticate-type .<span style="color: #489446;">"login"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-posting-server . <span style="color: #489446;">"smtp.office365.com"</span><span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-connection-type . 'starttls<span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>wl-smtp-posting-port . 587<span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span><span style="color: #489446;">"From"</span> . wl-from<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
You got to set the default config. By default WL doesn't apply any template. Templates are kind of like color themes in Emacs, all they do is override.
</p>

<p>
Note that I set <code>wl-smtp-authenticate-type</code> to <code>"login"</code> in Outlook mail (Penn State uses Outlook).
</p>
</div>
</div>

<div id="outline-container-Write-Mail" class="outline-3">
<h3 id="Write-Mail"><span class="section-number-3">6.2</span> Write Mail</h3>
<div class="outline-text-3" id="text-6-2">
<p>
Hit <code>w</code> to start a Draft buffer and go into message mode.
</p>

<p>
Bindings:
</p>

<dl class="org-dl">
<dt><code>C-c C-j</code></dt><dd>switch between from addresses</dd>
<dt><code>C-c C-k</code></dt><dd>kill draft</dd>
<dt><code>C-c TAB</code></dt><dd>add attachment</dd>
<dt><code>C-c C-c</code></dt><dd>send and exit</dd>
<dt><code>C-c C-z</code></dt><dd>save and exit</dd>
<dt><code>C-c C-w</code></dt><dd>signature</dd>
<dt><code>C-c C-t</code></dt><dd>start editing text</dd>
<dt><code>C-c C-f</code></dt><dd>cc and friends</dd>
</dl>
</div>
</div>

<div id="outline-container-Dynamic-Modification-of-Messages" class="outline-3">
<h3 id="Dynamic-Modification-of-Messages"><span class="section-number-3">6.3</span> Dynamic Modification of Messages</h3>
<div class="outline-text-3" id="text-6-3">
<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Use the same address to reply</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-draft-config-alist
      '<span style="color: #A8289C;">(</span><span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>string-match <span style="color: #489446;">"psu"</span> wl-draft-parent-folder<span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>template . <span style="color: #489446;">"PSU"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
        <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>string-match <span style="color: #489446;">"gmail"</span> wl-draft-parent-folder<span style="color: #DA7A48;">)</span>
         <span style="color: #DA7A48;">(</span>template . <span style="color: #489446;">"GMAIL"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
This makes sure I always reply with the address to which the mail was send.
</p>

<p>
BTW, if it doesn't appear to work, it's because it applies when the mail is sent, as the docstring of <code>wl-draft-config-alist</code> says:
</p>
<blockquote>
<p>
The configuration is applied when ‘wl-draft-config-exec’ is called, or applied automatically before sending message.
</p>
</blockquote>

<p>
The format of <code>wl-draft-config-alist</code> is:
</p>

<pre class="example">
'(("regexp of the header" or elisp expression
  ("Field" . value(elisp expression))
   (variable . value(elisp expression))
   (sub-function . value(elisp expression))
   function
   …)
  ("regexp of the header" or elisp expression
   ("Field" . value(elisp expression))
   …))
</pre>

<p>
Per default, there are 13 following sub-functions.
</p>

<pre class="example">
'header:      Inserts the specified string at the bottom of the header.
'header-top:  Inserts the specified string at the top of the header.
'header-file: Inserts the specified file at the bottom of the header.
'x-face:      Inserts ‘X-Face:’ field with the content of the specified file.
'top:         Inserts the specified string at the top of the body.
'top-file:    Inserts the specified file at the top of the body.
'body:        Replaces the body with the specified string.
              Specifying nil deletes the entire body string.
'body-file:   Replaces the body with the content of the specified file.
'bottom:      Inserts the specified string at the bottom of the body.
'bottom-file: Inserts the specified file at the top of the body.
'part-top:  Inserts the specified string at the top of the current part.
'part-bottom: Inserts the specified string at the bottom of the current part.
'template:    Applies the specified template.
              (refer to the next subsection)
</pre>

<p>
More in [[<a href="http://wanderlust.github.io/wl-docs/wl.html#Dynamical-Message-Re_002darrangement">http://wanderlust.github.io/wl-docs/wl.html#Dynamical-Message-Re_002darrangement</a>][the manual]
</p>
</div>
</div>
</div>

<div id="outline-container-Address-Book" class="outline-2">
<h2 id="Address-Book"><span class="section-number-2">7</span> Address Book</h2>
<div class="outline-text-2" id="text-Address-Book">
</div>
<div id="outline-container-%3Ccode%3Ebbdb%3C/code%3E-as-Address-Book" class="outline-3">
<h3 id="%3Ccode%3Ebbdb%3C/code%3E-as-Address-Book"><span class="section-number-3">7.1</span> <code>bbdb</code> as Address Book</h3>
<div class="outline-text-3" id="text-7-1">
<p>
<code>bbdb-v3</code> supports Wanderlust directly. Get it from <a href="http://download.savannah.nongnu.org/releases/bbdb/">savannah</a>.
</p>

<p>
<a href="https://www.emacswiki.org/emacs/BBDBV3-Wl">Emacs Wiki</a> has a tutorial for <code>bbdb-v3</code> setup for Wanderlust.
<a href="http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html">Emacs-fu</a> also got a detailed tutorial, but his setup is for <code>bbdb-v2</code>. I'll mention the different parts below.
</p>

<p>
I copied most part from emacs-fu with slight changes:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">before load</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> bbdb-file <span style="color: #A8289C;">(</span>concat moon-star-dir <span style="color: #489446;">"utility/email/bbdb"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">after load</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">bbdb-wl</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>bbdb-initialize 'wl<span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span>
 bbdb-wl-folder-regexp    <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">get addresses only from these folders</span>
 <span style="color: #489446;">"^</span><span style="color: #987816;">\</span><span style="color: #489446;">.inbox$</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">^.sent"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span>
 bbdb-offer-save 1                        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">1 means save-without-asking</span>

 bbdb-use-pop-up t                        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">allow popups for addresses</span>
 bbdb-electric-p t                        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">be disposable with SPC</span>
 bbdb-popup-target-lines  1               <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">very small</span>

 bbdb-dwim-net-address-allow-redundancy t <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">always use full name</span>
 bbdb-quiet-about-name-mismatches 2       <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">show name-mismatches 2 secs</span>

 bbdb-always-add-address t                <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">add new addresses to existing...</span>
 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">...contacts automatically</span>
 bbdb-canonicalize-redundant-nets-p t     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">x@foo.bar.cx =&gt; x@bar.cx</span>

 bbdb-completion-type nil                 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">complete on anything</span>

 bbdb-complete-name-allow-cycling t       <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">cycle through matches</span>
 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">this only works partially</span>

 bbbd-message-caching-enabled t           <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">be fast</span>
 bbdb-use-alternate-names t               <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">use AKA</span>


 bbdb-elided-display t                    <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">single-line addresses</span>

 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">auto-create addresses from mail</span>
 bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook

 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">don't ask about fake addresses</span>
 <span style="color: #9a9ea2;">;; </span>NOTE<span style="color: #9a9ea2;">: there can be only one entry per header (such as To, From)</span>
 <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">http://flex.ee.uec.ac.jp/texi/bbdb/bbdb_11.html</span>
 bbdb-ignore-some-messages-alist
 '<span style="color: #A8289C;">(</span><span style="color: #489446;">(</span> <span style="color: #489446;">"From"</span> . <span style="color: #489446;">"no.?reply</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">DAEMON</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">daemon</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">facebookmail</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">twitter"</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
And in <code>.wl</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">bbdb</span><span style="color: #2C79F5;">)</span>
</pre>
</div>


<p>
To make it work for <code>bbdb-v3</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">bbdb-wl</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span>bbdb-initialize 'wl<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
There is also <a href="https://blog.anupamsg.me/2009/08/16/importing-contacts-from-osx-addressbook-to-emacs-bbdb/">this tutorial</a> on how to import mac contacts into bbdb, I just don't bother.
</p>
</div>
</div>

<div id="outline-container-Built-in" class="outline-3">
<h3 id="Built-in"><span class="section-number-3">7.2</span> Built in</h3>
<div class="outline-text-3" id="text-7-2">
<p>
You can use the built in address book, I don't.
</p>

<p>
Hit <code>C-c C-a</code> to go into address manager, in address manager:
</p>

<dl class="org-dl">
<dt><code>c</code></dt><dd>add CC: mark</dd>
<dt><code>t</code></dt><dd>add To: mark</dd>
<dt><code>b</code></dt><dd>add Bcc: mark</dd>
<dt><code>u</code></dt><dd>cancel the marker</dd>
<dt><code>a</code></dt><dd>add entry</dd>
<dt><code>e</code></dt><dd>edit entry</dd>
<dt><code>d</code></dt><dd>delete entry</dd>
</dl>


<p>
In summary mode use <code>@</code> to add/remove/change sender to/from/in address book.
</p>

<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Address-Book">manual</a>
</p>
</div>
</div>
</div>

<div id="outline-container-Search-Mail" class="outline-2">
<h2 id="Search-Mail"><span class="section-number-2">8</span> Search Mail</h2>
<div class="outline-text-2" id="text-8">
<p>
You can use <code>notmuch</code> as a searching backend. To use <code>notmuch</code>:
</p>

<p>
Set:
</p>

<pre class="example">
(setq wl-quicksearch-folder "[]")
(setq elmo-search-default-engine 'notmuch)

</pre>

<p>
And download <code>notmuch</code> and set it up by <code>notmuch new</code>.
</p>

<p>
Then hit <code>'</code> to start a quick search.
</p>

<p>
Here is all the available <code>notmuch</code> searching patterns: <a href="https://notmuchmail.org/searching/">manual</a>.
</p>
</div>
</div>

<div id="outline-container-Auto-Refile" class="outline-2">
<h2 id="Auto-Refile"><span class="section-number-2">9</span> Auto Refile</h2>
<div class="outline-text-2" id="text-9">
<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Auto-Refile">manual</a>
</p>
</div>
</div>

<div id="outline-container-Expire-rules" class="outline-2">
<h2 id="Expire-rules"><span class="section-number-2">10</span> Expire rules</h2>
<div class="outline-text-2" id="text-10">
<p>
The expire rules are based on folders, you specific a time to expire and a destination of expiration, usually trash folder or simply remove.
</p>

<p>
But what if we don't want to expire the whole buffer? You have <a href="http://wanderlust.github.io/wl-docs/wl.html#Filter-Folder">filter folders</a> to the rescue :)
</p>

<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Expire">expire manual</a>
</p>

<p>
Example:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">expire</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-expire-alist
      `<span style="color: #A8289C;">(</span><span style="color: #489446;">(</span>,<span style="color: #DA7A48;">(</span>concat <span style="color: #489446;">"/cc:emacs-devel@gnu.org/"</span> <span style="color: #A8289C;">(</span>regexp-quote <span style="color: #489446;">".~/Mail/Gmail/Inbox"</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>date 7<span style="color: #DA7A48;">)</span> trash<span style="color: #489446;">)</span>
        <span style="color: #489446;">(</span>,<span style="color: #DA7A48;">(</span>regexp-quote <span style="color: #489446;">".~/Mail/Gmail/[Gmail]/Trivial"</span><span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>date 14<span style="color: #DA7A48;">)</span> trash<span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Other" class="outline-2">
<h2 id="Other"><span class="section-number-2">11</span> Other</h2>
<div class="outline-text-2" id="text-Other">
</div>
<div id="outline-container-Save-password" class="outline-3">
<h3 id="Save-password"><span class="section-number-3">11.1</span> Save password</h3>
<div class="outline-text-3" id="text-11-1">
<p>
Once you entered password, run <code>elmo-passwd-alis-save</code> to save password in=~/.elmo/passwd=. The password is encrypted so don't worry.
</p>
</div>
</div>

<div id="outline-container-Ignore-Crap-in-Header" class="outline-3">
<h3 id="Ignore-Crap-in-Header"><span class="section-number-3">11.2</span> Ignore Crap in Header</h3>
<div class="outline-text-3" id="text-11-2">
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-message-ignored-field-list
      '<span style="color: #A8289C;">(</span><span style="color: #489446;">"."</span><span style="color: #A8289C;">)</span>
      wl-message-visible-field-list
      '<span style="color: #A8289C;">(</span><span style="color: #489446;">"^</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">To</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">Cc</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #489446;">:"</span>
        <span style="color: #489446;">"^Subject:"</span>
        <span style="color: #489446;">"^</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">From</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">Reply-To</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #489446;">:"</span>
        <span style="color: #489446;">"^</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">Posted</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">Date</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #489446;">:"</span>
        <span style="color: #489446;">"^Organization:"</span>
        <span style="color: #489446;">"^X-</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">Face</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">-[0-9]+</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #489446;">?</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">Weather</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">Fortune</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">|</span><span style="color: #489446;">Now-Playing</span><span style="color: #2C79F5;">\\</span><span style="color: #2C79F5;">)</span><span style="color: #489446;">:"</span><span style="color: #A8289C;">)</span>
      wl-message-sort-field-list
      <span style="color: #A8289C;">(</span>append wl-message-sort-field-list
              '<span style="color: #489446;">(</span><span style="color: #489446;">"^Reply-To"</span> <span style="color: #489446;">"^Posted"</span> <span style="color: #489446;">"^Date"</span> <span style="color: #489446;">"^Organization"</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Show-folders-in-Summary-Buffer" class="outline-3">
<h3 id="Show-folders-in-Summary-Buffer"><span class="section-number-3">11.3</span> Show folders in Summary Buffer</h3>
<div class="outline-text-3" id="text-11-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-stay-folder-window t<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-X-Face" class="outline-3">
<h3 id="X-Face"><span class="section-number-3">11.4</span> X-Face</h3>
<div class="outline-text-3" id="text-11-4">
<p>
Download x-face-e21.el from <a href="http://www.jpl.org/ftp/pub/elisp/">http://www.jpl.org/ftp/pub/elisp/</a>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>autoload 'x-face-decode-message-header <span style="color: #489446;">"x-face-e21"</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">setq</span> wl-highlight-x-face-function 'x-face-decode-message-header<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
As long as <code>wl-x-face-file</code> exists, WL automatically insert X-Face into header. You can control this behavior by <code>wl-auto-insert-x-face</code>.
</p>
</div>
</div>
</div>

<div id="outline-container-Funny-Quote" class="outline-2">
<h2 id="Funny-Quote"><span class="section-number-2">12</span> Funny Quote</h2>
<div class="outline-text-2" id="text-12">
<p>
From <a href="http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html">here</a>:
</p>

<blockquote>
<p>
It's a particulary nice setup for offline-usage: whenever there's a network connection, I suck up all the mails and have them available offline.
</p>
</blockquote>

<p>
From <a href="http://mihai.bazon.net/articles/emacs/wanderlust-email-client">here</a>:
</p>

<blockquote>
<p>
Wanderlust (WL) is an email client for Emacs.  I stumbled upon it in my never ending search for an email client that doesn't suck.  Wanderlust does suck, God it does! — but I'm using it for a few days and I was tricked to think that it sucks less than others.
</p>
</blockquote>

<blockquote>
<p>
WL, like other Emacs-based email clients, is not for everyone.  Before you get into it, I think you should ask yourself two questions:
</p>

<p>
Are you an Emacs user? Do you think that all email clients suck? If you answer “yes” to exactly one of these questions, you might want to give WL a chance.  “Yes” to both questions means that WL is just what you're looking for.  If your answer is “no” to both questions, save yourself some time and stop reading now. ;-)
</p>
</blockquote>
</div>
</div>
]]></description>
<pubDate>Fri, 28 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Use Indirect Buffers</title>
<link>https://archive.casouri.cat/note/2018/use-indirect-buffers</link>
<guid>https://archive.casouri.cat/note/2018/use-indirect-buffers</guid>
<description><![CDATA[<p>
It seems that not many people know about <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Indirect-Buffers.html">indirect buffers</a> in Emacs.
</p>

<p>
Indirect buffer is basically another buffer but shares the content with the original buffer. Any change will sync instantaneously in either buffer. The good thing is, anything else are independent between the two buffer, e.g. point, selection, narrrow, etc. So you can narrow or scroll in a indirect buffer and the original buffer will be left unaffected.
</p>

<p>
<code>C-x 4 c</code> creates a indirect buffer and displays it in another window.
</p>
]]></description>
<pubDate>Wed, 12 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Basic Sorting Algorithm</title>
<link>https://archive.casouri.cat/note/2018/basic-sorting-algorithm</link>
<guid>https://archive.casouri.cat/note/2018/basic-sorting-algorithm</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Bubble-Sort">1. Bubble Sort</a></li>
<li><a href="#Selection-Sort">2. Selection Sort</a></li>
<li><a href="#Insertion-Sort">3. Insertion Sort</a></li>
<li><a href="#Shell-Sort">4. Shell Sort</a></li>
<li><a href="#Merge-Sort">5. Merge Sort</a></li>
<li><a href="#Quick-Sort">6. Quick Sort</a></li>
</ul>
</div>
</div>
<p>
<a href="file:///note/2018/basic-sorting-algorithm/sort.py">Download python source file</a>
</p>

<p>
This is my study note when following alone interactive python.
</p>

<p>
<b>Note:</b> all images are from <a href="http://interactivepython.org/courselib/static/pythonds/index.html">iteractive python</a>.
</p>

<div id="outline-container-Bubble-Sort" class="outline-2">
<h2 id="Bubble-Sort"><span class="section-number-2">1</span> Bubble Sort</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheBubbleSort.html">REF</a>
</p>
</div>

<div id="outline-container-Normal-bubble" class="outline-3">
<h3 id="Normal-bubble"><span class="section-number-3">1.1</span> Normal bubble</h3>
<div class="outline-text-3" id="text-1-1">
<p>
For each pair in the list (1&amp;2, 2&amp;3, 3&amp;4), if the former is greater than latter, swap. After one pass from 0 to n, the largest number should be in the last position. Then only n-1 numbers need to be sorted, so it perform another pass from 0 to n-1.
</p>

<p>
Therefore the time complexity is \(O(n^2)\).
</p>


<div id="org6031378" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/bubblepass.png" alt="bubblepass.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #E04E49;">def</span> <span style="color: #A8289C;">bubble</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span>:
    <span style="color: #E04E49;">for</span> last_num <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span><span style="color: #A8289C;">len</span><span style="color: #A8289C;">(</span>lis<span style="color: #A8289C;">)</span> - 1, 0, -1<span style="color: #2C79F5;">)</span>:
        <span style="color: #E04E49;">for</span> index <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span>0, last_num<span style="color: #2C79F5;">)</span>:
            <span style="color: #E04E49;">if</span> lis<span style="color: #2C79F5;">[</span>index<span style="color: #2C79F5;">]</span> &gt; <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span>index + 1<span style="color: #2C79F5;">]</span>:
                tmp = lis<span style="color: #2C79F5;">[</span>index<span style="color: #2C79F5;">]</span>
                <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">index</span><span style="color: #2C79F5;">]</span> = lis<span style="color: #2C79F5;">[</span>index + 1<span style="color: #2C79F5;">]</span>
                <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span>index + 1<span style="color: #2C79F5;">]</span> = tmp
    <span style="color: #E04E49;">return</span> lis


<span style="color: #A8289C;">alist</span> = <span style="color: #2C79F5;">[</span>54, 26, 93, 17, 77, 31, 44, 55, 20<span style="color: #2C79F5;">]</span>
bubble<span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Short-bubble" class="outline-3">
<h3 id="Short-bubble"><span class="section-number-3">1.2</span> Short bubble</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Although bubble sort wastes time swapping, it has a unique character among sorting algorithms: If it runs a pass without swapping any pair, then the list is already sorted and the program can end early.
</p>

<p>
That is good for lists that are almost sorted. The list below only need one pass.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #E04E49;">def</span> <span style="color: #A8289C;">short_bubble</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span>:
    <span style="color: #A8289C;">swapped_last_iter</span> = <span style="color: #A8289C;">True</span>
    <span style="color: #A8289C;">last_num</span> = <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span> - 1
    <span style="color: #A8289C;">iter_count</span> = 0
    <span style="color: #E04E49;">while</span> last_num <span style="color: #E04E49;">and</span> <span style="color: #A8289C;">swapped_last_iter</span>:
        iter_count += 1
        <span style="color: #E04E49;">for</span> index <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span>0, last_num<span style="color: #2C79F5;">)</span>:
            <span style="color: #E04E49;">if</span> lis<span style="color: #2C79F5;">[</span>index<span style="color: #2C79F5;">]</span> &gt; <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span>index + 1<span style="color: #2C79F5;">]</span>:
                swapped_last_iter = <span style="color: #A8289C;">True</span>
                <span style="color: #A8289C;">tmp</span> = lis<span style="color: #2C79F5;">[</span>index<span style="color: #2C79F5;">]</span>
                <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">index</span><span style="color: #2C79F5;">]</span> = lis<span style="color: #2C79F5;">[</span>index + 1<span style="color: #2C79F5;">]</span>
                <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span>index + 1<span style="color: #2C79F5;">]</span> = tmp
            <span style="color: #E04E49;">else</span>:
                swapped_last_iter = <span style="color: #A8289C;">False</span>
        <span style="color: #A8289C;">last_num</span> -= 1
    <span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>iter_count<span style="color: #2C79F5;">)</span>

<span style="color: #A8289C;">alist</span> = <span style="color: #2C79F5;">[</span>20, 30, 40, 90, 50, 60, 70, 80, 100, 110<span style="color: #2C79F5;">]</span>
short_bubble<span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-Selection-Sort" class="outline-2">
<h2 id="Selection-Sort"><span class="section-number-2">2</span> Selection Sort</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheSelectionSort.html">REF</a>
</p>

<p>
The selection sort improves on the bubble sort by making only one exchange for every pass through the list. Basically on each pass it looks for the largest number and then insert it in the proper place.
</p>

<p>
Although the time complexity of selection sort is also \(O(n^2)\), but because it makes much less exchanges, selection sort is usually faster than bubble sort.
</p>


<div id="org5f203a2" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/selection.png" alt="selection.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #E04E49;">def</span> <span style="color: #A8289C;">selection</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span>:
    <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">note that it's to 1, not 0</span>
    <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">because we only need to place n to n-1 position</span>
    <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">then 0 position will be left with the smallest number</span>
    <span style="color: #E04E49;">for</span> index_of_last_num <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span><span style="color: #A8289C;">len</span><span style="color: #A8289C;">(</span>lis<span style="color: #A8289C;">)</span> - 1, 1, -1<span style="color: #2C79F5;">)</span>:
        <span style="color: #A8289C;">index_of_max</span> = 0
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">look for max number ('s index)</span>
        <span style="color: #E04E49;">for</span> index <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span>0, index_of_last_num + 1<span style="color: #2C79F5;">)</span>:
            <span style="color: #E04E49;">if</span> lis<span style="color: #2C79F5;">[</span>index<span style="color: #2C79F5;">]</span> &gt; <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span>index_of_max<span style="color: #2C79F5;">]</span>:
                index_of_max = index
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">swap</span>
        <span style="color: #A8289C;">tmp</span> = lis<span style="color: #2C79F5;">[</span>index_of_last_num<span style="color: #2C79F5;">]</span>
        <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">index_of_last_num</span><span style="color: #2C79F5;">]</span> = lis<span style="color: #2C79F5;">[</span>index_of_max<span style="color: #2C79F5;">]</span>
        <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">index_of_max</span><span style="color: #2C79F5;">]</span> = tmp


<span style="color: #A8289C;">alist</span> = <span style="color: #2C79F5;">[</span>54, 26, 93, 17, 77, 31, 44, 55, 20<span style="color: #2C79F5;">]</span>
selection<span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Insertion-Sort" class="outline-2">
<h2 id="Insertion-Sort"><span class="section-number-2">3</span> Insertion Sort</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheInsertionSort.html">REF</a>
</p>

<p>
The insertion sort, although still \(O(n^2)\), uses shifting instead of swapping, which is more efficient. Insertion sort maintains a sorted list in the beginning of the list.
</p>

<p>
It assumes the first item of the list is sorted (sorted one item list), and then for the 2nd, 3rd, &#x2026; item, it shifts the number in the sorted list to put it into proper position.
</p>


<div id="orgdf8d5e5" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/insertion.png" alt="insertion.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #E04E49;">def</span> <span style="color: #A8289C;">insertion</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span>:
    <span style="color: #E04E49;">for</span> index_of_moving_num <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span>1, <span style="color: #A8289C;">len</span><span style="color: #A8289C;">(</span>lis<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>:
        <span style="color: #A8289C;">moving_num</span> = lis<span style="color: #2C79F5;">[</span>index_of_moving_num<span style="color: #2C79F5;">]</span>
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">this position is at the end of the sorted list</span>
        <span style="color: #A8289C;">position</span> = index_of_moving_num

        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">shift forward until reached the beginning of the list</span>
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">or found the right position</span>
        <span style="color: #E04E49;">while</span> position &gt; 0 <span style="color: #E04E49;">and</span> lis<span style="color: #2C79F5;">[</span>position - 1<span style="color: #2C79F5;">]</span> &gt; <span style="color: #A8289C;">moving_num</span>:
            <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">shift the number before back</span>
            lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">position</span><span style="color: #2C79F5;">]</span> = lis<span style="color: #2C79F5;">[</span>position - 1<span style="color: #2C79F5;">]</span>
            <span style="color: #A8289C;">position</span> -= 1

        <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">position</span><span style="color: #2C79F5;">]</span> = moving_num


<span style="color: #A8289C;">alist</span> = <span style="color: #2C79F5;">[</span>54, 26, 93, 17, 77, 31, 44, 55, 20<span style="color: #2C79F5;">]</span>
insertion<span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Shell-Sort" class="outline-2">
<h2 id="Shell-Sort"><span class="section-number-2">4</span> Shell Sort</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheShellSort.html">REF</a>
</p>

<p>
Or diminishing increment sort. It improves insertion sort by breaking a list into several sub lists and perform insertion sort on them. The key is that instead of breaking the list into continuous sub lists, shell sort chose a <i>increment</i> <code>i</code>, and choose all items <code>i</code> apart into a sub list.
</p>


<div id="orgab30c06" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/shellsortA.png" alt="shellsortA.png" />
</p>
</div>

<p>
Then by sorting these sub lists, items are closer to their right position
</p>


<div id="orgb4c617f" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/shellsortB.png" alt="shellsortB.png" />
</p>
</div>

<p>
After all sub lists are sorted, a final insertion sort sorts everything into position. Because of the earlier sub list sorting, the final sort requires less shifting.
</p>

<p>
Shell sort's time complexity often falls somewhere between \(O(n)\) and \(O(n^2)\). By changing the increment, for example using \(2k−1\), (1, 3, 7, 15, 31, and so on), a shell sort can perform at \(O(n^\frac{3}{2})\).
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #E04E49;">def</span> <span style="color: #A8289C;">gap_insertion</span><span style="color: #2C79F5;">(</span>lis, start_pos, gap<span style="color: #2C79F5;">)</span>:
    <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">same as insertion but step by sublist_count instead of 1</span>
    <span style="color: #E04E49;">for</span> index <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span>start_pos + gap, <span style="color: #A8289C;">len</span><span style="color: #A8289C;">(</span>lis<span style="color: #A8289C;">)</span>, gap<span style="color: #2C79F5;">)</span>:
        <span style="color: #A8289C;">moving_num</span> = lis<span style="color: #2C79F5;">[</span>index<span style="color: #2C79F5;">]</span>
        <span style="color: #A8289C;">position</span> = index
        <span style="color: #E04E49;">while</span> position &gt;= gap <span style="color: #E04E49;">and</span> lis<span style="color: #2C79F5;">[</span>position - gap<span style="color: #2C79F5;">]</span> &gt; <span style="color: #A8289C;">moving_num</span>:
            lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">position</span><span style="color: #2C79F5;">]</span> = lis<span style="color: #2C79F5;">[</span>position - gap<span style="color: #2C79F5;">]</span>
            <span style="color: #A8289C;">position</span> = position - gap
        <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">position</span><span style="color: #2C79F5;">]</span> = moving_num


<span style="color: #E04E49;">def</span> <span style="color: #A8289C;">shell</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span>:
    <span style="color: #A8289C;">sublist_count</span> = <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span> // 2
    <span style="color: #E04E49;">while</span> sublist_count &gt; 0:
        <span style="color: #E04E49;">for</span> start_pos <span style="color: #E04E49;">in</span> <span style="color: #A8289C;">range</span><span style="color: #2C79F5;">(</span>sublist_count<span style="color: #2C79F5;">)</span>:
            gap_insertion<span style="color: #2C79F5;">(</span>lis, start_pos, sublist_count<span style="color: #2C79F5;">)</span>
        <span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>
            <span style="color: #489446;">'Sorted sublists of number %d and list looks like'</span> % sublist_count<span style="color: #2C79F5;">)</span>
        <span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span>
        <span style="color: #A8289C;">sublist_count</span> = sublist_count // 2


<span style="color: #A8289C;">alist</span> = <span style="color: #2C79F5;">[</span>54, 26, 93, 17, 77, 31, 44, 55, 20<span style="color: #2C79F5;">]</span>
shell<span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-Merge-Sort" class="outline-2">
<h2 id="Merge-Sort"><span class="section-number-2">5</span> Merge Sort</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheMergeSort.html">REF</a>
</p>

<p>
Merge sort has to stages: in the first stage it recursively subdivides the list by half until there is only on item in each list; in the second stage it merges each sublists back and sort them in the same time.
</p>

<p>
In the first stage the list is subdivided \(\log_2 n\) times, so the time complexity is \(O(n \log n)\).
</p>


<div id="org5abd3b9" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/mergesortA.png" alt="mergesortA.png" />
</p>
</div>


<div id="orgbe16154" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/mergesortB.png" alt="mergesortB.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #E04E49;">def</span> <span style="color: #A8289C;">merge</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span>:
    <span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">"Splitting:"</span>, lis<span style="color: #2C79F5;">)</span>
    <span style="color: #E04E49;">if</span> <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span> &gt; 1:
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">split and merge</span>
        <span style="color: #A8289C;">mid</span> = <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span> // 2
        <span style="color: #A8289C;">left</span> = lis<span style="color: #2C79F5;">[</span>:mid<span style="color: #2C79F5;">]</span>
        <span style="color: #A8289C;">right</span> = lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">mid</span>:<span style="color: #2C79F5;">]</span>

        merge<span style="color: #2C79F5;">(</span>left<span style="color: #2C79F5;">)</span>
        merge<span style="color: #2C79F5;">(</span>right<span style="color: #2C79F5;">)</span>

        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">merge them</span>
        i = 0
        <span style="color: #A8289C;">j</span> = 0
        <span style="color: #A8289C;">k</span> = 0
        <span style="color: #E04E49;">while</span> i &lt; <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>left<span style="color: #2C79F5;">)</span> <span style="color: #E04E49;">and</span> j &lt; <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>right<span style="color: #2C79F5;">)</span>:
            <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">before left and right run out</span>
            <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">compare their smallest element (the first)</span>
            <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">and insert the smaller one into the main list</span>
            <span style="color: #E04E49;">if</span> left<span style="color: #2C79F5;">[</span>i<span style="color: #2C79F5;">]</span> &lt; <span style="color: #A8289C;">right</span><span style="color: #2C79F5;">[</span>j<span style="color: #2C79F5;">]</span>:
                lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">k</span><span style="color: #2C79F5;">]</span> = left<span style="color: #2C79F5;">[</span>i<span style="color: #2C79F5;">]</span>
                <span style="color: #A8289C;">i</span> += 1
            <span style="color: #E04E49;">else</span>:
                lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">k</span><span style="color: #2C79F5;">]</span> = right<span style="color: #2C79F5;">[</span>j<span style="color: #2C79F5;">]</span>
                <span style="color: #A8289C;">j</span> += 1
            <span style="color: #A8289C;">k</span> += 1
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">in case one list runs out before another,</span>
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">which is likely to happen</span>
        <span style="color: #E04E49;">while</span> i &lt; <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>left<span style="color: #2C79F5;">)</span>:
            <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">k</span><span style="color: #2C79F5;">]</span> = left<span style="color: #2C79F5;">[</span>i<span style="color: #2C79F5;">]</span>
            <span style="color: #A8289C;">i</span> += 1
            <span style="color: #A8289C;">k</span> += 1
        <span style="color: #E04E49;">while</span> j &lt; <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>right<span style="color: #2C79F5;">)</span>:
            <span style="color: #A8289C;">lis</span><span style="color: #2C79F5;">[</span><span style="color: #A8289C;">k</span><span style="color: #2C79F5;">]</span> = right<span style="color: #2C79F5;">[</span>j<span style="color: #2C79F5;">]</span>
            <span style="color: #A8289C;">j</span> += 1
            <span style="color: #A8289C;">k</span> += 1
    <span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span><span style="color: #489446;">"Merging:"</span>, lis<span style="color: #2C79F5;">)</span>

alist = <span style="color: #2C79F5;">[</span>54,26,93,17,77,31,44,55,20<span style="color: #2C79F5;">]</span>
merge<span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>

</pre>
</div>

<p>
Output:
</p>
<div class="org-src-container">
<pre class="src src-shell">Splitting: <span style="color: #2C79F5;">[</span>54, 26, 93, 17, 77, 31, 44, 55, 20<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>54, 26, 93, 17<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>54, 26<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>54<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>54<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>26<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>26<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>26, 54<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>93, 17<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>93<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>93<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>17<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>17<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>17, 93<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>17, 26, 54, 93<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>77, 31, 44, 55, 20<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>77, 31<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>77<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>77<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>31<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>31<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>31, 77<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>44, 55, 20<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>44<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>44<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>55, 20<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>55<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>55<span style="color: #2C79F5;">]</span>
Splitting: <span style="color: #2C79F5;">[</span>20<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>20<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>20, 55<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>20, 44, 55<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>20, 31, 44, 55, 77<span style="color: #2C79F5;">]</span>
Merging: <span style="color: #2C79F5;">[</span>17, 20, 26, 31, 44, 54, 55, 77, 93<span style="color: #2C79F5;">]</span>
<span style="color: #2C79F5;">[</span>17, 20, 26, 31, 44, 54, 55, 77, 93<span style="color: #2C79F5;">]</span>
</pre>
</div>

<p>
Note that slicing is \(O(k)\) where \(k\) is the size of the list. So in order to get truly \(O(n \log n)\) you need to play around with pointers, which I'm too lazy to do.
</p>
</div>
</div>

<div id="outline-container-Quick-Sort" class="outline-2">
<h2 id="Quick-Sort"><span class="section-number-2">6</span> Quick Sort</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheQuickSort.html">REF</a>
</p>

<p>
The quick sort uses divide and conquer to gain the same advantages as the merge sort, while not using additional storage. As a trade-off, however, it is possible that the list may not be divided in half. When this happens, we will see that performance is diminished.
</p>

<p>
A quick sort first selects a value, which is called the <b>pivot value</b>. Although there are many different ways to choose the pivot value, we will simply use the first item in the list. The role of the pivot value is to assist with splitting the list. The actual position where the pivot value belongs in the final sorted list, commonly called the <b>split point</b>, will be used to divide the list for subsequent calls to the quick sort.
</p>

<p>
How it works:
</p>

<ol class="org-ol">
<li>Find the <b>pivot value</b>, in this case the first element 54.</li>
<li>Put <code>leftmark</code> and <code>rightmark</code> on the first and last position of the remaining list.</li>
<li>Repeat until <code>leftmark</code> and <code>rightmark</code> cross:
<ol class="org-ol">
<li><code>leftmark</code> go right until hit a number greater than <b>pivot value</b>.</li>
<li><code>rightmark</code> go left until hit a number less than <b>pivot value</b>.</li>
<li>Swap number under <code>leftmark</code> and <code>rightmark</code>.</li>
</ol></li>
<li>Now, we consider the <code>rightmark</code> the split point, all elements to its left is smaller than <b>pivot value</b>
and all elements to it's right is greater than <b>pivot value</b>. Insert <b>pivot value</b> (54) at <code>rightmark</code>.</li>
<li>Recursively sort the two halves with above steps.</li>
</ol>


<div id="org898a5e8" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/firstsplit.png" alt="firstsplit.png" />
</p>
</div>


<div id="org23f0bf5" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/partitionA.png" alt="partitionA.png" />
</p>
</div>


<div id="org57c4e6d" class="figure">
<p><img src="/note/2018/basic-sorting-algorithm/partitionB.png" alt="partitionB.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #E04E49;">def</span> <span style="color: #A8289C;">quick</span><span style="color: #2C79F5;">(</span>lis, first=<span style="color: #A8289C;">None</span>, last=<span style="color: #A8289C;">None</span><span style="color: #2C79F5;">)</span>:
    <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">first and last default to 0 and len -1</span>
    first = 0 <span style="color: #E04E49;">if</span> first == <span style="color: #A8289C;">None</span> <span style="color: #E04E49;">else</span> first
    last = <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>lis<span style="color: #2C79F5;">)</span> - 1 <span style="color: #E04E49;">if</span> last == <span style="color: #A8289C;">None</span> <span style="color: #E04E49;">else</span> last

    <span style="color: #E04E49;">if</span> first &lt; last:
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">step 3</span>
        split_point = partition<span style="color: #2C79F5;">(</span>lis, first, last<span style="color: #2C79F5;">)</span>
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">recursively sort</span>
        quick<span style="color: #2C79F5;">(</span>lis, first, split_point - 1<span style="color: #2C79F5;">)</span>
        quick<span style="color: #2C79F5;">(</span>lis, split_point + 1, last<span style="color: #2C79F5;">)</span>

<span style="color: #E04E49;">def</span> <span style="color: #A8289C;">partition</span><span style="color: #2C79F5;">(</span>lis, first, last<span style="color: #2C79F5;">)</span>:
    pivot_value = lis<span style="color: #2C79F5;">[</span>first<span style="color: #2C79F5;">]</span>

    leftmark = first + 1
    rightmark = last

    done = <span style="color: #A8289C;">False</span>
    <span style="color: #E04E49;">while</span> <span style="color: #E04E49;">not</span> done:
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">step 3.1</span>
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">move leftmark until hit a number greater than pivot value</span>
        <span style="color: #E04E49;">while</span> leftmark &lt;= rightmark <span style="color: #E04E49;">and</span> lis<span style="color: #2C79F5;">[</span>leftmark<span style="color: #2C79F5;">]</span> &lt;= pivot_value:
            leftmark += 1
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">step 3.2</span>
        <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">move rightmark until hit a number less than pivot value.</span>
        <span style="color: #E04E49;">while</span> leftmark &lt;= rightmark <span style="color: #E04E49;">and</span> lis<span style="color: #2C79F5;">[</span>rightmark<span style="color: #2C79F5;">]</span> &gt;= pivot_value:
            rightmark -= 1

        <span style="color: #E04E49;">if</span> rightmark &lt; leftmark:
            done = <span style="color: #A8289C;">True</span>
        <span style="color: #E04E49;">else</span>:
            <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">swap</span>
            tmp = lis<span style="color: #2C79F5;">[</span>rightmark<span style="color: #2C79F5;">]</span>
            lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">rightmark</span><span style="color: #2C79F5;">]</span> = lis<span style="color: #2C79F5;">[</span>leftmark<span style="color: #2C79F5;">]</span>
            lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">leftmark</span><span style="color: #2C79F5;">]</span> = tmp

    <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">Now all numbers left of rightmark is smaller than pivot value</span>
    <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">and all numbers left of leftmark is greater than pivot value</span>
    tmp = lis<span style="color: #2C79F5;">[</span>first<span style="color: #2C79F5;">]</span> <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">pivot value</span>
    lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">first</span><span style="color: #2C79F5;">]</span> = lis<span style="color: #2C79F5;">[</span>rightmark<span style="color: #2C79F5;">]</span>
    lis<span style="color: #2C79F5;">[</span><span style="color: #A8289C;">rightmark</span><span style="color: #2C79F5;">]</span> = tmp

    <span style="color: #E04E49;">return</span> rightmark <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">return as split_point</span>


alist = <span style="color: #2C79F5;">[</span>54,26,93,17,77,31,44,55,20<span style="color: #2C79F5;">]</span>
quick<span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>alist<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
The problem with quick sort is that in worst case the pivot value so off that one sub list is of length 0 and another is of length \(n - 1\), then \(n - 2\), and so on. Then you get a time complexity of \(O(n^2)\).
</p>

<p>
To workaround this, use a technique called <b>median of three</b>: chose the first, middle and last number, and use the median.
</p>
</div>
</div>
]]></description>
<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Blog with only Org Mode</title>
<link>https://archive.casouri.cat/note/2018/blog-with-only-org-mode</link>
<guid>https://archive.casouri.cat/note/2018/blog-with-only-org-mode</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Organization">1. Organization</a></li>
<li><a href="#CSS">2. CSS</a></li>
<li><a href="#Add-UP-and-HOME-link">3. Add UP and HOME link</a></li>
<li><a href="#RSS-feeds">4. <span class="todo TODO">TODO</span> RSS feeds</a></li>
<li><a href="#Bind-Emacs-style-shortcuts">5. <span class="todo TODO">TODO</span> Bind Emacs style shortcuts</a></li>
<li><a href="#Links">6. Links</a></li>
<li><a href="#Meta-data-like-date-and-title">7. Meta data like date and title</a></li>
<li><a href="#Further-reading">8. Further reading</a></li>
</ul>
</div>
</div>
<p>
Nowadays you can choose from a handful of static blog frameworks, like hexo, pelican, etc. Most of them support Markdown, and you can use Org Mode along with them by exporting Org file to Markdown file. Some framework even has deeper integration. For example the package ox-hugo provides a dozen advanced export options and well intergrated hugo and Org Mode options/properties.
</p>

<p>
Using frameworks has some advantages and some disadvantages. On the one side, you get pretty themes, animation, dynamic(automatic) content generation, automatic publication, etc. On the other side, your cost is: learn a framework, choose from a limited selection of themes or make your own, etc.
</p>

<p>
For me, I don't need animation or pre-made themes. my blog contains few duplicated parts that need automation, and I can just write some quick snippet to handle that. Publication isn't a problem either because I host my blog in GitHub Pages. All I need is a trivial alias that commits everything and push them.
</p>

<p>
And the cost of a framework is just Too Much Trouble® for me. I tried pelican and hugo and never liked them.
</p>

<p>
Turns out that, <b>Org Mode already provides me with everything I need.</b>
The html export options in Org Mode helps build my blog with trivial effort. Plus, when building blog with plain HTML, JavaScript, CSS and Org Mode I have so much more control and flexibility. CSS is much easier because your are writing it directly to HTML, instead of some fancy tags that you don't know who defined. The blog your are currently reading from is built without any framework and looks pretty complete to me.
</p>

<p>
Below is how do I build my blog.
</p>

<div id="outline-container-Organization" class="outline-2">
<h2 id="Organization"><span class="section-number-2">1</span> Organization</h2>
<div class="outline-text-2" id="text-1">
<p>
All my blog posts are under <a href="https://archive.casouri.co.uk/note/">https://archive.casouri.co.uk/note/</a>
</p>

<div class="org-src-container">
<pre class="src src-shell">.
|-- 2018
|   |-- bindings-in-web-page
|   |   <span style="color: #ff00ff;">`-- index.org</span>
<span style="color: #ff00ff;">|   |-- blog-with-only-org-mode</span>
<span style="color: #ff00ff;">|   |   `</span>-- index.org
|   |-- fancy-startup-screen-for-emacs
|   |   |-- home.png
|   |   |-- index.html
|   |   |-- index.org
|   |   |-- moon.gif
|   |   <span style="color: #ff00ff;">`-- moon.png</span>
<span style="color: #ff00ff;">|   `</span>-- note-about-domain-and-dns
|       |-- index.html
|       <span style="color: #ff00ff;">`-- index.org</span>
<span style="color: #ff00ff;">|-- index.html</span>
<span style="color: #ff00ff;">|-- index.org</span>
<span style="color: #ff00ff;">`</span>-- style.css

5 directories, 12 files
</pre>
</div>

<p>
Each sub directory is a year, and sub directories of that are individual posts. The  <code>index.org</code> and (exported) <code>index.html</code> are the actual content. Other static contents of a page like images are under the same directory. Whenever I update an Org file, I re-export it by <code>C-c C-e h h</code>. Then commit both files. (I could have write a org publish pipeline but too lazy to do so, Magit is just too easy to use.)
</p>

<p>
Under the root directory (<code>/note/</code>), I have a style sheet, a index.org and a index.html in root directory.
<code>index.org</code> and (exported) <code>index.html</code> is my home page. Every page under <code>/note/</code> links to <code>style.css</code>.
</p>
</div>
</div>

<div id="outline-container-CSS" class="outline-2">
<h2 id="CSS"><span class="section-number-2">2</span> CSS</h2>
<div class="outline-text-2" id="text-CSS">
</div>
<div id="outline-container-Including-Custom-Style-Sheet" class="outline-3">
<h3 id="Including-Custom-Style-Sheet"><span class="section-number-3">2.1</span> Including Custom Style Sheet</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Including style sheet(s) is quite easy. In each Org file that you want to link the style sheet, insert <code>#+HTML_HEAD:</code> or <code>#+HTML_HEAD_EXTRA:</code>.
</p>

<p>
Here is what I have in my Org file:
</p>

<div class="org-src-container">
<pre class="src src-org-mode">#+HTML_HEAD: &lt;link rel="stylesheet" type="text/css" href="/note/style.css"/&gt;
#+HTML_HEAD_EXTRA: &lt;script type="text/javascript" src="/note/script.js"&gt;&lt;/script&gt;
</pre>
</div>

<p>
The first line includes the global style sheet I use for pages across my whole personal web site. The second line includes the scripting file which I will talk about later.
</p>

<p>
Inside my local <code>/note/style.css</code> I have this snippet to import my global style sheet:
</p>

<div class="org-src-container">
<pre class="src src-CSS">@import url("/style.css");
</pre>
</div>

<p>
For all the classes Org Mode uses when exporting to HTML, you can find them <a href="https://orgmode.org/manual/CSS-support.html#CSS-support">here</a>. However, that isn't the ultra complete list, the best way is probably look at the exported HTML file.
</p>

<p>
You can open the exported html file in your favorite browser and play with CSS by developer tool.
</p>
</div>
</div>

<div id="outline-container-Disable-Default-Styling" class="outline-3">
<h3 id="Disable-Default-Styling"><span class="section-number-3">2.2</span> Disable Default Styling</h3>
<div class="outline-text-3" id="text-2-2">
<p>
To turn off the default CSS styling, insert <code>#+OPTIONS: html-style:nil</code>.
</p>
</div>
</div>

<div id="outline-container-Floating-TOC-by-CSS" class="outline-3">
<h3 id="Floating-TOC-by-CSS"><span class="section-number-3">2.3</span> Floating TOC by CSS</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Put this into your custom css file and you can get a floating TOC on the right of the screen. I use <a href="https://www.w3schools.com/cssref/css3_pr_mediaquery.asp">media rule</a> so TOC only floats on desktop.
</p>
<div class="org-src-container">
<pre class="src src-CSS">@media screen and (min-width: 800px) {
    #table-of-contents  {
        position: fixed;
        top: 5%;
        right: 2%;
    }    
}
</pre>
</div>
</div>
</div>

<div id="outline-container-Image-Size" class="outline-3">
<h3 id="Image-Size"><span class="section-number-3">2.4</span> Image Size</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Because I use a MacBook, my screen shots and photos are usually enormous. It is great viewing them locally, but not so great when I put them on to the Web.
</p>

<p>
To fix those ridiculously large images, I set this rule in my CSS:
</p>

<div class="org-src-container">
<pre class="src src-CSS">img {
    max-width: 400px;
}
</pre>
</div>

<p>
and assign custom size with <code>#+ATTR_HTML: :width 100px</code> for individual images.
</p>
</div>
</div>
</div>

<div id="outline-container-Add-UP-and-HOME-link" class="outline-2">
<h2 id="Add-UP-and-HOME-link"><span class="section-number-2">3</span> Add UP and HOME link</h2>
<div class="outline-text-2" id="text-3">
<p>
If you add these options, the exported HTML page will contain the hyperlink to upper level and home page on the top of the exported web page.
</p>

<p>
I linked both <code>UP</code> and <code>HOME</code> to my home page because there isn't any other layer between each post and home page.
</p>
<div class="org-src-container">
<pre class="src src-org-mode">#+HTML_LINK_UP: /note
#+HTML_LINK_HOME: /note
</pre>
</div>
</div>
</div>

<div id="outline-container-RSS-feeds" class="outline-2">
<h2 id="RSS-feeds"><span class="section-number-2">4</span> <span class="todo TODO">TODO</span> RSS feeds</h2>
<div class="outline-text-2" id="text-4">
<p>
A blog without RSS feeds isn't complete. But Org Mode didn't have a very good way to generate RSS feeds.
</p>

<p>
<a href="https://www.wired.com/2010/02/rss_for_beginnners/">https://www.wired.com/2010/02/rss_for_beginnners/</a>
</p>
</div>
</div>

<div id="outline-container-Bind-Emacs-style-shortcuts" class="outline-2">
<h2 id="Bind-Emacs-style-shortcuts"><span class="section-number-2">5</span> <span class="todo TODO">TODO</span> Bind Emacs style shortcuts</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="https://medium.com/@melwinalm/crcreating-keyboard-shortcuts-in-javascripteating-keyboard-shortcuts-in-javascript-763ca19beb9e">https://medium.com/@melwinalm/crcreating-keyboard-shortcuts-in-javascripteating-keyboard-shortcuts-in-javascript-763ca19beb9e</a>
</p>

<p>
<a href="https://craig.is/killing/mice">https://craig.is/killing/mice</a>
</p>
</div>
</div>

<div id="outline-container-Links" class="outline-2">
<h2 id="Links"><span class="section-number-2">6</span> Links</h2>
<div class="outline-text-2" id="text-6">
<p>
Links work just like paths: <code>/</code> is the root URL, for me it is <code>arhive.casouri.co.uk</code>; relative links like <code>./</code> and <code>../</code> works just like you would expected. Since my source files (Org files) and ouput files (HTML files) are under the same directory, I don't need to worry about path differences.
</p>

<p>
Internal links works without any problem either.
<a href="#orgcc29430">This internal link to the next heding</a> works in both Org file and the exported webpage.
</p>

<p>
Internal links are inserted just like external links: hit <code>C-c C-l</code>, and insert the  heading or tag you want to link to, <code>RET</code>, insert the display name you want it to have (leave blank if you want none.)
</p>

<p>
Manual for <a href="https://orgmode.org/manual/External-links.html">external links</a> and <a href="https://orgmode.org/manual/Internal-links.html">internal links</a>
</p>
</div>
</div>

<div id="outline-container-Meta-data-like-date-and-title" class="outline-2">
<h2 id="Meta-data-like-date-and-title"><span class="section-number-2">7</span> Meta data like date and title</h2>
<div class="outline-text-2" id="text-7">
<p>
You probably already know these stuff:
</p>

<div class="org-src-container">
<pre class="src src-org-mode">#+DATE:
#+TITLE:
#+AUTHOR:
#+EMAIL:
etc
</pre>
</div>

<p>
BTW, you can insert a time stamp by <code>C-c .</code>
</p>

<p>
Check out the <a href="https://orgmode.org/manual/Export-settings.html">complete list</a>. You can use <code>C-c C-e #</code> to insert template with export options.
</p>
</div>
</div>


<div id="outline-container-Further-reading" class="outline-2">
<h2 id="Further-reading"><span class="section-number-2">8</span> Further reading</h2>
<div class="outline-text-2" id="text-8">
<p>
Checkout <a href="https://orgmode.org/manual/HTML-export.html#HTML-export">the manual</a>.
</p>
</div>
</div>
]]></description>
<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Cool URI Does not Change</title>
<link>https://archive.casouri.cat/note/2018/cool-uri-does-not-change</link>
<guid>https://archive.casouri.cat/note/2018/cool-uri-does-not-change</guid>
<description><![CDATA[<p>
I recently read this article: <a href="https://www.w3.org/Provider/Style/URI">Cool URIs don't change</a>. (found it on this <a href="https://ambrevar.xyz/blog-architecture/">blog</a>)
</p>

<p>
To summary:
</p>
<ol class="org-ol">
<li>URI (should) never change</li>
<li>As a webmaster (I like this word!) you should name URIs to last.</li>
<li>To design a ever-lasting URI:
<ul class="org-ul">
<li>What to use in URI:
<ol class="org-ol">
<li>Created time, it never changes. For example the year. Another advantage of using created year is that, when you refer back to <code>/2018/pics/</code> 200 years later, you know that it mean what <code>pic</code> means in 2018 instead of in 2218.</li>
</ol></li>
<li>What to leave out (basically anything that might change):
<ol class="org-ol">
<li>Authors name.</li>
<li>Subject. The author of the original article claims that it changes surprisingly fast.</li>
<li>Access. Like group access, personal access, public access, etc.</li>
<li>File name extension.</li>
<li>Software mechanisms. Such as <code>cgi</code>, <code>exce</code>, <code>rb</code>, etc.</li>
</ol></li>
</ul></li>
</ol>
]]></description>
<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Note About Domain and DNS</title>
<link>https://archive.casouri.cat/note/2018/note-about-domain-and-dns</link>
<guid>https://archive.casouri.cat/note/2018/note-about-domain-and-dns</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#What-Is-DNS">1. What Is DNS</a></li>
<li><a href="#Domain-Hierarchy">2. Domain Hierarchy</a></li>
<li><a href="#Some-Terminology">3. Some Terminology</a></li>
</ul>
</div>
</div>

<div id="outline-container-What-Is-DNS" class="outline-2">
<h2 id="What-Is-DNS"><span class="section-number-2">1</span> What Is DNS</h2>
<div class="outline-text-2" id="text-1">
<p>
DNS routing translates a domain name (<code>example.com</code>) to an IP address (<code>18.28.0.35</code>).
</p>
</div>
</div>

<div id="outline-container-Domain-Hierarchy" class="outline-2">
<h2 id="Domain-Hierarchy"><span class="section-number-2">2</span> Domain Hierarchy</h2>
<div class="outline-text-2" id="text-2">

<div id="orgd4cff70" class="figure">
<p><img src="//www.slashroot.in/sites/default/files/DNS%20domain%20name%20classification.png" alt="DNS%20domain%20name%20classification.png" />
</p>
</div>

<p>
Top to bottom:
</p>
<ol class="org-ol">
<li>13 root servers</li>
<li>(TLD) Top Level Domain (<code>.com .co .moe .edu .org</code>)</li>
<li>Second level domains (<code>casouri psu nintendo</code>)</li>
<li>sub domains (<code>blog archive</code>)</li>
</ol>

<p>
For example, in following domain,
</p>
<pre class="example">
archive.casouri.co.uk
</pre>

<p>
<code>co.uk</code> is the Top Level Domain, <code>casouri</code> is the secondary domain (which I bought from gandi.net),
<code>archive</code> is the sub domain (which I can create as many as I want).
</p>

<p>
Most of the Top Level Domains isn't made of two separate parts like <code>co.uk</code>, I have no idea why British made their country TLD like that.
</p>
</div>

<div id="outline-container-side-note:-dot-in-the-end-of-a-domain" class="outline-3">
<h3 id="side-note:-dot-in-the-end-of-a-domain"><span class="section-number-3">2.1</span> Side Note: dot in the end of a domain</h3>
<div class="outline-text-3" id="text-2-1">
<p>
You might have seen domains with a dot in the end:
</p>
<pre class="example">
archive.casouri.co.uk.
</pre>

<p>
This not only is a valid domain, but also a better (more concise) format than the one without the dot in the end. The ending dot is like the root directory <code>/</code>, it marks the root of the domain. And a domain with that dot in the end is considered absolute, just like an absolute path.
</p>

<p>
Similarly, a domain without an ending dot is considered relative. So I can totally add something after it like <code>archive.casouri.co.uk.what.is.this.com</code>, just like what I can do to a relative path.
</p>
</div>
</div>
</div>

<div id="outline-container-Some-Terminology" class="outline-2">
<h2 id="Some-Terminology"><span class="section-number-2">3</span> Some Terminology</h2>
<div class="outline-text-2" id="text-Some-Terminology">
</div>
<div id="outline-container-Resource-Record-(RR)" class="outline-3">
<h3 id="Resource-Record-(RR)"><span class="section-number-3">3.1</span> Resource Record (RR)</h3>
<div class="outline-text-3" id="text-3-1">
<p>
DNS resource records are basically mapping files that  tell the DNS server which IP address each domain is associated with.
</p>

<p>
Here are the most commonly used types of DNS records:
</p>

<dl class="org-dl">
<dt>A record</dt><dd>An A record maps a domain name (e.g., www.example.com) to an IP address and usually starts with www.</dd>
<dt>CNAME record</dt><dd>A Canonical Name (CNAME) is a type of record in the DNS that is used to specify that a domain name is an alias for another domain or sub domain. I used a CNAME record to link <code>archive.casouri.co.uk.</code> to <code>casouri.github.io.</code></dd>
<dt>MX record</dt><dd>A mail exchanger (MX) record refers to a resource record (RR) that routes traffic to an email server. More on <a href="https://en.wikipedia.org/wiki/MX_record">https://en.wikipedia.org/wiki/MX_record</a>.</dd>
<dt>TXT record</dt><dd>A text record (TXT record) is a type of resource record in the DNS that lets you associate plain text with a domain.</dd>
</dl>
</div>
</div>


<div id="outline-container-DNS-Zone" class="outline-3">
<h3 id="DNS-Zone"><span class="section-number-3">3.2</span> DNS Zone</h3>
<div class="outline-text-3" id="text-3-2">
<p>
A DNS zone represents a range of IP addresses in a domain name space.
</p>
</div>
</div>

<div id="outline-container-Domain-Register" class="outline-3">
<h3 id="Domain-Register"><span class="section-number-3">3.3</span> Domain Register</h3>
<div class="outline-text-3" id="text-3-3">
<p>
A domain provider, or domain name registrar, is a company or organization that manages the assignment of domain names. For me it's gandi.net.
</p>
</div>
</div>

<div id="outline-container-Name-server" class="outline-3">
<h3 id="Name-server"><span class="section-number-3">3.4</span> Name server</h3>
<div class="outline-text-3" id="text-3-4">
<p>
The server that translates domains into IP addresses.
</p>
</div>
</div>

<div id="outline-container-Zone-file" class="outline-3">
<h3 id="Zone-file"><span class="section-number-3">3.5</span> Zone file</h3>
<div class="outline-text-3" id="text-3-5">
<p>
A text file describes mapping between domain and IP.
</p>
</div>
</div>
</div>
]]></description>
<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Fancy startup screen</title>
<link>https://archive.casouri.cat/note/2018/fancy-startup-screen-for-emacs</link>
<guid>https://archive.casouri.cat/note/2018/fancy-startup-screen-for-emacs</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#Text-image">1. Text image</a></li>
<li><a href="#xpm-image">2. xpm image</a></li>
</ul>
</div>
</div>


<div id="outline-container-Text-image" class="outline-2">
<h2 id="Text-image"><span class="section-number-2">1</span> Text image</h2>
<div class="outline-text-2" id="text-1">

<div id="org62e675f" class="figure">
<p><img src="/note/2018/fancy-startup-screen-for-emacs/home.png" alt="home.png" />
</p>
</div>

<p>
I first drew the image in pixel mode in photoshop and exported it to png file:
</p>


<div id="org7516eed" class="figure">
<p><img src="/note/2018/fancy-startup-screen-for-emacs/moon.png" alt="moon.png" />
</p>
</div>

<p>
Then used a simple python script to convert this image to text. The script converts black pixel to "██" and white pixel to space:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">-*- coding: utf-8 -*-</span>

<span style="color: #E04E49;">import</span> sys

<span style="color: #E04E49;">import</span> numpy <span style="color: #E04E49;">as</span> np
<span style="color: #E04E49;">from</span> PIL <span style="color: #E04E49;">import</span> Image

<span style="color: #A8289C;">ARGV</span> = sys.argv
<span style="color: #A8289C;">DEFAULT_IMAGE_NAME</span> = <span style="color: #489446;">'image.png'</span>
<span style="color: #A8289C;">PIXEL</span> = <span style="color: #489446;">'&#9608;&#9608;'</span>
<span style="color: #A8289C;">SPACE</span> = <span style="color: #489446;">'  '</span>
<span style="color: #A8289C;">THRESH</span> = 127
<span style="color: #A8289C;">black</span> = SPACE
<span style="color: #A8289C;">white</span> = PIXEL


<span style="color: #E04E49;">if</span> <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>ARGV<span style="color: #2C79F5;">)</span> &gt; 1:
    <span style="color: #A8289C;">image_name</span> = ARGV<span style="color: #2C79F5;">[</span>1<span style="color: #2C79F5;">]</span>
<span style="color: #E04E49;">else</span>:
    image_name = DEFAULT_IMAGE_NAME

<span style="color: #E04E49;">if</span> <span style="color: #A8289C;">len</span><span style="color: #2C79F5;">(</span>ARGV<span style="color: #2C79F5;">)</span> &gt; 2:
    <span style="color: #A8289C;">cmd</span> = ARGV<span style="color: #2C79F5;">[</span>2<span style="color: #2C79F5;">]</span>
    <span style="color: #E04E49;">if</span> cmd == <span style="color: #489446;">'-i'</span>: <span style="color: #9a9ea2;"># </span><span style="color: #9a9ea2;">innvert</span>
        <span style="color: #A8289C;">black</span>, <span style="color: #A8289C;">white</span> = PIXEL, SPACE

image = Image.<span style="color: #A8289C;">open</span><span style="color: #2C79F5;">(</span>image_name<span style="color: #2C79F5;">)</span>

<span style="color: #A8289C;">width</span>, <span style="color: #A8289C;">height</span> = image.size


image = np.asarray<span style="color: #2C79F5;">(</span>image<span style="color: #2C79F5;">)</span>

text_image = <span style="color: #489446;">''</span>
<span style="color: #E04E49;">for</span> line <span style="color: #E04E49;">in</span> image:
    text_line = <span style="color: #489446;">''</span>
    <span style="color: #E04E49;">for</span> pixel <span style="color: #E04E49;">in</span> line:
        mask = pixel<span style="color: #2C79F5;">[</span>3<span style="color: #2C79F5;">]</span>
        <span style="color: #E04E49;">if</span> mask &lt; THRESH:
            text_line += black
        <span style="color: #E04E49;">else</span>:
            text_line += white
    text_image += text_line + <span style="color: #489446;">'\n'</span>


<span style="color: #E04E49;">print</span><span style="color: #2C79F5;">(</span>text_image<span style="color: #2C79F5;">)</span>
</pre>
</div>

<p>
Terminal displays:
</p>

<pre class="example">
          ████████
      ██████████████
   █████████         █
  ████████
████████
████████
████████
████████
████████
  ████████            █
  ██████████        ██
      ██████████████
          ████████
</pre>
</div>
</div>

<div id="outline-container-xpm-image" class="outline-2">
<h2 id="xpm-image"><span class="section-number-2">2</span> xpm image</h2>
<div class="outline-text-2" id="text-2">
<p>
I also made an actual image for the moon, for that I converted png file to xpm with imagemagick:
</p>

<div class="org-src-container">
<pre class="src src-shell">convert moon.png moon.xpm
</pre>
</div>

<p>
To insert the image:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #2C79F5;">(</span>overlay-put <span style="color: #A8289C;">(</span>make-overlay beg end<span style="color: #A8289C;">)</span> 'display <span style="color: #A8289C;">(</span>create-image image-path<span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
</div>
</div>
]]></description>
<pubDate>Mon, 10 Sep 2018 00:00:00 -0400</pubDate>
</item>

  </channel>
</rss>