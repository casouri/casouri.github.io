<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>The title of my RSS 2.0 Feed</title>
    <link>http://www.example.com/</link>
    <description>This is my rss 2 feed description</description>
    <lastBuildDate>Mon, 23 Sep 2019 12:01:07 -0400</lastBuildDate>
<item>
<title>Use Command bindings in Iterm for Emacs</title>
<link>https://archive.casouri.co.uk/note/2019/use-command-bindings-in-iterm-for-emacs/</link>
<guid>https://archive.casouri.co.uk/note/2019/use-command-bindings-in-iterm-for-emacs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 12:01 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Use Command bindings in Iterm for Emacs</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Use Command bindings in Iterm for Emacs</h1>
<p>
If you use mac, normally you can’t use command keys in Emacs inside a terminal as in GUI. This <a href="https://www.emacswiki.org/emacs/iTerm2#toc11">Emacs Wiki</a> page gives a tutorial on how to use your own escape sequence in iTerm and translate them into bindings in Emacs. The only problem is that you have to manually set each escape sequence in iTerm. So I never bothered. Now with the fresh 3.3.5 beta version, you can import and export key mappings in iTerm. Here is how I did it.
</p>

<p>
First we want to see what does the format looks like. I manually set a few bindings and exported it:
</p>

<pre class="example">
"0x61-0x40000":{"Text":"C-a",
"Action":11},

"0x61-0x100000":{"Text":"s-a",
"Action":10},

"0x62-0x100000":{"Text":"s-b",
"Action":10},

"0x7a-0x100000":{"Text":"s-z",
"Action":10},
</pre>

<p>
Seems that <code>0x61</code> to <code>0x7A</code> represents <code>a</code> to <code>z</code>, and <code>0x100000</code> represents the command key. Now let’s generate an entry like that. I used the same sequence as in the Wiki page: <code>[1;Pxxx</code>, I just replaced the number with the letters since that’s more clear.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(format "\"0x%X-0x100000\":{\"Text\":\"[1;P%c\", \"Action\":10}," #x61 ?a)
;;=&gt; "\"0x61-0x100000\":{\"Text\":\"[1;Pa\", \"Action\":10},"
</pre>
</div>

<p>
Looks good, now it’s time to generate all of them
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(require 'cl-lib)
(message (string-join
          (cl-loop for hex from #x61 to #x7a
                   for char from ?a to ?z
                   collect (format "\"0x%X-0x100000\":{\"Text\":\"[1;P%c\", \"Action\":10}" hex char))
          ",\n"))
</pre>
</div>

<p>
Send them to message buffer and copy &amp; paste is a lazy yet effective approach. Now we create a new file, name it <code>import.itermkeymap</code> and put our configs in.
</p>

<pre class="example">
{"Key Mappings":{
"0x61-0x100000":{"Text":"[1;Pa", "Action":10},
"0x62-0x100000":{"Text":"[1;Pb", "Action":10},
"0x63-0x100000":{"Text":"[1;Pc", "Action":10},
"0x64-0x100000":{"Text":"[1;Pd", "Action":10},
"0x65-0x100000":{"Text":"[1;Pe", "Action":10},
"0x66-0x100000":{"Text":"[1;Pf", "Action":10},
"0x67-0x100000":{"Text":"[1;Pg", "Action":10},
"0x68-0x100000":{"Text":"[1;Ph", "Action":10},
"0x69-0x100000":{"Text":"[1;Pi", "Action":10},
"0x6A-0x100000":{"Text":"[1;Pj", "Action":10},
"0x6B-0x100000":{"Text":"[1;Pk", "Action":10},
"0x6C-0x100000":{"Text":"[1;Pl", "Action":10},
"0x6D-0x100000":{"Text":"[1;Pm", "Action":10},
"0x6E-0x100000":{"Text":"[1;Pn", "Action":10},
"0x6F-0x100000":{"Text":"[1;Po", "Action":10},
"0x70-0x100000":{"Text":"[1;Pp", "Action":10},
"0x71-0x100000":{"Text":"[1;Pq", "Action":10},
"0x72-0x100000":{"Text":"[1;Pr", "Action":10},
"0x73-0x100000":{"Text":"[1;Ps", "Action":10},
"0x74-0x100000":{"Text":"[1;Pt", "Action":10},
"0x75-0x100000":{"Text":"[1;Pu", "Action":10},
"0x76-0x100000":{"Text":"[1;Pv", "Action":10},
"0x77-0x100000":{"Text":"[1;Pw", "Action":10},
"0x78-0x100000":{"Text":"[1;Px", "Action":10},
"0x79-0x100000":{"Text":"[1;Py", "Action":10},
"0x7A-0x100000":{"Text":"[1;Pz", "Action":10}
}}
</pre>

<p>
If you import this in iTerm you can see indeed all the escape sequences are set. Now we only need to tell emacs to translate those escape sequences to bindings.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(cl-loop for char from ?a to ?z
         do (define-key input-decode-map (format "\e[1;P%c" char) (kbd (format "s-%c" char))))
</pre>
</div>

<p>
And we are done.
</p>
</div>
</body>
</html>]]></description>

<pubDate>Sun, 22 Sep 2019 13:32:00 -0400</pubDate>
</item>
<item>
<title>Manage Windows in Emacs</title>
<link>https://archive.casouri.co.uk/note/2019/manage-windows-in-emacs/</link>
<guid>https://archive.casouri.co.uk/note/2019/manage-windows-in-emacs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Manage Windows in Emacs</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Manage Windows in Emacs</h1>
<p>
Managing windows in Emacs seems complicated. There exists a ton of commands and packages and the windows are still messy. From my experience, all you need is the following commands:
</p>

<dl class="org-dl">
<dt><code>windmove-up/down/left/right</code></dt><dd>Moves to the window in direction.</dd>
<dt><code>C-x 1</code></dt><dd>Expand selected window to maximum.</dd>
<dt><code>C-x 2</code></dt><dd>Split window vertically.</dd>
<dt><code>C-x 3</code></dt><dd>Split window horizontally.</dd>
<dt><code>luna-expand-window</code></dt><dd>Merge all siblings of selected window.</dd>
<dt>(requires <code>buffer-move</code>) <code>buf-move</code></dt><dd>Moves buffer to the window in direction.</dd>
<dt><code>winner-undo/redo</code></dt><dd>Go back/forward in window configuration history.</dd>
</dl>

<p>
Code for <code>luna-expand-window</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun luna-window-sibling-list (&amp;optional window)
  "Return all siblings of WINDOW or selected window."
  (let* ((parent (window-parent window))
         (win (window-child parent))
         lst)
    (while win
      (push win lst)
      (setq win (window-next-sibling win)))
    (remove (or window (selected-window)) lst)))

(defun luna-expand-window ()
  "Delete all sibling windows."
  (interactive)
  (mapc #'delete-window (luna-window-sibling-list)))
</pre>
</div>

<p>
Some related configurations:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"># always pop window to right
(setq split-height-threshold              nil
      split-width-threshold               80)
# don’t pop new frames
(setq ns-pop-up-frames nil)
</pre>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 03 Aug 2019 13:39:00 -0400</pubDate>
</item>
<item>
<title>Jump Back in Emacs</title>
<link>https://archive.casouri.co.uk/note/2019/jump-back-in-emacs/</link>
<guid>https://archive.casouri.co.uk/note/2019/jump-back-in-emacs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Jump Back in Emacs</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Jump Back in Emacs</h1>
<p>
It is annoying when you jumped to somewhere, did some operations and couldn’t find the way back and have to scroll back or jump back by searching. There are many position history packages that record your location and let you jump back in time. But in reality they either set too much anchors or didn’t set the anchor you need. Also jumping between anchors are more or less visually confusing because you have to observe where are you after each jump. In a word, the experience is not very good.
</p>

<p>
After some observation I found that the annoying situation I described above only takes place after a very limited set of commands: <code>beginning-of-buffer</code>, <code>end-of-buffer</code>, <code>helm-swoop</code>, <code>query-replace</code>, <code>replace-string</code>, <code>isearch</code>. (<code>x-ref</code> has its own jump back command.)
</p>

<p>
I wrote my jump back command that only records position before these commands, so when I invoke the jump I always know where am I going. Also, if I jump back after jumped back, I jump back to where I was before I jump back the first time ;-)
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defvar luna-jump-back-marker nil
  "Marker set for `luna-jump-back'.")

(defvar luna-jump-back-monitored-command-list
  '(isearch-forward helm-swoop isearch-backward end-of-buffer beginning-of-buffer query-replace replace-string)
  "Commands in this list sets mark before execution for jumping back later.")

(defun luna-jump-back ()
  "Jump back to previous position."
  (interactive)
  (if (not luna-jump-back-marker)
      (message "No marker set")
    ;; set `luna-jump-back-marker' to point and jump back
    ;; so we can keep jumping back and forth
    (let ((here (point-marker))
          (there luna-jump-back-marker))
      (setq luna-jump-back-marker here)
      (goto-char there))))

(defun luna-maybe-set-marker-to-jump-back ()
  "Set marker to jump back if this command is search or jump."
  (when (member this-command luna-jump-back-monitored-command-list)
    (setq luna-jump-back-marker (point-marker))))

(add-hook 'pre-command-hook #'luna-maybe-set-marker-to-jump-back)
</pre>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 03 Aug 2019 12:52:00 -0400</pubDate>
</item>
<item>
<title>Theme and Font in Emacs</title>
<link>https://archive.casouri.co.uk/note/2019/theme-and-font-in-emacs/</link>
<guid>https://archive.casouri.co.uk/note/2019/theme-and-font-in-emacs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Theme and Font in Emacs</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Theme and Font in Emacs</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org917f2a9">1. Theme</a>
<ul>
<li><a href="#org5045e92">1.1. Face</a></li>
<li><a href="#org945419e">1.2. My configuration</a></li>
</ul>
</li>
<li><a href="#orgadad1f8">2. Font</a>
<ul>
<li><a href="#orge3621b3">2.1. My configuration</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
Theme and font almost drove me nuts when I first try to configure Emacs by myself (instead of using Spacemacs). They don’t “just work”, at least for me, at that time. In this post I introduce some basic information about themes and font setting in Emacs and how do I configure them.
</p>

<div id="outline-container-org917f2a9" class="outline-2">
<h2 id="org917f2a9"><span class="section-number-2">1</span> Theme</h2>
<div class="outline-text-2" id="text-1">
<p>
A theme is basically a set of faces. You can enable (apply) a theme by <code>load-theme</code> and disable a theme by <code>disable-theme</code>. If you installed some theme but cannot find it when you invoke <code>load-theme</code>, it’s probably because the theme file is not in <code>custom-theme-load-path</code>. By default it only contains <code>user-emacs-directory</code>, a.k.a. <code>~/.emacs.d</code>.
</p>
</div>

<div id="outline-container-org5045e92" class="outline-3">
<h3 id="org5045e92"><span class="section-number-3">1.1</span> Face</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Face is the styling of a piece of text in Emacs. It controls the background color, foreground color, weight, underline, slant, etc. For more information see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Faces.html#Faces">(Info) Face</a>. A full list of available attributes see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html">(Info) Face Attributes</a>.
</p>
</div>
</div>

<div id="outline-container-org945419e" class="outline-3">
<h3 id="org945419e"><span class="section-number-3">1.2</span> My configuration</h3>
<div class="outline-text-3" id="text-1-2">
<p>
First we want to be able to toggle between several most used themes. I use two themes — a light theme and a dark theme.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defvar luna-toggle-theme-list ()
  "Themes that you can toggle bwtween by `luna-switch-theme'")

(defun luna-switch-theme ()
  "Switch between themes in `luna-toggle-theme-list'"
  (interactive)
  ;; move the fist element to last
  (let ((index (or (cl-position luna-current-theme luna-toggle-theme-list)
                   (progn (message "`luna-current-theme' is not in `luna-toggle-theme-list', default to the first one") 0)))
        (len (length luna-toggle-theme-list)))
    (luna-load-theme (nth (% (1+ index) len) luna-toggle-theme-list) t)))
</pre>
</div>

<p>
We also want a hook that run whenever theme changes. To be honest, I forgot why I add the condition case. You can remove it and see what happens.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defvar luna-load-theme-hook ()
  "Hook ran after `load-theme'")

(defun luna-run-load-theme-hook (&amp;rest _)
  "Run `luna-load-theme-hook'."
  (condition-case err
      (run-hook-with-args 'luna-load-theme-hook)
    ((error (message (error-message-string err))))))

(advice-add #'load-theme :after #'luna-run-load-theme-hook)
</pre>
</div>

<p>
Because loading a custom theme is just applying a bunch of faces, you can load multiple theme on top of each other. Therefore it doesn’t make sense to have the “curent theme”. But I never use multiple themes at once and I need to know the current theme from time to time. So I just record the last loaded theme as the “current theme”.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun luna-set-current-theme (theme &amp;rest _)
  "Adveiced before `load-theme', set `luna-current-theme' to THEME."
  (setq luna-current-theme theme))

(advice-add #'load-theme :before #'luna-set-current-theme)
</pre>
</div>

<p>
If you load theme A on startup, and switch to theme B, then shut down Emacs, next time when you start Emacs, theme A will be loaded. Intuitively you would expect theme B, so you need something to remember the theme loaded and load that theme on startup. Customize is a “beginner friendly way to configure Emacs”, but <del>everyone</del> I mostly use it as a session persistent storage.
</p>

<p>
Every time I use <code>luna-switch-theme</code> or <code>luna-load-theme</code>, the new theme is recorded.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defcustom luna-theme nil
  "The theme used on startup.
This way luanrymacs remembers the theme."
  :type 'symbol
  :group 'convenience)

(defun luna-load-theme (&amp;optional theme no-confirm no-enable)
  "Disable `luna-currnt-theme' and oad THEME.
Set `luna-theme' to THEME."
  (disable-theme luna-current-theme)
  (load-theme (or theme luna-theme (car luna-toggle-theme-list)) no-confirm no-enable)
  (when (or theme (not (custom-variable-p 'luna-theme)))
    (customize-set-variable 'luna-theme theme)))
</pre>
</div>

<p>
Then in <code>init.el</code> I simply have
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(luna-load-theme nil t)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgadad1f8" class="outline-2">
<h2 id="orgadad1f8"><span class="section-number-2">2</span> Font</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://idiocy.org/emacs-fonts-and-fontsets.html">Emacs, fonts and fontsets</a> explains how does fonts work in Emacs and how to set them.
</p>
</div>

<div id="outline-container-orge3621b3" class="outline-3">
<h3 id="orge3621b3"><span class="section-number-3">2.1</span> My configuration</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Similar to theme, I have facility to select a font to load and remember the last font loaded.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defcustom luna-font nil
  "Like `luna-theme', used to cache configuration across sessions."
  :type 'string
  :group 'convenience)

(defcustom luna-cjk-font nil
  "Like `luna-font'."
  :type 'string
  :group 'convenience)

(defvar luna-font-alist
  '((sf-mono-13 . (:family "SF Mono" :size 13)))
  "An alist of all the fonts you can switch between by `luna-load-font'.
Key is a symbol as the name, value is a plist specifying the font spec.
More info about spec in `font-spec'.")

(defvar luna-cjk-font-alist
  '((soure-han-serif-13 . (:family "Source Han Serif SC"
                                   :size 13)))
  "Similar to `luna-font-alist' but used for CJK scripts.
Use `luna-load-cjk-font' to load them.")

(defun luna-load-font (&amp;optional font-name)
  "Prompt for a font and set it.
Fonts are specified in `luna-font-alist'.

Changes are saved to custom.el in a idle timer."
  (interactive (list
                (completing-read "Choose a font: "
                                 (mapcar (lambda (cons) (symbol-name (car cons)))
                                         luna-font-alist))))

  (let* ((arg font-name)
         (font-name (or font-name luna-font))
         (font (apply #'font-spec
                      (if font-name (alist-get (intern font-name)
                                               luna-font-alist)
                        (cdar luna-font-alist)))))
    (set-frame-font font nil t)
    ;; seems that there isn't a good way to get font-object directly
    (add-to-list 'default-frame-alist `(font . ,(face-attribute 'default :font)))
    (when (or arg (not (custom-variable-p 'luna-font)))
      (customize-set-variable 'luna-font font-name))))

(defun luna-load-cjk-font (&amp;optional font-name)
  "Prompt for a font and set it.
Fonts are specified in `luna-font-alist'.

Changes are saved to custom.el in a idle timer."
  (interactive (list
                (completing-read "Choose a font: "
                                 (mapcar (lambda (cons) (symbol-name (car cons)))
                                         luna-cjk-font-alist))))
  (let* ((arg font-name)
         (font-name (or font-name luna-cjk-font))
         (font-spec (apply #'font-spec
                           (if font-name
                               (alist-get (intern font-name)
                                          luna-cjk-font-alist)
                             (cdar luna-cjk-font-alist)))))
    (dolist (charset '(kana han cjk-misc))
      (set-fontset-font t charset font-spec))
    (when (or arg (not (custom-variable-p 'luna-cjk-font)))
      (customize-set-variable 'luna-cjk-font font-name))))
</pre>
</div>

<p>
In <code>init.el</code> I write
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(luna-load-font)
(luna-load-cjk-font)
</pre>
</div>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 03 Aug 2019 11:38:00 -0400</pubDate>
</item>
<item>
<title>Display console in Emacs</title>
<link>https://archive.casouri.co.uk/note/2019/display-console-in-emacs/</link>
<guid>https://archive.casouri.co.uk/note/2019/display-console-in-emacs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Display console in Emacs</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Display console in Emacs</h1>
<p>
When editing source, let it be source code or Tex source, we usually need another session for interactive operations like shell, REPL, compile log, etc.
</p>

<p>
I want the interactive session to be associated with the source and can easily switch on and off. The result is two function: <code>toggle-console-buffer</code> and <code>toggle-console-window</code>.
</p>

<p>
I primarily work on my laptop with only one window displayed. So normally I just switch between source buffer and the console buffer (the interactive session) by <code>toggle-console-buffer</code>. In other time, I want to see the update in console buffer while working in source buffer. <code>toggle-console-window</code> switches on a dedicated window<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> on the bottom. The clever thing is, when this window is live, <code>toggle-console-buffer</code> doesn’t switch to console buffer in the main window, but jumps to the console window at the bottom.
</p>

<p>
Here is the code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defvar luna-console-buffer-alist '((emacs-lisp-mode . "*scratch*"))
  "An alist with element (major-mode . console buffer).")

(defvar-local luna-console-buffer-p nil
  "T if this buffer is a console buffer.")

(defun luna--get-console-buffer (major-mode)
  "Return the console buffer corresponding to MAJOR-MODE.
Return nil if none exists."
  (if-let ((console-buffer (alist-get major-mode luna-console-buffer-alist)))
      console-buffer
    (message "No console buffer, use `luna-set-console-buffer' to set one")
    nil))

(defun luna-toggle-console ()
  "Toggle display of console buffer.
When console window is live, jump between console window and previous window;
when console window is not live, switch between console buffer and previous buffer."
  (interactive)
  (if (window-live-p luna-console-window)
      ;; jump between console window and previous window
      (if luna-console-buffer-p
          (if-let ((win (window-parameter luna-console-window 'luna-console-jump-back)))
              (select-window win)
            (select-window (previous-window))
            (message "Could not find previous window, guess one"))
        (let ((old-window (selected-window)))
          (select-window luna-console-window)
          (set-window-parameter nil 'luna-console-jump-back old-window)))
    ;; switch between console buffer and previous buffer
    (if luna-console-buffer-p
        (previous-buffer)
      (switch-to-buffer (luna--get-console-buffer major-mode))
      (setq-local luna-console-buffer-p t))))

(defun luna-set-console-buffer (buffer)
  "Set current console buffer to BUFFER."
  (interactive "b")
  (setf (alist-get major-mode luna-console-buffer-alist)
        (get-buffer buffer)))

(defvar luna-console-window nil
  "A window at bottom dedicated to console buffer.")

(defun luna-toggle-console-window ()
  "Toggle display of console window."
  (interactive)
  (if (window-live-p luna-console-window)
      (delete-window luna-console-window)
    (when-let ((buf (luna--get-console-buffer major-mode)))
      (setq luna-console-window
            (display-buffer-at-bottom (get-buffer buf) '((window-height . 0.2)))))))
</pre>
</div>

<p>
Some note:
</p>
<ul class="org-ul">
<li>I associate the major mode of source to a single console buffer (or the buffer name). Add new associations by pushing new key-value pair to the alist:</li>
</ul>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(add-to-list 'luna-console-buffer-alist '(haskell-mode . "*haskell*"))
</pre>
</div>
<ul class="org-ul">
<li>I never use multiple frames so the above code needs adjustment to work with that. For example, <code>luna-console-window</code> should probably be a frame parameter.</li>
</ul>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
I didn’t use <code>set-window-dedicated-p</code> so it’s not really dedicated.
</p></div></div>


</div>
</div></div>
</body>
</html>]]></description>

<pubDate>Fri, 02 Aug 2019 19:08:00 -0400</pubDate>
</item>
<item>
<title>Reduce Font Loading Time in My Blog</title>
<link>https://archive.casouri.co.uk/note/2019/reduce-font-loading-time-in-my-blog/</link>
<guid>https://archive.casouri.co.uk/note/2019/reduce-font-loading-time-in-my-blog/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Reduce Font Loading Time in My Blog</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Reduce Font Loading Time in My Blog</h1>
<p>
I use Source Han Serif on my blogs. And it takes ages to load. Source Serif Pro Regular (an English font) has a size of 217 KB. Source Han Serif Regular? 23.6 MB. I have to reduce the size of the font file!
</p>

<p>
Woff2 is said to be a compressed format. Here is the <a href="https://github.com/google/woff2">girhub repo</a>.
</p>
<div class="org-src-container">
<pre class="src src-commandline">$ git clone --recursive https://github.com/google/woff2.git --depth 1
$ cd woff2
$ make clean all
$ ./woff2_compress /Users/yuan/p/casouri/misc/SourceHanSerifSC-Regular.otf
Processing /Users/yuan/p/casouri/misc/SourceHanSerifSC-Regular.otf =&gt; /Users/yuan/p/casouri/misc/SourceHanSerifSC-Regular.woff2
Compressed 23613247 to 15551008.
</pre>
</div>
<p>
After converting to woff2 format, the size is reduce to 15.6MB, still too large.
</p>

<p>
Source Han Serif covers a lot of rare glyph. Maybe cutting them out can give me a smaller file. <a href="https://github.com/fonttools/fonttools">fonttool</a> has s subcommand <code>pyftsubset</code> that produces a subset of a font file.
</p>

<div class="org-src-container">
<pre class="src src-commandline">pyftsubset ~/p/casouri/misc/SourceHanSerifSC-Regular.otf --unicode=0-7f, 3000-303f,4e00-9faf --flavor=woff2
</pre>
</div>
<p>
gives a font file with only ASCII, CJK Unified Ideographs and CJK Symbols and Punctuation, compressed to woff2 format. The reduced size is 10.9 MB. Still not good.
</p>

<p>
I need even less glyph in my font file. For that I find a file with 3500 most used Chinese glyph in it, and pass that to <code>pyftsubset</code>. (you can find the file at <a href="file:///misc/most-used-zh-char.txt">here</a>.)
</p>
<div class="org-src-container">
<pre class="src src-commandline">pyftsubset ~/p/casouri/misc/SourceHanSerifSC-Regular.otf --unicodes=0-7f,3000-303f --text-file=/Users/yuan/Desktop/most-used-zh-char.txt --flavor=woff2
</pre>
</div>
<p>
This cuts down the size to 1.7 MB. That’s still large comparing to English fonts, but I’m happy with it.
</p>

<p>
No, not really, it’s still slow, but at least it’s faster than before&#x2026; If I want it to load even faster than that, I need to generate font files that only contains the glyph of a particular page. That’s not trivial for a static site.
</p>

<p>
(Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-07-22 Mon 14:20&gt;</span></span>)
</p>

<p>
Since the Chinese fonts still takes a while to load even with the compressed size. It is best to display a default system font before the web font is loaded so the user won’t stare at empty spaces. This is done by <code>font-display</code> property. <code>font-display: swap</code> will display default font almost immediately and swap to web font one it is loaded.
</p>
</div>
</body>
</html>]]></description>

<pubDate>Mon, 15 Jul 2019 21:28:00 -0400</pubDate>
</item>
<item>
<title>Emacs，字体与字符集</title>
<link>https://archive.casouri.co.uk/note/2019/emacs-%E5%AD%97%E4%BD%93%E4%B8%8E%E5%AD%97%E4%BD%93%E9%9B%86/</link>
<guid>https://archive.casouri.co.uk/note/2019/emacs-%E5%AD%97%E4%BD%93%E4%B8%8E%E5%AD%97%E4%BD%93%E9%9B%86/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Emacs，字体与字符集</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Emacs，字体与字符集</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org22f490b">1. 设置默认字体</a></li>
<li><a href="#org7ade34b">2. 设置后备字体</a></li>
<li><a href="#org8646ba5">3. 为指定字形设置字体</a></li>
<li><a href="#org141abbc">4. 为不同字符和语言设置字体</a></li>
<li><a href="#org036d403">5. 如何检查一个字体是否已经安装</a></li>
<li><a href="#orga407c45">6. 附录</a></li>
</ul>
</div>
</div>
<hr />

<p>
<b>写在前面</b>
</p>

<p>
文章转载自<a href="https://idiocy.org/emacs-fonts-and-fontsets.html">Emacs, fonts and fontsets</a>，原作者为Alan Third。
</p>

<p>
中英文名词对照：
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">中文</th>
<th scope="col" class="org-left">English</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">文档</td>
<td class="org-left">buffer</td>
</tr>

<tr>
<td class="org-left">窗口</td>
<td class="org-left">window</td>
</tr>

<tr>
<td class="org-left">窗体</td>
<td class="org-left">frame</td>
</tr>

<tr>
<td class="org-left">字体集</td>
<td class="org-left">fontset</td>
</tr>

<tr>
<td class="org-left">字符集</td>
<td class="org-left">charset</td>
</tr>
</tbody>
</table>

<p>
以下是正文
</p>

<hr />

<p>
我一直对Emacs的字体系统不甚了解。虽然字符集明显是我很多问题的解决方案，但是我一直没法搞明白怎么用它。我打算在这篇文章里记下在Emacs里设置字体的方法。
</p>

<div id="outline-container-org22f490b" class="outline-2">
<h2 id="org22f490b"><span class="section-number-2">1</span> 设置默认字体</h2>
<div class="outline-text-2" id="text-1">
<p>
看起来在Emacs里设置默认字体有不少途径，我用的是这个：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-face-attribute 'default nil :font "Droid Sans Mono")
</pre>
</div>

<p>
这会修改默认字体集，从而为所有窗体设置字体。
</p>
</div>
</div>

<div id="outline-container-org7ade34b" class="outline-2">
<h2 id="org7ade34b"><span class="section-number-2">2</span> 设置后备字体</h2>
<div class="outline-text-2" id="text-2">
<p>
但是如果你在不同设备上用同一种字体配置，或者你选择的字体没有包括所有必
需的字形呢？Emacs默认会搜索所有字体直到找到一个包括了需要字形的字体，
但是这个过程充满偶然，并且可能很慢<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>。
</p>

<p>
Emacs允许你指定后备字体。给默认字体集设置后备字体可以这么写：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-fontset-font t nil "Courier New" nil 'append)
</pre>
</div>

<p>
第一个参数用 <code>t</code> 意味更新默认字体集。创建其他字体集并使用它们是可能的，
但是我从没成功过。所以我倾向于直接改默认字体集。第二个参数指定字形范围，
我们之后会提到。最后一个参数， <code>’append</code> ，告诉Emacs添加这个字体到字符体集的末尾，所以这个字体会在其他字体集里的字体都搜索过了以后才被搜索到。
你也可以用 <code>’prepend</code> ，这会把字体放在字体集的开头，但依然在默认字体的
后面。
</p>
</div>
</div>

<div id="outline-container-org8646ba5" class="outline-2">
<h2 id="org8646ba5"><span class="section-number-2">3</span> 为指定字形设置字体</h2>
<div class="outline-text-2" id="text-3">
<p>
回到第二个参数，指定字形范围的那个。你可以指定单独的字形、字形区间、字符集或者语言。
</p>

<p>
假设你想让😊用某个字体。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-fontset-font t ?😊 "Segoe UI Emoji")
</pre>
</div>

<p>
或者你也可以指定区间。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-fontset-font t '(?😊 . ?😎) "Segoe UI Emoji")
</pre>
</div>

<p>
你不能设置ASCII字符，Emacs不允许。
</p>
</div>
</div>

<div id="outline-container-org141abbc" class="outline-2">
<h2 id="org141abbc"><span class="section-number-2">4</span> 为不同字符和语言设置字体</h2>
<div class="outline-text-2" id="text-4">
<p>
假设你处理很多泰语，但是你的默认字体不支持泰语，或者你就是很喜欢另一个字体的泰语字符的样子。
</p>

<p>
查看 <code>script-representative-chars</code> 和 <code>list-charset-chars</code> 看看你想要的语言在不在里面，在的话就用那个名字。你也可以在一个字符上用 <code>describe-char</code> ，然后看 <b>charset</b> 或 <b>script</b> 项。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-fontset-font t 'thai "Noto Sans Thai")
</pre>
</div>

<p>
这个会给Emacs极大的加速，因为Emacs不再需要跑遍几百个字体了。
</p>

<p>
如果你需要给泰语设置一个后备字体，只需要像之前一样。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-fontset-font t 'thai "Leelawadee UI" nil 'append)
</pre>
</div>

<p>
这个的缺点是，如果你在没有你指定的字体的机器上用同样的配置，Emacs不会像之前一样搜索可用的字体，Emacs会直接给你一堆方块。不过不要担心，我们可以通过font-spec强迫Emacs搜索。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-fontset-font t 'thai (font-spec :script 'thai) nil 'append)
</pre>
</div>

<p>
你可以把随便什么放在 <code>font-spec</code> 的调用里，然后Emacs就会搜索字体，找出合适的。你也完全可以用 <code>font-spec</code> 指定一个字体。
</p>

<p>
所以现在我们完整的泰语配置看起来像这样：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-fontset-font t 'thai "Noto Sans Thai")
(set-fontset-font t 'thai "Leelawadee UI" nil 'append)
(set-fontset-font t 'thai (font-spec :script 'thai) nil 'append)
</pre>
</div>

<p>
注意你只能在某各字符区间已经有了字体配置的时候后附（append）或前置（prepend）字体，这也符合常理。一开始我以为我是往一个大的字体列表后面添加我的后备字体，而不是往一系列字体列表中的一个后面添加字体。这导致我无法理解为啥配置没有效果。
</p>
</div>
</div>

<div id="outline-container-org036d403" class="outline-2">
<h2 id="org036d403"><span class="section-number-2">5</span> 如何检查一个字体是否已经安装</h2>
<div class="outline-text-2" id="text-5">
<p>
与其依赖后备字体，你可以在使用一个字体之前检查这个字体是否已经安装。过程简单直接，因为所有已安装的字体都在 <code>font-family-list</code> <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> 里，你可以直接查看列表：
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(member "Noto Sans" (font-family-list))
</pre>
</div>
</div>
</div>

<div id="outline-container-orga407c45" class="outline-2">
<h2 id="orga407c45"><span class="section-number-2">6</span> 附录</h2>
<div class="outline-text-2" id="text-6">
<p>
我为一些语言写了后备到Noto字体的基本配置，试图提高Emacs的Hello file（ <code>C-h h</code> ）的速度。因为这些字体本身没有后备字体，如果我在没有这些字体的机器上用这个配置，那么我只会看见一地方块。但是这个估计能给你的配置一个起点。
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(set-face-attribute 'default nil :font "Droid Sans Mono")

;; Latin
(set-fontset-font t 'latin "Noto Sans")

;; East Asia: 你好, 早晨, こんにちは, 안녕하세요
;;
;; Make sure you use the right font. See
;; https://www.google.com/get/noto/help/cjk/.
;;
;; This font requires "Regular". Other Noto fonts dont.
;; ¯\_(ツ)_/¯
(set-fontset-font t 'han "Noto Sans CJK SC Regular")
(set-fontset-font t 'kana "Noto Sans CJK JP Regular")
(set-fontset-font t 'hangul "Noto Sans CJK KR Regular")
(set-fontset-font t 'cjk-misc "Noto Sans CJK KR Regular")

;; South East Asia: ជំរាបសួរ, ສະບາຍດີ, မင်္ဂလာပါ, สวัสดีครับ
(set-fontset-font t 'khmer "Noto Sans Khmer")
(set-fontset-font t 'lao "Noto Sans Lao")
(set-fontset-font t 'burmese "Noto Sans Myanmar")
(set-fontset-font t 'thai "Noto Sans Thai")

;; Africa: ሠላም
(set-fontset-font t 'ethiopic "Noto Sans Ethiopic")

;; Middle/Near East: שלום, السّلام عليكم
(set-fontset-font t 'hebrew "Noto Sans Hebrew")
(set-fontset-font t 'arabic "Noto Sans Arabic")

;;  South Asia: નમસ્તે, नमस्ते, ನಮಸ್ಕಾರ, നമസ്കാരം, ଶୁଣିବେ,
;;              ආයුබෝවන්, வணக்கம், నమస్కారం, བཀྲ་ཤིས་བདེ་ལེགས༎
(set-fontset-font t 'gujarati "Noto Sans Gujarati")
(set-fontset-font t 'devanagari "Noto Sans Devanagari")
(set-fontset-font t 'kannada "Noto Sans Kannada")
(set-fontset-font t 'malayalam "Noto Sans Malayalam")
(set-fontset-font t 'oriya "Noto Sans Oriya")
(set-fontset-font t 'sinhala "Noto Sans Sinhala")
(set-fontset-font t 'tamil "Noto Sans Tamil")
(set-fontset-font t 'telugu "Noto Sans Telugu")
(set-fontset-font t 'tibetan "Noto Sans Tibetan")
</pre>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Emacs默认的后备字体是<a href="http://users.teilar.gr/~g1951d/">Symbola</a>，所以最好安装上这个以免Emacs遍历所有字体
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
如需更多信息，查看<a href="http://ergoemacs.org/emacs/emacs_list_and_set_font.html">Xah Lee的字体配置页</a>
</p></div></div>


</div>
</div></div>
</body>
</html>]]></description>

<pubDate>Sun, 31 Mar 2019 21:27:00 -0400</pubDate>
</item>
<item>
<title>Rime输入法完全指南</title>
<link>https://archive.casouri.co.uk/note/2019/rime%E8%BE%93%E5%85%A5%E6%B3%95%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</link>
<guid>https://archive.casouri.co.uk/note/2019/rime%E8%BE%93%E5%85%A5%E6%B3%95%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Rime输入法完全指南</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Rime输入法完全指南</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org8807c41">1. 安装</a></li>
<li><a href="#orga6b52fa">2. 配置</a>
<ul>
<li><a href="#org9c9858d">2.1. <code>default.yaml</code> 和 <code>default.custom.yaml</code> 配置例子</a></li>
<li><a href="#org0786b08">2.2. <code>squirrel.yaml</code> 和 <code>squirrel.custom.yaml</code></a></li>
<li><a href="#orgc13ecc7">2.3. 输入法配置</a></li>
<li><a href="#orgf55ce53">2.4. 扩充词库</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
输入法对我来说是很重要的一个工具，它好用与否密切关系到我平时的效率和心
情。Mac自带的输入法虽然勉强可用，平时却总会出现各种小问题。听说了Rime
输入法非常牛逼，我就打算切换到这个输入法。
</p>

<p>
Rime不愧无数博客的吹嘘，确实强大，然而入门配置有个不大不小的问题：教程
难懂。倒不是说作者没有用心写教程。问题在于Rime细节挺多，作者又把教程写
得颇为琐碎，搞得理解起来有点难度。就连相关的博客也弯弯绕绕不好看懂。
</p>

<p>
我在这里记录安装和配置Rime输入法的过程，希望能帮到别人。
</p>

<div id="outline-container-org8807c41" class="outline-2">
<h2 id="org8807c41"><span class="section-number-2">1</span> 安装</h2>
<div class="outline-text-2" id="text-1">
<p>
这里是<a href="https://rime.im">官网链接</a>，直接下载安装就得。
</p>
</div>
</div>

<div id="outline-container-orga6b52fa" class="outline-2">
<h2 id="orga6b52fa"><span class="section-number-2">2</span> 配置</h2>
<div class="outline-text-2" id="text-2">
<p>
Mac配置文件都在 <code>~/Library/Rime/</code> 下。格式是yaml（我最讨厌的格式）。Rime
的配置文件挺复杂的，与其说是配置，更像是一个个脚本。目录下有这么些个文件：
</p>
<dl class="org-dl">
<dt>default.yaml</dt><dd>主要的全局配置文件，包括快捷键，符号转义之类的。比如
<code>Ctrl+`</code> 打开菜单， <code>Ctrl+n</code> 下一行，等等。</dd>
<dt>xxx.schema.yaml</dt><dd>这些是各个输入法的配置文件，相当于输入法的“源码”。
比如明月拼音的配置文件叫 <code>luna_pinyin.schema.yaml</code> 。</dd>
<dt>squirrel.yaml</dt><dd>前端配置，因为Mac前端叫squirrel，windows和linux上的
名字还不一样。这里的配置就是浮窗颜色啦，边框啦，主
题啦，这些。</dd>
<dt>xxx.dict.yaml</dt><dd>这是词库文件。</dd>
</dl>

<p>
（<a href="https://github.com/rime/home/wiki/RimeWithSchemata#rime-%E4%B8%AD%E7%9A%84%E6%95%B8%E6%93%9A%E6%96%87%E4%BB%B6%E5%88%86%E4%BD%88%E5%8F%8A%E4%BD%9C%E7%94%A8">官方解释：Rime 中的數據文件分佈及作用</a>）
</p>

<p>
上面这些文件都是不推荐用户自己改的，如果你想对它们做修改（要不然配置什
么），就要在那个目录下创建一个custom文件，比如 <code>default.custom.yaml</code>
。也就是说，格式是 <code>.yaml</code> 前面加一个 <code>.custom</code> 。
</p>

<p>
我的配置文件：
</p>
<ul class="org-ul">
<li><code>default.custom.yaml</code></li>
<li><code>squirrel.custom.yaml</code></li>
</ul>

<p>
接下来我会把这些文件都介绍一边。我建议看看自己计算机上的实际文件，这样
会有更深的理解。
</p>
</div>


<div id="outline-container-org9c9858d" class="outline-3">
<h3 id="org9c9858d"><span class="section-number-3">2.1</span> <code>default.yaml</code> 和 <code>default.custom.yaml</code> 配置例子</h3>
<div class="outline-text-3" id="text-2-1">
<p>
我们拿 <code>defualt.yaml</code> 作为例子，添加一些自己的配置。
</p>

<p>
官方教程在<a href="https://github.com/rime/home/wiki/CustomizationGuide">这里</a>，可以参考对照。
</p>

<p>
YAML的格式比较简单，它像python一样靠缩进识别数据结构：
</p>
<div class="org-src-container">
<pre class="src src-yaml">key:
  key1: value1
  key2: value2
  key3:
    - item1
    - item2
</pre>
</div>
<p>
翻译成JSON就是
</p>
<div class="org-src-container">
<pre class="src src-json">{"key": {"key1": "value1", "key2": "value2", "key3": ["iterm1", "item2"]}}
</pre>
</div>

<p>
我想设置每页候选项数为9。 <code>default.yaml</code> 里可以看到默认值是5:
</p>
<div class="org-src-container">
<pre class="src src-yaml">menu:
  page_size: 5
</pre>
</div>

<p>
在 <code>default.custom.yaml</code> 里覆盖这个设置：
</p>
<div class="org-src-container">
<pre class="src src-yaml">patch:
  menu/page_size: 9
</pre>
</div>

<p>
可以看到，格式是：
</p>
<div class="org-src-container">
<pre class="src src-yaml">patch:
  layer1/layer2: 覆盖值
</pre>
</div>

<p>
（<a href="https://github.com/rime/home/wiki/CustomizationGuide">官方完全格式</a>）
</p>

<p>
改完以后按 <code>Ctrl+Option+`</code> “重新部署”，现在是不是9个候选项了？
<a href="https://github.com/rime/home/wiki/CustomizationGuide">官方指南</a>里有不少例子，配合 <code>default.yaml</code> 食用更佳。
</p>

<p>
说一个容易掉进去的误区：
</p>

<p>
如果 <code>default.yaml</code> 里是这样：
</p>
<div class="org-src-container">
<pre class="src src-yaml">key1:
  key2: value1
  key3: value2
</pre>
</div>
<p>
你这么配置会怎么样？
</p>
<div class="org-src-container">
<pre class="src src-yaml">patch:
  key1:
    key2: value0
</pre>
</div>
<p>
结果是key1下只剩下你配置的key2，因为你覆盖了整个 <code>key1</code> ：
</p>
<div class="org-src-container">
<pre class="src src-yaml">key1:
  key2: value0
</pre>
</div>
<p>
另一方面，普通的写法
</p>
<div class="org-src-container">
<pre class="src src-yaml">patch:
  key1/key2: value0
</pre>
</div>
<p>
只会覆盖 <code>key1/key2</code> ，因此对 <code>key3</code> 没有影响：
</p>
<div class="org-src-container">
<pre class="src src-yaml">key1:
  key2: value0
  key3: value2
</pre>
</div>
</div>
</div>

<div id="outline-container-org0786b08" class="outline-3">
<h3 id="org0786b08"><span class="section-number-3">2.2</span> <code>squirrel.yaml</code> 和 <code>squirrel.custom.yaml</code></h3>
<div class="outline-text-3" id="text-2-2">
<p>
这个其实跟 <code>default.yaml</code> 一样，参考 <code>squirrel.yaml</code> 配置
<code>squirrel.custom.yaml</code> 即可。
</p>

<p>
我用的是ink主题，我很喜欢：
</p>
<div class="org-src-container">
<pre class="src src-yaml">patch:
  style/color_scheme: ink
  style/corner_radius: 2
</pre>
</div>

<p>
还可以这样：
</p>
<div class="org-src-container">
<pre class="src src-yaml">patch:
  # 只保留配色的硬核主题
  style:
    color_scheme: ink
</pre>
</div>
<p>
这样整个style层会被清空，只剩一个 <code>color_scheme</code> 的配置，也挺有意思的。
</p>
</div>
</div>

<div id="outline-container-orgc13ecc7" class="outline-3">
<h3 id="orgc13ecc7"><span class="section-number-3">2.3</span> 输入法配置</h3>
<div class="outline-text-3" id="text-2-3">
<p>
我从<a href="https://www.jianshu.com/p/b6a13061c74f">这里</a>抄了一个搜狗双拼的配置，挺好用的，感谢作者鶴。我把这个保存到
<code>sougou_shuangpin.schema.yaml</code> 。这个输入法就是把双拼字符翻译成全拼然
后用明月拼音的词库，可以从这项配置看出来
</p>
<div class="org-src-container">
<pre class="src src-yaml">translator:
  dictionary: luna_pinyin
</pre>
</div>

<p>
注意 <code>schema_id: sougou_shuangpin</code> 这一项， <code>schema_id</code> 就是这个输入法
的唯一识别id。具体怎么把这个输入法加入可选列表，官方指南里应该有写。
</p>

<p>
如果你想自己创造一个输入法，看<a href="https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md">这个文档</a>。
</p>
</div>
</div>

<div id="outline-container-orgf55ce53" class="outline-3">
<h3 id="orgf55ce53"><span class="section-number-3">2.4</span> 扩充词库</h3>
<div class="outline-text-3" id="text-2-4">
<p>
我从<a href="https://github.com/rime-aca/dictionaries">这里</a>下载了一些扩充词库。
按照REAME的指示把词库文件（那些 <code>xxx.dic.yaml</code> ）扔到
<code>~/Library/Rime/</code> 里以后，怎么让我的输入法使用这些词库呢？
</p>

<p>
拿我用的搜狗双拼输入法为例子。新建 <code>sougou_shuangpin.custom.yaml</code> 配置。
（我也可以直接在 <code>sougou_shuangpin.yaml</code> 里面改，但是为了保持配置的整洁
和模块化，还是用custom文件吧。）
</p>

<p>
在里面加入：
</p>
<div class="org-src-container">
<pre class="src src-yaml">patch:
  # 載入朙月拼音擴充詞庫
  "translator/dictionary": luna_pinyin.extended
</pre>
</div>
<p>
即可。
</p>

<p>
现在重新部署一下，然后验证一下扩展词库已经载入：
</p>
<blockquote>
<p>
輸入「一介書生」（驗證擴充詞庫之基本詞庫）、「一丈紅」
（驗證擴充詞庫之漢語大詞典詞彙）、「疑是地上霜」（驗證擴充詞庫之詩詞詞
庫）、輸入「哆啦A夢」（驗證擴充詞庫之西文詞庫，此子詞庫爲朙月拼音系列
方案專有，雙拼方案不推薦使用）。
</p>
</blockquote>

<p>
作者还说明了怎么增加自己的词库，<a href="https://github.com/rime-aca/dictionaries#%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A9%9E%E5%BA%AB">文档链接</a>。<a href="https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md#dictyaml-%E8%A9%B3%E8%A7%A3">这里</a>有词库文件的格式文档。
</p>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-04 Mon 00:19&gt; </span></span> 更新：</b>
</p>

<p>
<a href="http://tieba.baidu.com/p/4125987751">这里</a>有一个更大的扩展词库。
</p>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 02 Mar 2019 00:53:00 -0500</pubDate>
</item>
<item>
<title>MacOS Mail Configuration</title>
<link>https://archive.casouri.co.uk/note/2019/macos-mail-configuration/</link>
<guid>https://archive.casouri.co.uk/note/2019/macos-mail-configuration/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>MacOS Mail Configuration</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">MacOS Mail Configuration</h1>
<p>
I walked a big circle and end up with Mail.app. I hope this works for at least a few years. I think the source of all the pain from email clients is the bad email protocol itself, but that is not the topic today.
</p>

<p>
I have two mail account, personal Gmail account and school email account. From them I split out four smart mailboxes: notifications, emacs-bevel, news, and other.
</p>

<p>
“Notifications” contains all the notifications from merchandises: eBay, Google, Uber, Paypal, etc. “Emacs-devel” contains all the discussions on emacs-devel, I read them for fun. “News” gets all the newsletters I subscribed to. Anything else ends up in “other”.
</p>

<p>
Mails in “notifications”, “emacs-devel” and “news” are cleaned regularly, For mails in other, some I move to “notifications” and “news” (and add new rules), some I archive. Rest are cleaned, too. This way I can keep my mailbox in a reasonable size.
</p>

<p>
One worry of me is that setting the rules for the smart mail boxes is a tedious work. And I don’t think the rules are exportable and don’t think it ever will. For that I don’t have any good solution but leaving it to the future myself.
</p>

<p>
As of default font, I use Source Serif Pro (as I did every where else), it makes plain text letters on emacs-devel much more pleasant to read.
</p>

<pre class="example">
=========================== Beef zone ===========================
</pre>

<p>
Gmail hacks its “tag”s by simply creating a folder for each “tag” and copy mails across them, very nasty, especially when you are using an older mail client. Also, it does’t have an archive folder and “All Mail” is used as one by default. Oh, and the stupid “important” tagging algorithm marked every mail “important” before I know it.
</p>
</div>
</body>
</html>]]></description>

<pubDate>Mon, 28 Jan 2019 19:41:00 -0500</pubDate>
</item>
<item>
<title>Emacs Subroutine</title>
<link>https://archive.casouri.co.uk/note/2018/emacs-subroutine/</link>
<guid>https://archive.casouri.co.uk/note/2018/emacs-subroutine/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Emacs Subroutine</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Emacs Subroutine</h1>
<p>
Some goodies I found when glancing through <code>subr.el</code>:
</p>

<pre class="example">
(defalias 'beep 'ding) ;preserve lingual purity
</pre>

<pre class="example">
add-to-ordered-list
add-to-history
define-symbol-prop
locate-library
process-lines
read-char-choice
read-xxx
atomic-change-group
xxx-change-group
momentary-string-display
play-sound
subrp
track-mouse
with-temp-file
with-output-to-string
while-no-input
with-demoted-errors
combine-after-change-calls
with-file-modes
subst-char-in-string
load-history-regexp
forward-whitespace
text-clone-create
define-mail-user-agent
backtrace-frames
make-progress-reporter
with-mutex

(subr-x.el)

string-trim-left
string-trim-xxx
string-remove-prefix

(seq.el)

seq-doseq
seq-let
seq-do-indexed
seq-copy
seq-subseq
seq-drop
seq-take-while
seq-group-by
</pre>

<p>
康斯帕瓦：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun caar (x)
  "Return the car of the car of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car x)))

(defun cadr (x)
  "Return the car of the cdr of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr x)))

(defun cdar (x)
  "Return the cdr of the car of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car x)))

(defun cddr (x)
  "Return the cdr of the cdr of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr x)))

(defun caaar (x)
  "Return the `car' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (car x))))

(defun caadr (x)
  "Return the `car' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (cdr x))))

(defun cadar (x)
  "Return the `car' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (car x))))

(defun caddr (x)
  "Return the `car' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (cdr x))))

(defun cdaar (x)
  "Return the `cdr' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (car x))))

(defun cdadr (x)
  "Return the `cdr' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (cdr x))))

(defun cddar (x)
  "Return the `cdr' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (car x))))

(defun cdddr (x)
  "Return the `cdr' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (cdr x))))

(defun caaaar (x)
  "Return the `car' of the `car' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (car (car x)))))

(defun caaadr (x)
  "Return the `car' of the `car' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (car (cdr x)))))

(defun caadar (x)
  "Return the `car' of the `car' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (cdr (car x)))))

(defun caaddr (x)
  "Return the `car' of the `car' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (cdr (cdr x)))))

(defun cadaar (x)
  "Return the `car' of the `cdr' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (car (car x)))))

(defun cadadr (x)
  "Return the `car' of the `cdr' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (car (cdr x)))))

(defun caddar (x)
  "Return the `car' of the `cdr' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (cdr (car x)))))

(defun cadddr (x)
  "Return the `car' of the `cdr' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (cdr (cdr x)))))

(defun cdaaar (x)
  "Return the `cdr' of the `car' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (car (car x)))))

(defun cdaadr (x)
  "Return the `cdr' of the `car' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (car (cdr x)))))

(defun cdadar (x)
  "Return the `cdr' of the `car' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (cdr (car x)))))

(defun cdaddr (x)
  "Return the `cdr' of the `car' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (cdr (cdr x)))))

(defun cddaar (x)
  "Return the `cdr' of the `cdr' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (car (car x)))))

(defun cddadr (x)
  "Return the `cdr' of the `cdr' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (car (cdr x)))))

(defun cdddar (x)
  "Return the `cdr' of the `cdr' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (cdr (car x)))))

(defun cddddr (x)
  "Return the `cdr' of the `cdr' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (cdr (cdr x)))))
</pre>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 22 Dec 2018 19:26:00 -0500</pubDate>
</item>
<item>
<title>Mathematics Penmanship</title>
<link>https://archive.casouri.co.uk/note/2018/mathematics-penmanship/</link>
<guid>https://archive.casouri.co.uk/note/2018/mathematics-penmanship/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Mathematics Penmanship</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Mathematics Penmanship</h1>
<p>
My Calculus professor has a really nice white board writing, his letters and symbols are big and distinctive. Really nice to read overall <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. If you look at the examples, you will find that they are not necessarily beautiful, but comfortable to read.
</p>

<p>
After taking his class I try to copy his writing on to paper. It is successful except one issue: when he was writing on the board, he took his time, but sometimes when I need to spill out equations line after line on a class, the quality goes down quickly. I don't really have a solution other than to only write in the fast way when I have to, e.g., when I try to catch up.
</p>

<p>
Some comparison between “slow and nice” and “fast and raw”:
</p>


<div class="figure">
<p><img src="./writing.png" alt="writing.png" />
</p>
</div>

<p>
The rule of thumb that I come up with:
</p>
<ol class="org-ol">
<li>make letters big and clear</li>
<li>leave a good among of space between everything</li>
<li>prefer print over cursive</li>
<li>take your time (when possible)</li>
</ol>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
His board writings, notice his elaborate “a”, I don't do that.
</p>


<div class="figure">
<p><img src="./board-0.JPG" alt="board-0.JPG" />
</p>
</div>


<div class="figure">
<p><img src="./board-1.JPG" alt="board-1.JPG" />
</p>
</div>


<div class="figure">
<p><img src="./board-2.JPG" alt="board-2.JPG" />
</p>
</div>


<div class="figure">
<p><img src="./board-3.JPG" alt="board-3.JPG" />
</p>
</div>


<div class="figure">
<p><img src="./board-4.JPG" alt="board-4.JPG" />
</p>
</div>


<div class="figure">
<p><img src="./board-5.JPG" alt="board-5.JPG" />
</p>
</div>


<div class="figure">
<p><img src="./board-6.JPG" alt="board-6.JPG" />
</p>
</div></div></div>


</div>
</div></div>
</body>
</html>]]></description>

<pubDate>Sun, 09 Dec 2018 18:55:00 -0500</pubDate>
</item>
<item>
<title>Prettify Google Docs</title>
<link>https://archive.casouri.co.uk/note/2018/prettify-google-docs/</link>
<guid>https://archive.casouri.co.uk/note/2018/prettify-google-docs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Prettify Google Docs</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Prettify Google Docs</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org86e9520">1. Fonts</a></li>
<li><a href="#org4ad428d">2. Line spacing</a></li>
<li><a href="#org5dd6da8">3. Page margins</a></li>
</ul>
</div>
</div>
<p>
If you use Google Docs heavily, it is worth it to configure a nice (and simple) set of defaults that makes the document looks nice.
</p>

<div id="outline-container-org86e9520" class="outline-2">
<h2 id="org86e9520"><span class="section-number-2">1</span> Fonts</h2>
<div class="outline-text-2" id="text-1">
<p>
Use EB Garamond for body text, and Montserrat for headings 1 to 6.
</p>
</div>
</div>

<div id="outline-container-org4ad428d" class="outline-2">
<h2 id="org4ad428d"><span class="section-number-2">2</span> Line spacing</h2>
<div class="outline-text-2" id="text-2">
<p>
Use 1.15.
</p>
</div>
</div>

<div id="outline-container-org5dd6da8" class="outline-2">
<h2 id="org5dd6da8"><span class="section-number-2">3</span> Page margins</h2>
<div class="outline-text-2" id="text-3">
<p>
Go to File — Page setup, change left and right margins to 2 inches and set to default. You can also use 1 inch margins and use two columns: go to Format — Columns and set to double columns. The point is to reduce the line length.
</p>

<p>
That's all.
</p>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Wed, 05 Dec 2018 15:20:00 -0500</pubDate>
</item>
<item>
<title>科学上网</title>
<link>https://archive.casouri.co.uk/note/2018/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
<guid>https://archive.casouri.co.uk/note/2018/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>科学上网</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">科学上网</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org131ef9f">1. 安装之前</a>
<ul>
<li><a href="#org908724f">1.1. 查询时间</a></li>
</ul>
</li>
<li><a href="#orgfbf10ae">2. 配置</a>
<ul>
<li><a href="#orgbf39f19">2.1. 客户端配置</a></li>
<li><a href="#org49f0288">2.2. UUID</a></li>
<li><a href="#orgd3247a6">2.3. 服务器配置</a></li>
<li><a href="#org9b2d358">2.4. 日志配置</a></li>
</ul>
</li>
<li><a href="#org5fb2543">3. 运行</a>
<ul>
<li><a href="#org748bc38">3.1. Arch 服务器</a></li>
<li><a href="#orgce58d29">3.2. Mac客户端</a></li>
<li><a href="#org50dbf0e">3.3. iOS客户端</a></li>
<li><a href="#org59191e3">3.4. 安卓客户端</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
一些笔记
</p>

<hr />

<p>
软件：<a href="https://github.com/v2ray">V2ray</a>
</p>

<p>
教程资源：<a href="https://toutyrater.github.io">V2Ray 配置指南</a>。作者文笔不错，解释清晰易懂。
</p>

<p>
<a href="https://www.v2ray.com/developer/protocols/vmess.html">☞ 官方文档</a>
</p>

<div id="outline-container-org131ef9f" class="outline-2">
<h2 id="org131ef9f"><span class="section-number-2">1</span> 安装之前</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org908724f" class="outline-3">
<h3 id="org908724f"><span class="section-number-3">1.1</span> 查询时间</h3>
<div class="outline-text-3" id="text-1-1">
<p>
V2ray要求客户端与服务端时间相差2分钟以内（自动转化时区）。
</p>
<div class="org-src-container">
<pre class="src src-shell">date -R
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgfbf10ae" class="outline-2">
<h2 id="orgfbf10ae"><span class="section-number-2">2</span> 配置</h2>
<div class="outline-text-2" id="text-2">
<p>
从配置指南和官方文档中复制而来，有一些修改。
</p>
</div>
<div id="outline-container-orgbf39f19" class="outline-3">
<h3 id="orgbf39f19"><span class="section-number-3">2.1</span> 客户端配置</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">
<pre class="src src-javascript">{
  "inbounds": [
    {
      "port": 1080, // 客户端的端口
      "protocol": "socks", // 入口协议为 SOCKS 5
      "domainOverride": ["tls","http"],
      "settings": {
        "auth": "noauth"  //socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "vmess", // 出口协议
      "settings": {
        "vnext": [
          {
            "address": "serveraddr.com", // 服务器地址，一般为IP地址
            "port": 16823,  // 服务器端口
            "users": [
              {
                "id": "b831381d-6324-4d53-ad4f-8cda48b30811",  // 用户 ID，必须与服务器端配置相同
                "alterId": 64 // 此处的值也应当与服务器相同
              }
            ]
          }
        ]
      }
    }
  ]
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org49f0288" class="outline-3">
<h3 id="org49f0288"><span class="section-number-3">2.2</span> UUID</h3>
<div class="outline-text-3" id="text-2-2">
<p>
生成uuid。uuid承担类似密码的功能。
</p>

<div class="org-src-container">
<pre class="src src-shell">/proc/sys/kernel/random/uuid
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd3247a6" class="outline-3">
<h3 id="orgd3247a6"><span class="section-number-3">2.3</span> 服务器配置</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">
<pre class="src src-javascript">{
  "inbounds": [
    {
      "port": 16823, // 服务器监听端口
      "protocol": "vmess",    // 主传入协议
      "settings": {
        "clients": [
          {
            "id": "b831381d-6324-4d53-ad4f-8cda48b30811",  // 用户 ID，客户端与服务器必须相同
            "alterId": 64
          }
        ]
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",  // 主传出协议
      "settings": {}
    }
  ]
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org9b2d358" class="outline-3">
<h3 id="org9b2d358"><span class="section-number-3">2.4</span> 日志配置</h3>
<div class="outline-text-3" id="text-2-4">
<div class="org-src-container">
<pre class="src src-javascript">{
  "log": {
    "loglevel": "warning", // 日志级别
    "access": "D:\\v2ray\\access.log",  // 这是 Windows 系统的路径
    "error": "D:\\v2ray\\error.log"
  },
}
</pre>
</div>

<p>
引用自配置指南：
</p>

<blockquote>
<p>
loglevel：日志级别，分别有5个，本例中设定的是 warning
</p>

<p>
debug：最详细的日志信息，专用于软件调试
</p>

<p>
info：比较详细的日志信息，可以看到 V2Ray 详细的连接信息
</p>

<p>
warning：警告信息。轻微的问题信息，经我观察 warning 级别的信息大多是网络错误。推荐使用 warning
</p>

<p>
error：错误信息。比较严重的错误信息。当出现 error 时该问题足以影响 V2Ray 的正常运行
</p>

<p>
none：空。不记录任何信息
</p>

<p>
access：将访问的记录保存到文件中，这个选项的值是要保存到的文件的路径
</p>

<p>
error：将错误的记录保存到文件中，这个选项的值是要保存到的文件的路径
</p>

<p>
error、access 字段留空，并且在手动执行 V2Ray 时，V2Ray 会将日志输出在 stdout 即命令行中（terminal、cmd 等），便于排错
</p>
</blockquote>
</div>
</div>
</div>

<div id="outline-container-org5fb2543" class="outline-2">
<h2 id="org5fb2543"><span class="section-number-2">3</span> 运行</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org748bc38" class="outline-3">
<h3 id="org748bc38"><span class="section-number-3">3.1</span> Arch 服务器</h3>
<div class="outline-text-3" id="text-3-1">
<p>
<code>systemd</code> 默认的配置文件地址在 <code>/etc/v2ray/config.json</code> 。 软链接或者直接修改文件。
</p>

<p>
开启/运行用 <code>systemd</code> 就好：
</p>
<div class="org-src-container">
<pre class="src src-shell">systemctl start/stop/restart v2ray
systemctl status v2ray
</pre>
</div>
</div>
</div>

<div id="outline-container-orgce58d29" class="outline-3">
<h3 id="orgce58d29"><span class="section-number-3">3.2</span> Mac客户端</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Homebrew的v2ray叫v2ray-core。安装以后默认的配置文件地址在 <code>/usr/local/etc/v2ray/config.json</code> ，同样，软链接或者直接替换文件都可以。
因为配置文件在默认地址，启动只需要
</p>
<div class="org-src-container">
<pre class="src src-shell">brew services start v2ray-core
</pre>
</div>
<p>
并且之后会开机自动运行。
</p>

<p>
打开System Preference - Network - Location （顶部） - Edit Locations，
添加一个VPN的location。这样之后可以在顶部状态栏快速切换VPN和直连（最左Apple图标 -
Locaion）。
</p>

<p>
在新的Location里打开Advanced - Proxies - SOCKS5 Proxy - SOCKS5 Proxy Server，按Mac客户端的配置文件填，之前的例子里是 <code>127.0.0.1:16823</code> 。IP地址 <code>127.0.0.1</code> 一般不会变，改端口号就可以。
</p>

<p>
修改完成后保存。启动客户端并把Location改为新的就可以科学上网了。
</p>
</div>
</div>

<div id="outline-container-org50dbf0e" class="outline-3">
<h3 id="org50dbf0e"><span class="section-number-3">3.3</span> iOS客户端</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Kitsunebi Lite，手动配置地址，端口和UUID，其他保持默认即可。
</p>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2019-05-19 Sun&gt; </span></span> 更新</b> ：Kitsunebi Lite下架又上了一个$5的Kitsunebi，太坑爹，现在建议用Shadowrocket，图标是小火箭。
</p>
</div>
</div>

<div id="outline-container-org59191e3" class="outline-3">
<h3 id="org59191e3"><span class="section-number-3">3.4</span> 安卓客户端</h3>
<div class="outline-text-3" id="text-3-4">
<p>
<a href="https://github.com/2dust/v2rayNG/releases">V2rayNG</a>，配置方法和iOS一样。
</p>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 01 Dec 2018 19:28:00 -0500</pubDate>
</item>
<item>
<title>Jumping Around in Emacs</title>
<link>https://archive.casouri.co.uk/note/2018/jumping-around-in-emacs/</link>
<guid>https://archive.casouri.co.uk/note/2018/jumping-around-in-emacs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Jumping Around in Emacs</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Jumping Around in Emacs</h1>
<p>
TBC
</p>
</div>
</body>
</html>]]></description>

<pubDate>Sun, 09 Dec 2018 18:34:00 -0500</pubDate>
</item>
<item>
<title>Organize Life with Org Mode</title>
<link>https://archive.casouri.co.uk/note/2018/organize-life-with-org-mode/</link>
<guid>https://archive.casouri.co.uk/note/2018/organize-life-with-org-mode/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Organize Life with Org Mode</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Organize Life with Org Mode</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org46177f5">1. Some references</a></li>
<li><a href="#orgb2baf63">2. Org Agenda</a>
<ul>
<li><a href="#orgc69ed27">2.1. <span class="todo TODO">TODO</span> s</a></li>
<li><a href="#org0850f80">2.2. Agenda view</a></li>
<li><a href="#orgf19155c">2.3. Bindings</a></li>
</ul>
</li>
<li><a href="#org673917e">3. Org Capture</a></li>
</ul>
</div>
</div>

<div id="outline-container-org46177f5" class="outline-2">
<h2 id="org46177f5"><span class="section-number-2">1</span> Some references</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html">https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgb2baf63" class="outline-2">
<h2 id="orgb2baf63"><span class="section-number-2">2</span> Org Agenda</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-orgc69ed27" class="outline-3">
<h3 id="orgc69ed27"><span class="section-number-3">2.1</span> <span class="todo TODO">TODO</span> s</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Set a todo file:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-agenda-files (list moon-todo-file))
</pre>
</div>

<p>
Set some TODO keywords:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-todo-keywords
      '((sequence "TODO"
                  "NEXT"
                  "START"
                  "WAIT"
                  "DEFER"
                  "|"
                  "DONE"
                  "CANCEL")))
</pre>
</div>

<p>
Keywords after the bar is considered finished state. I set a custom "defer" face so it doesn't stand out (as it shouldn't):
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-todo-keyword-faces
      '(("DEFER" . (:inherit default :weight bold))))
</pre>
</div>
</div>
</div>

<div id="outline-container-org0850f80" class="outline-3">
<h3 id="org0850f80"><span class="section-number-3">2.2</span> Agenda view</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Add a custom view:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-agenda-custom-commands
      '(("d" "Default Agenda View"
         ((agenda "")
          (todo ""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
                 (org-agenda-overriding-header "Unscheduled/deadline tasks:")))))))
</pre>
</div>

<p>
This view skips todo entries that are marked "scheduled" and "deadline", because they appear in agenda view already. My current agenda looks like
</p>
<pre class="example">
Week-agenda (W51):
Monday     17 December 2018 W51
  Other:      Scheduled:  DONE [#A] Write to professors
Tuesday    18 December 2018
Wednesday  19 December 2018
Thursday   20 December 2018
Friday     21 December 2018
Saturday   22 December 2018
Sunday     23 December 2018

===================================================================================
Unscheduled/deadline tasks:
  Other:      TODO [#A] resend pencil to sister alice
  Emacs:      TODO blog on org agenda
  Emacs:      DEFER moon shape based on day in month
  Emacs:      TODO Revise magic-font-book
  School:     WAIT Rent house for Spring
  Other:      TODO album list
  Other:      TODO 汉服资料
  Other:      TODO 完成财产目录
  Other:      TODO 完成好东西目录
  Other:      TODO Read about Maude programming lang
  Other:      TODO blog about uikit
  Other:      TODO blog about lodge skillet
  Other:      TODO read http://www.paulgraham.com/rootsoflisp.html
  Other:      TODO 用Common Lisp实现照片日志系统，ditch Apple Notes
  Other:      TODO blog: shrink code font size, fix code wrap
  Other:      TODO read art of meta
  Other:      TODO read on lisp
  Other:      TODO read GEB (book)
  Other:      TODO read little typer
  Other:      TODO [#C] take photo for album arts
  Other:      DEFER [#C] collapse for blog
  Other:      DEFER [#C] Embroidery
  Other:      DEFER [#C] twitter cwraler
</pre>

<p>
Noticed the <code>[#A]</code>'s? They are priorities. (<a href="https://orgmode.org/manual/Priorities.html">manual node</a>)
I set custom faces to them:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-priority-faces
      '((?A . (:inherit font-lock-warning-face))
        (?B . (:inherit default))
        (?C . (:inherit font-lock-comment-face))))
</pre>
</div>

<p>
You can also add categories to you todo headers, <code>Emacs</code>, <code>Other</code>, <code>School</code> are my categories. Categories are just header properties, this is the "Emacs" header of my TODO file.
</p>
<div class="org-src-container">
<pre class="src src-org-mode">* Emacs
  :PROPERTIES:
 :CATEGORY: Emacs
 :END:
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf19155c" class="outline-3">
<h3 id="orgf19155c"><span class="section-number-3">2.3</span> Bindings</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Some useful default bindings:
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>C-c C-s</code></td>
<td class="org-left">schedule</td>
</tr>

<tr>
<td class="org-left"><code>C-c C-d</code></td>
<td class="org-left">set deadline</td>
</tr>

<tr>
<td class="org-left"><code>S-&lt;left&gt;/&lt;right&gt;</code></td>
<td class="org-left">shift TODO state</td>
</tr>

<tr>
<td class="org-left"><code>t</code> (in agenda)</td>
<td class="org-left">toggle TODO state</td>
</tr>

<tr>
<td class="org-left"><code>S-&lt;up&gt;/&lt;down&gt;</code></td>
<td class="org-left">shift priorities</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-org673917e" class="outline-2">
<h2 id="org673917e"><span class="section-number-2">3</span> Org Capture</h2>
<div class="outline-text-2" id="text-3">
<p>
I use it to quickly add entries to my TODO file. Here is my setup:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-default-notes-file "~/note/index.org")
(setq org-capture-templates
      (append org-capture-templates
              `(("t" "TODOs")
                ("te" "Emacs" entry (file+olp "~/note/todo.org" "Emacs") "*** TODO %?")
                ("th" "Homework" entry (file+olp "~/note/todo.org" "Homework") "*** TODO %?")
                ("to" "Other" entry (file+olp "~/note/todo.org" "Other") "*** TODO %?")
                ("ts" "School" entry (file+olp "~/note/todo.org" "School") "*** TODO %?")
                )))
</pre>
</div>

<p>
<code>org-capture-templates</code>'s documentation is easy to follow, the <code>file+olp</code> part is like <code>(file+olp file-path header1 sub-header2 sub-sub-header3 ...)</code>.
</p>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Mon, 26 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>Blog Re-layout</title>
<link>https://archive.casouri.co.uk/note/2018/blog-re-layout/</link>
<guid>https://archive.casouri.co.uk/note/2018/blog-re-layout/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Blog Re-layout</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Blog Re-layout</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org9bcae78">1. End</a></li>
<li><a href="#orgb8a0f83">2. Beginning</a></li>
<li><a href="#org91ef588">3. Middle</a>
<ul>
<li><a href="#orgd5ba234">3.1. Hyper links</a></li>
<li><a href="#orgee137b6">3.2. Font</a></li>
<li><a href="#org7ffa253">3.3. Readability</a></li>
<li><a href="#orgbd9350c">3.4. Headers</a></li>
<li><a href="#org1966799">3.5. Mobile and tablet</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-org9bcae78" class="outline-2">
<h2 id="org9bcae78"><span class="section-number-2">1</span> End</h2>
<div class="outline-text-2" id="text-1">
<p>
(Open in new tab to see enlarged image)
</p>


<div class="figure">
<p><img src="./before-desktop.png" alt="before-desktop.png" />
</p>
</div>

<p>
↑ before
</p>

<p>
↓ after
</p>


<div class="figure">
<p><img src="./after-desktop.png" alt="after-desktop.png" />
</p>
</div>

<p>
<a href="./more-comparison.html">☞ More comparison</a>
</p>
</div>
</div>

<div id="outline-container-orgb8a0f83" class="outline-2">
<h2 id="orgb8a0f83"><span class="section-number-2">2</span> Beginning</h2>
<div class="outline-text-2" id="text-2">
<p>
I found a really interesting and informative online book about typography: <a href="https://practicaltypography.com">Practical Typography</a>.
The book talks about how to use symbols, fonts, page layout, and much more.
</p>

<p>
As professional writers and publishers for our own writing,
it is important for me and you to make typography of our document right<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>.
I recommend you to read through it.
The book is short, and the writer made it a fun read.
</p>
</div>
</div>

<div id="outline-container-org91ef588" class="outline-2">
<h2 id="org91ef588"><span class="section-number-2">3</span> Middle</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-orgd5ba234" class="outline-3">
<h3 id="orgd5ba234"><span class="section-number-3">3.1</span> Hyper links</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Initially I use underline on hyperlinks,
but in the <a href="https://practicaltypography.com/underlining.html">underlineing</a> chapter of the book,
the author suggests to shift away from underline links.
</p>

<p>
My first attempt is to go to apple.com and copy what they do with hyperlinks:
no underline except when mouse hovers on it and with blue color.
It has a little problem:
Apple.com is much more colorful than my blog;
using color for links is fine for them, but the blue links stand out a bit
too much for me.
</p>

<p>
The book itself uses small caps for links. I hated it when reading the book.
Because I'm not a native English speaker,
small caps is hard for me to read and reading them is uncomfortable.
So I'm definitely not using that.
</p>

<p>
Then I tried bold. However, Baskerville(the font I was using) has a super thick bold.
Bold links stand out even more than blue links and are much harder to read.
</p>

<p>
Now it seems I need a font with more weight options. I went out and installed
Source Serif Pro, one of the free fonts that the book approves.
</p>

<p>
Turns out the semi bold didn't work for me, either. But semi light did.
</p>

<p>
Until this point I'm still undecided between blue and semi light.
For now I uses semi light (as you might see, if I didn't change it).
</p>

<p>
Here is my configuration on links:
</p>
<div class="org-src-container">
<pre class="src src-css">:link, :visited {
    color: black;
    font-weight: 200;
    text-decoration: none;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-orgee137b6" class="outline-3">
<h3 id="orgee137b6"><span class="section-number-3">3.2</span> Font</h3>
<div class="outline-text-3" id="text-3-2">
<p>
My font setup:
</p>

<div class="org-src-container">
<pre class="src src-css">@font-face {
    font-family: "Source Serif Pro";
    src: url("./misc/SourceSerifPro-Black.otf");
    font-weight: 900;
}
@font-face {
    font-family: "Source Serif Pro";
    src: url("./misc/SourceSerifPro-BlackIt.otf");
    font-weight: 900;
    font-style: italic;
}

...

</pre>
</div>
</div>
</div>

<div id="outline-container-org7ffa253" class="outline-3">
<h3 id="org7ffa253"><span class="section-number-3">3.3</span> Readability</h3>
<div class="outline-text-3" id="text-3-3">
<p>
I shortened the line length, increased font size and line spacing.
Now there are fewer information (words) per page but it is much more
readable.
</p>
</div>
</div>

<div id="outline-container-orgbd9350c" class="outline-3">
<h3 id="orgbd9350c"><span class="section-number-3">3.4</span> Headers</h3>
<div class="outline-text-3" id="text-3-4">
<p>
I removed the bold type on all headers and shrinked their font size.
I also added more blank above each header.
</p>

<div class="org-src-container">
<pre class="src src-css">h1, h2, h3, h4, h5, h6, dt {
    font-family: Courier, Monospace;
    font-weight: normal;
}

h2, h3, h4, h5, h6 {
    margin-top: 40pt;
}

h1 {
    font-size: 28pt;
    margin-bottom: 40pt;
}

h2 {
    font-size: 17pt;
}

h3 {
    font-size: 16.5pt;
}

h4, h5, h6 {
    font-size: 16pt;
}
</pre>
</div>

<p>
UPDATE <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-12-05 Wed&gt;</span></span>:
</p>

<p>
I changed the header font to <a href="https://fonts.google.com/specimen/Montserrat?selection.family=Montserrat">Montserrat</a> and increases headings' font size a bit:
</p>

<div class="org-src-container">
<pre class="src src-css">h1, h2, h3, h4, h5, h6, dt {
    font-family: "Montserrat", Courier, Monospace;
    font-weight: normal;
}

h2, h3, h4, h5, h6 {
    margin-top: 40pt;
}

div#table-of-contents h2 {
    margin-top: 25px;
}

h1 {
    font-size: 28pt;
    margin-bottom: 40pt;
}

h2 {
    font-size: 20pt;
}

h3 {
    font-size: 18pt;
}

h4, h5, h6 {
    font-size: 17pt;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org1966799" class="outline-3">
<h3 id="org1966799"><span class="section-number-3">3.5</span> Mobile and tablet</h3>
<div class="outline-text-3" id="text-3-5">
<p>
I also added support for tablets. Now tablets have noticeable margins like desktop does.
I also added a little bit margin for mobile.
</p>

<p>
Check out <a href="./more-comparison.html">more comparison</a> for tablet and mobile.
</p>

<div class="org-src-container">
<pre class="src src-css">/* desktop, tablet landscape */
@media screen and (min-width: 1025px) {
    /* floating TOC */
    #table-of-contents  {
        font-size: 14pt;
        bottom: 0;
        position: fixed;
        overflow-y: scroll;
        overflow-x: wrap;
        top: 5%;
        left: 2%;
        width: 20%;
    }
    body {
        margin-left: 30%;
        margin-right: 20%;
        width: 50%;
    }
}

/* tablet, protrait */
@media screen and (min-width: 768px) and (max-width: 1024px) {
    body {
        margin-left: 20%;
        margin-right: 10%;
        font-size: 14pt;
    }
}

/* mobile */
@media screen and (max-width: 767px) {
    body {
        font-size: 14pt;
        margin-left: 7%;
        margin-right: 7%;
    }
}
</pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
IMO, “right” means the document is pleasing to read and effective
in displaying messages.
</p></div></div>


</div>
</div></div>
</body>
</html>]]></description>

<pubDate>Sat, 17 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>Blog in Org Mode, Revisited</title>
<link>https://archive.casouri.co.uk/note/2018/blog-in-org-mode-revisited/</link>
<guid>https://archive.casouri.co.uk/note/2018/blog-in-org-mode-revisited/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Blog in Org Mode, Revisited</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Blog in Org Mode, Revisited</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org4a9a0e4">1. Why no frameworks?</a></li>
<li><a href="#org52520e0">2. Style</a></li>
<li><a href="#org5726c45">3. Implementation</a>
<ul>
<li><a href="#org8b4c0de">3.1. File structure</a></li>
<li><a href="#org61e93f6">3.2. Links</a></li>
<li><a href="#orgd8d0ea1">3.3. Template (sort of)</a></li>
<li><a href="#org5e6a9ce">3.4. TOC</a></li>
<li><a href="#org6a7d811">3.5. Head line</a></li>
<li><a href="#orgb23fb7e">3.6. RSS</a></li>
<li><a href="#orgb332517">3.7. Tag filters for index page</a></li>
<li><a href="#org8192fb0">3.8. Publish</a></li>
<li><a href="#org01788d4">3.9. Other CSS tricks</a></li>
<li><a href="#orgd5744da">3.10. Misc</a></li>
<li><a href="#org1c7f478">3.11. Filter code</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
I have an <a href="../blog-with-only-org-mode/index.html">earlier post</a> about the same subject.
Since then, a lot of things have changed, so I decide to revisit the topic and talk about
my improved work flow.
This post is a super set of the earlier one, so there is no need to check that out.
</p>

<p>
The source file of my blog at the time writing can be found <a href="https://github.com/casouri/casouri.github.io/tree/a709fe637823ea317bd127569220e945c5abfdc5/note">here</a>.
</p>

<div id="outline-container-org4a9a0e4" class="outline-2">
<h2 id="org4a9a0e4"><span class="section-number-2">1</span> Why no frameworks?</h2>
<div class="outline-text-2" id="text-1">
<p>
Personally, I don't like those static site generates, e.g. Hexo, Pelican, Hugo, Jekyll.
Each one of them requires you to learn the framework and set it up correctly.
It feels like too much work and complexity for a simple static site.
</p>

<p>
On the other hand, when directly exporting HTML files from Org files,
you have the full control of the whole process. And customizing is often trivial.
</p>

<p>
I'll demonstrate how I build my blog with Org Mode and CSS,
and let you decide whether to do the same.
</p>
</div>
</div>

<div id="outline-container-org52520e0" class="outline-2">
<h2 id="org52520e0"><span class="section-number-2">2</span> Style</h2>
<div class="outline-text-2" id="text-2">
<p>
I want my blog to be in the old school style like 90's hypertext pages.
Some example includes <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html">Emacs Lisp Reference Manual</a>, <a href="https://www.w3.org/Provider/Style/">Style Guide for online hypertext</a>, <a href="https://web.stanford.edu/class/cs166/">CS166 of Stanford</a>.
The simplicity, elegance and plain coolness (what's that?) really attract me, and I hope you, too.
</p>

<p>
Don't get me wrong, modern web pages like <a href="https://www.apple.com">apple.com</a> are beautiful, too.
But they are complicated and hard to maintain.
I don't feel like spending all the time to make a beautiful animated site
while the time could be used to generate better contents.
Plus I prefer the "old style" anyway.
</p>
</div>
</div>

<div id="outline-container-org5726c45" class="outline-2">
<h2 id="org5726c45"><span class="section-number-2">3</span> Implementation</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org8b4c0de" class="outline-3">
<h3 id="org8b4c0de"><span class="section-number-3">3.1</span> File structure</h3>
<div class="outline-text-3" id="text-3-1">
<p>
The file structure of my blog, root directory is <a href="https://archive.casouri.co.uk/note/">https://archive.casouri.co.uk/note/</a>
</p>

<ul class="org-ul">
<li><code>index.org</code>: the Org file for the <a href="../../index.html">index page</a></li>
<li><code>index.html</code>: the exported <a href="../../index.html">index page</a></li>
<li><code>setup.org</code>: my setup file (kind of like template) for Org Mode export</li>
<li><code>style.css</code>: the style sheet for all the pages</li>
<li><code>script.js</code>: the script file for all the pages. Currently I don't have anything in there.</li>
<li>year(e.g. 2918)
<ul class="org-ul">
<li>post: each post is in a separate directory
<ul class="org-ul">
<li><code>index.org</code>: the Org file</li>
<li><code>index.html</code>: the exported HTML file</li>
<li>other static files used in the page</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-org61e93f6" class="outline-3">
<h3 id="org61e93f6"><span class="section-number-3">3.2</span> Links</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Because I want my site to work both online and on disk (that is, you can download the site to disk
and view it the same), I use relative links everywhere.
</p>

<p>
One inconvenience is that I can't use link that points to a directory anymore: say <code>./2018/mypost/</code>.
Instead, I need to explicitly write out the file: <code>./2018/mypost/index.html</code>.
This looks a little bit dangerous, but should be OK.
</p>

<p>
For internal links, just use the headline name of the headline you want to reference as the link.
So
</p>
<code>[[Template (Sorf of)][Headline below me]]</code>
<p>
will point to the headline below.
</p>
</div>
</div>

<div id="outline-container-orgd8d0ea1" class="outline-3">
<h3 id="orgd8d0ea1"><span class="section-number-3">3.3</span> Template (sort of)</h3>
<div class="outline-text-3" id="text-3-3">
<p>
This is my template:
</p>

<div class="org-src-container">
<pre class="src src-org">#+OPTIONS: html-style:nil
#+HTML_HEAD: &lt;link rel="stylesheet" type="text/css" href="../../style.css"/&gt;
#+HTML_HEAD_EXTRA: &lt;script type="text/javascript" src="../../script.js"&gt;&lt;/script&gt;
#+HTML_HEAD_EXTRA: &lt;link rel="icon" type="image/png" href="../../../favicon.png"&gt;
#+HTML_LINK_UP: ../../index.html
#+HTML_LINK_HOME: ../../index.html
#+OPTIONS: toc:2
</pre>
</div>

<p>
It is called setup file in Org Mode.
In <code>index.org</code> file of each post, there is a line <code>#+SETUPFILE: ../../setup.org</code>.
When Org exports the file, it first loads the setup file (<code>setup.org</code>),
and environment set by that file will be used when exporting the post.
You can think of it as adding these lines to every Org file before exporting.
</p>

<p>
The purpose of each line:
</p>

<div class="org-src-container">
<pre class="src src-org">#+OPTIONS: html-style:nil
</pre>
</div>

<p>
ꜛ disable the default styling that Org HTML exporter uses. I style my blog in my own CSS file.
</p>

<div class="org-src-container">
<pre class="src src-org">#+HTML_HEAD: &lt;link rel="stylesheet" type="text/css" href="../../style.css"/&gt;
</pre>
</div>

<p>
ꜛ Link to my style sheet.
</p>

<div class="org-src-container">
<pre class="src src-org">#+HTML_HEAD_EXTRA: &lt;script type="text/javascript" src="../../script.js"&gt;&lt;/script&gt;
</pre>
</div>

<p>
ꜛ Link to my script file.
</p>

<div class="org-src-container">
<pre class="src src-org">#+HTML_HEAD_EXTRA: &lt;link rel="icon" type="image/png" href="../../../favicon.png"&gt;
</pre>
</div>

<p>
ꜛ Link to my favicon.
</p>

<div class="org-src-container">
<pre class="src src-org">#+HTML_LINK_UP: ../../index.html
#+HTML_LINK_HOME: ../../index.html
</pre>
</div>

<p>
ꜛ Add UP and HOME link to head line. <a href="#org6a7d811">See more below</a>.
</p>

<div class="org-src-container">
<pre class="src src-org">#+OPTIONS: toc:2
</pre>
</div>

<p>
ꜛ Collect down to the second level header for TOC.
</p>
</div>
</div>

<div id="outline-container-org5e6a9ce" class="outline-3">
<h3 id="org5e6a9ce"><span class="section-number-3">3.4</span> TOC</h3>
<div class="outline-text-3" id="text-3-4">
<p>
On narrow screens, the table of content will simply be on top of the body.
On wider screens, I made it to float on the right.
If you are reading this post on a PC, you can probably see it.
</p>

<p>
It is achieved by this CSS snippet:
</p>

<div class="org-src-container">
<pre class="src src-css">@media screen and (min-width: 800px) {
    /* floating TOC */
    #table-of-contents  {
        font-size: 12pt;
        bottom:0;
        position:fixed;
        overflow-y:scroll;
        overflow-x:hidden;
        top: 5%;
        right: 2%;
        width: 20%;
    }
    /* centered content */
    body {
        margin-left: 10%;
        margin-right: 30%;
        /* this way floating TOC wouldn't touch content */
        width: 58%;
    }
}
</pre>
</div>

<p>
You can see that on wider screens, the content only occupies 60% (actually 58%) of the width of the screen.
</p>

<p>
For the TOC, <code>overflow-y:scroll;</code> makes TOC scroll able in case TOC is height is larger than the screen height.
</p>
</div>
</div>

<div id="outline-container-org6a7d811" class="outline-3">
<h3 id="org6a7d811"><span class="section-number-3">3.5</span> Head line</h3>
<div class="outline-text-3" id="text-3-5">
<blockquote>
<p>
Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-18 Sun&gt;</span></span>:
</p>

<p>
I made all pages to have the modified headline. See <a href="#org8192fb0">below</a>.
</p>
</blockquote>


<p>
The head line is the strip on the very top of each page.
Specifically the line <code>UP | HOME</code> on posts and <code>UP | HOME               RSS | Source | License</code>
on the <a href="../../index.html">index page</a>.
</p>

<p>
The normal behavior of it is <code>UP | HOME</code>.
Org HTML exporter adds this head line when you have
</p>
<div class="org-src-container">
<pre class="src src-org">#+HTML_LINK_UP: path-up-a-level
#+HTML_LINK_HOME: path-to-home
</pre>
</div>
<p>
in your setup.
As you have already seen, I have these configured in my setup file.
</p>

<p>
For the <a href="../../index.html">index page</a>, however, I hacked it a little bit.
In <code>index.org</code> of the <a href="../../index.html">index page</a>, I have this snippet in the end of the file:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"># Local Variables:
# org-html-home/up-format: "&lt;div id=\"org-div-home-and-up-index-page\"&gt; &lt;div&gt; &lt;a accesskey=\"h\" href=\"%s\"&gt; UP &lt;/a&gt; | &lt;a accesskey=\"H\" href=\"%s\"&gt; HOME &lt;/a&gt; &lt;/div&gt; &lt;div&gt; &lt;a href=\"./index.xml\"&gt; RSS &lt;/a&gt; | &lt;a href=\"https://github.com/casouri/casouri.github.io\"&gt; Source &lt;/a&gt; | &lt;a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"&gt; License &lt;/a&gt; &lt;/div&gt; &lt;/div&gt;"
# End:
</pre>
</div>

<p>
That is a <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Variables.html">file local variable</a>, it sets <code>org-html-home/up-format</code> to
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;div id="org-div-home-and-up-index-page"&gt;
  &lt;div&gt;
    &lt;a accesskey="h" href="../home/index.html"&gt; UP &lt;/a&gt;
    |
    &lt;a accesskey="H" href="../home/index.html"&gt; HOME &lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;a href="./index.xml"&gt; RSS &lt;/a&gt;
    |
    &lt;a href="https://github.com/casouri/casouri.github.io"&gt; Source &lt;/a&gt;
    |
    &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/"&gt; License &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre>
</div>

<p>
and in effect, injects <code>RSS | Source | License</code> part into the format.
</p>

<p>
To make the two part align with either side,
I set the style of <code>org-div-home-and-up-index-page</code> as
</p>

<div class="org-src-container">
<pre class="src src-css">div#org-div-home-and-up-index-page {
    /* headline */
    display: flex;
    justify-content: space-between;
}
</pre>
</div>

<p>
See <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">here</a> for more on CSS flex box.
</p>
</div>
</div>

<div id="outline-container-orgb23fb7e" class="outline-3">
<h3 id="orgb23fb7e"><span class="section-number-3">3.6</span> RSS</h3>
<div class="outline-text-3" id="text-3-6">
<p>
RSS feed is an essential part of a blog.
However, Org Mode doesn't make it easy to add one for my blog.
</p>

<p>
Some references that helped me along the way:
</p>

<ul class="org-ul">
<li><a href="https://www.brautaset.org/articles/2018/org-mode-rss.html">Creating an RSS feed with Org mode</a></li>
<li><a href="https://orgmode.org/worg/dev/org-export-reference.html">Org Export Reference Documentation</a></li>
<li><a href="https://validator.w3.org/feed/docs/rss2.html">RSS 2.0 SPECIFICATION</a></li>
<li><a href="https://orgmode.org/manual/Macro-replacement.html">Macro replacement</a></li>
</ul>

<p>
I use a modified <a href="https://code.orgmode.org/bzg/org-mode/src/master/contrib/lisp/ox-rss.el">ox-rss.el</a> to generate RSS file.
As its name suggests, it is a contrib package for Org Mode,
so you need to download it first.
</p>
</div>

<div id="outline-container-orgaeb94ae" class="outline-4">
<h4 id="orgaeb94ae"><span class="section-number-4">3.6.1</span> What does <code>ox-rss.el</code> do</h4>
<div class="outline-text-4" id="text-3-6-1">
<p>
<code>ox-rss.el</code> exports each first-level header in the current file
to an entry of RSS file. The description of each entry is
whatever inside the header.
</p>

<p>
It adds <code>ID</code>, <code>PUBDATE</code> to each header if none exists.
<code>ID</code> is a pointer to the header so it can build a link that points to the header in RSS file.
This is not useful for me because each headline in the <a href="../../index.html">index page</a> is really just a link to my post
with a short description. The actual content is not there.
For that matter, I use <code>RSS_PERMALINK</code> to set the link manually.
<code>PUBDATE</code> is the publication date of the post.
</p>

<p>
So a header will look like this (the backslash on the first line is for escaping asterisk after it):
</p>

<pre class="example">
\* [[./2018/this-is-my-post/index.html][This Is My Post]] :COOL:
:PROPERTIES:
  :ID: some-id-afnoef73r3rb3rv3l
  :PUBDATE: &lt;2018-11-16 Fri&gt;
  :RSS_PERMALINK: https://archive.casouri.co.uk/note/2018/this-is-my-post/index.html
:END:
This is my post. It's cool.
</pre>

<p>
Some issues:
</p>
<ol class="org-ol">
<li>That's a lot of typing</li>
<li>I'm repeating the path to my post and the root url of my blog, that's not <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>.</li>
<li>I have <code>DATE</code> set in each post's <code>index.org</code>. And I don't feel like manually typing them here.
That isn't <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>, either.</li>
</ol>

<p>
On top of that, <code>ox-rss</code> does something not so good with <code>RSS_PERMALINK</code>:
it prefixes my link with path of UP or HOME if they exists.
In my case they do, and the final url becomes
<code>../index.htmlhttps://archive.casouri.co.uk/note/path/to/my/post/index.html</code>.
</p>
</div>
</div>

<div id="outline-container-org70f5073" class="outline-4">
<h4 id="org70f5073"><span class="section-number-4">3.6.2</span> My modification</h4>
<div class="outline-text-4" id="text-3-6-2">
<p>
I don't want to modify the default behavior of <code>ox-rss.el</code>,
so I added two properties — <code>RSS_BASE_URL</code> and <code>RSS_RELATIVE_LINK</code>.
And modified the source of <code>ox-rss.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; In `org-rss-headline'
(let (...
      (hl-rel (org-element-property :RSS_RELATIVE_LINK headline))
      (url-base (org-element-property :RSS_URL_BASE headline)))
...
(publink
 (or (and hl-rel url-base (concat url-base hl-rel))
     (and hl-perm (concat (or hl-home hl-pdir) hl-perm))
     (concat
      (or hl-home hl-pdir)
      (file-name-nondirectory
       (file-name-sans-extension
	(plist-get info :input-file))) "." htmlext "#" anchor))) htmlext "#" anchor))))
</pre>
</div>

<p>
And the header would look like
</p>

<pre class="example">
\* [[./2018/this-is-my-post/index.html][This Is My Post]] :COOL:
  :PROPERTIES:
  :ID: some-id-afnoef73r3rb3rv3l
  :PUBDATE: &lt;2018-11-16 Fri&gt;
  :RSS_BASE_URL: https://archive.casouri.co.uk/note/
  :RSS_RELATIVE_LINK: 2018/this-is-my-post/index.html
  :END:
This is my post. It's cool.
</pre>
</div>
</div>

<div id="outline-container-org4bd9805" class="outline-4">
<h4 id="org4bd9805"><span class="section-number-4">3.6.3</span> Macro make it DRY</h4>
<div class="outline-text-4" id="text-3-6-3">
<p>
It works now, but the issues 1, 2, 3 are still not resolved.
For that, we can use a macro to do the typing for us.
</p>

<p>
With macro <code>post</code>, above text shrinks to
</p>
<pre class="example">
{{{post(This Is My Post,2018/this-is-my-post/,:COOL:)}}}
This is my post. It's cool.
</pre>

<p>
I have a command<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> to type even that for me,
so all I need is type the title: "This Is My Post".
</p>

<p>
The <a href="https://orgmode.org/manual/Macro-replacement.html">macro</a><sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> is defined as:
</p>

<pre class="example">
#+MACRO: post (eval (format "* [[./$2index.html][$1]] $3\n  :PROPERTIES:\n  :RSS_RELATIVE_LINK: $2\n  :RSS_URL_BASE: https://archive.casouri.co.uk/note/\n  :PUBDATE: %s\n  :END:" (let ((buffer (find-file-noselect "$2index.org")) date) (setq date (with-current-buffer buffer (plist-get (car (cdr (car (plist-get (org-export-get-environment) :date)))) :raw-value))) (kill-buffer buffer) date)))
</pre>

<p>
I know looks like heap of crap, here is the code prettied:
<code>$1</code> is the first argument — the title,
<code>$2</code> is the path, <code>$3</code> are the tags.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(eval
 (format "* [[./$2index.html][$1]] $3
  :PROPERTIES:
  :RSS_RELATIVE_LINK: $2
  :RSS_URL_BASE: https://archive.casouri.co.uk/note/
  :PUBDATE: %s
  :END:"
         (let ((buffer (find-file "$2index.org"))
               date)
           (setq date (with-current-buffer
                          (plist-get
                           (car
                            (cdr
                             (car
                              (plist-get
                               (org-export-get-environment)
                               :date))))
                           :raw-value)))
           (kill-buffer buffer)
           date)))
</pre>
</div>

<p>
The <code>(with-current-buffer ...)</code> part opens the post's <code>index.org</code> file and extracts the date out.
</p>
</div>
</div>
</div>

<div id="outline-container-orgb332517" class="outline-3">
<h3 id="orgb332517"><span class="section-number-3">3.7</span> Tag filters for index page</h3>
<div class="outline-text-3" id="text-3-7">
<p>
(Updated on <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-18 Sun&gt;</span></span>)
</p>

<p>
I have tags on the right of each header on the <a href="../../index.html">index page</a>.
You can't click them, though.
</p>

<p>
Normally when a blog has tags, you can click one,
and it brings you to a page listing all the posts with that tag.
I didn't go along with that approach, but make a filter button for each tag.
Selecting and de-selecting each tag will hide and show posts with that particular tag
on the index page.
It's pretty cool.
</p>

<p>
Initially I made the buttons to have three states: <code>include</code>, <code>noselect</code>, and <code>exclude</code>.
<code>include</code> and <code>noselect</code> are normal selecting and de=selecting.
<code>excluede</code> means “don't show posts with this tag,
not even when the post has a tag that is in <code>include</code> state”.
</p>

<p>
I figure it would probably confuse people and it's use case is pretty limited;
so I removed it.
</p>

<p>
The idea is, each time a button is clicked, toggle it's state (implemented with class attribute)
and add/remove it from "included tags list" (initial every tag is in the list).
Then scan through the DOM and display/hide according to "included tags list".
</p>

<p>
I put the HTML, CSS and JavaScript in <a href="#org1c7f478">3.11</a>.
</p>
</div>
</div>

<div id="outline-container-org8192fb0" class="outline-3">
<h3 id="org8192fb0"><span class="section-number-3">3.8</span> Publish</h3>
<div class="outline-text-3" id="text-3-8">
<p>
(Updated on <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-18 Sun&gt;</span></span>)
</p>

<p>
I write this publish function so I don't need to export by hand.
The function only export when org file is newer than html file.
</p>

<p>
Another benefit of publish function is that I can add custom environment
variables before export. I set <code>org-html-home/up-format</code> and <code>org-html-postamble-format</code>
to custom values.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defvar moon-org-html-postamble-format
  '(("en" "&lt;p class=\"author\"&gt;Written by %a &lt;%e&gt;&lt;/p&gt;
&lt;p class=\"first-publish\"&gt;First Published on %d&lt;/p&gt;
&lt;p class-\"last-modified\"&gt;Last modified on %C&lt;/p&gt;")))

(defvar moon-org-html-home/up-format
  "&lt;div id=\"org-div-home-and-up-index-page\"&gt;
&lt;div&gt;
&lt;a accesskey=\"h\" href=\"%s\"&gt; UP &lt;/a&gt; |
&lt;a accesskey=\"H\" href=\"%s\"&gt; HOME &lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=\"./index.xml\"&gt; RSS &lt;/a&gt; |
&lt;a href=\"https://github.com/casouri/casouri.github.io\"&gt; Source &lt;/a&gt; |
&lt;a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"&gt; License &lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;")

(defvar moon-publish-root-dir "~/p/casouri/note/")

(require 'f)

(defun moon/publish (&amp;optional force)
  "Publish my blog.
If FORCE is non-nil, only export when org file is newer than html file."
  (interactive)
  (dolist (dir (f-directories moon-publish-root-dir))
    (dolist (post-dir (f-directories dir))
      (moon-html-export post-dir force)))
  (require 'ox-rss)
  (moon-html-export moon-publish-root-dir force)
  (let ((buffer (find-file (expand-file-name "index.org" moon-publish-root-dir))))
    (with-current-buffer buffer
      (org-rss-export-to-rss))
    (kill-buffer buffer)))

(defun moon-html-export (dir &amp;optional force)
  "Export index.org to index.html in DIR is the latter is older.
If FORCE is non-nil, only export when org file is newer than html file."
  (moon-load-theme 'doom-one-light)
  (let ((org-html-postamble-format moon-org-html-postamble-format)
        (org-html-postamble t)
        (org-html-home/up-format moon-org-html-home/up-format)
        (org-file (expand-file-name "index.org" dir))
        (html-file (expand-file-name "index.html" dir)))
    (when (or force (file-newer-than-file-p org-file html-file))
      (let ((buffer (find-file org-file)))
        (with-current-buffer buffer
          (org-html-export-to-html))
        (kill-buffer))))
  (moon-load-theme 'doom-cyberpunk))

</pre>
</div>
</div>
</div>

<div id="outline-container-org01788d4" class="outline-3">
<h3 id="org01788d4"><span class="section-number-3">3.9</span> Other CSS tricks</h3>
<div class="outline-text-3" id="text-3-9">
</div>
<div id="outline-container-org6f05a88" class="outline-4">
<h4 id="org6f05a88"><span class="section-number-4">3.9.1</span> Code block</h4>
<div class="outline-text-4" id="text-3-9-1">
<div class="org-src-container">
<pre class="src src-css">code, .example, .src {
    padding: 3px;
    background-color: #F4F6F6;
    font-size: 12pt;
    overflow-x: scroll;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb3b264f" class="outline-4">
<h4 id="orgb3b264f"><span class="section-number-4">3.9.2</span> Tags</h4>
<div class="outline-text-4" id="text-3-9-2">
<div class="org-src-container">
<pre class="src src-css">span.tag span {
    /* headline tags */
    font-size: 12pt;
    border-width: 2px;
    border-style: solid;
}
code {
    white-space: nowrap;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org9f98a58" class="outline-4">
<h4 id="org9f98a58"><span class="section-number-4">3.9.3</span> Footnote</h4>
<div class="outline-text-4" id="text-3-9-3">
<div class="org-src-container">
<pre class="src src-css">.footdef {
    /* make footnote number and content to be on th same line */
    display: flex;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-orge837fa6" class="outline-4">
<h4 id="orge837fa6"><span class="section-number-4">3.9.4</span> Image size</h4>
<div class="outline-text-4" id="text-3-9-4">
<p>
I limit the image size to 600px width:
</p>
<div class="org-src-container">
<pre class="src src-css">img {
    max-width: 600px;
}
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgd5744da" class="outline-3">
<h3 id="orgd5744da"><span class="section-number-3">3.10</span> Misc</h3>
<div class="outline-text-3" id="text-3-10">
</div>
<div id="outline-container-org77a51e9" class="outline-4">
<h4 id="org77a51e9"><span class="section-number-4">3.10.1</span> Syntax highlight</h4>
<div class="outline-text-4" id="text-3-10-1">
<p>
Syntax highlight takes the current font-lock color for the exported HTML.
So switch to a light theme for reasonable syntax colors.
</p>
</div>
</div>
</div>

<div id="outline-container-org1c7f478" class="outline-3">
<h3 id="org1c7f478"><span class="section-number-3">3.11</span> Filter code</h3>
<div class="outline-text-3" id="text-3-11">
<div class="org-src-container">
<pre class="src src-html">&lt;div id="taglist"&gt;
&lt;p onclick="toggleAll()" id="tagAll"&gt;All&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Emacs&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Org_Mode&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Web&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Programming&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Network&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Music&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Design&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Anime&lt;/p&gt;
&lt;p onclick="toggleTag(this)"&gt;Hacker&lt;/p&gt;
&lt;/div&gt;
</pre>
</div>

<div class="org-src-container">
<pre class="src src-css">/* desktop, tablet landscape */
@media screen and (min-width: 1025px) {
    div#taglist  {
        position: fixed;
        overflow-y: scroll;
        overflow-x: wrap;
        top: 40pt;
        left: 2%;
        /* width: 20%; */
    }
    div#taglist p {
        /* make cursor hand on hover */
        cursor: pointer;
        margin-top: 20pt;
        border-width: 2px;
        border-style: solid;
        padding-left: 1em;
        padding-right: 1em;
        text-align: right;
    }
    div#taglist p:hover {
        background-color: black !important;
        color: white !important;
    }

    div#taglist p.noselect {
        color: gray;
        border-color: gray;
    }

    div#taglist p.include {
        color: black;
        border-color:black
    }

    div#taglist p.exclude {
        text-decoration: line-through;
    }
}
</pre>
</div>

<p>
I commented out the exclude part, if you like it, you can put it back in.
</p>

<div class="org-src-container">
<pre class="src src-javascript">function myremove(lst, elt) {
  var index = lst.indexOf(elt)
  if (index &gt; -1) {
    lst.splice(index, 1)
  }
}

// tag filtering


window.onload = setupTagList

var excludeTagList = []
var includeTagList = []
var allTagList = []

function setupTagList() {
  for (var tag of document.getElementById('taglist').children) {
    tag.className = 'include'
    includeTagList.push(tag.innerHTML)
    allTagList.push(tag)
  }
}

function toggleAll() {
  toggleTag(document.getElementById('tagAll'))
  for (tag of allTagList) {
    while (tag.className !== tagAll.className) {
      toggleTag(tag)
    }
  }
}

function toggleTag(tag) {
  switch (tag.className) {
    case 'include':
      var nextState = 'noselect'
      myremove(includeTagList, tag.innerHTML)
      break
    case 'noselect':
      // var nextState = 'exclude'
    // excludeTagList.push(tag.innerHTML)
    var nextState = 'include'
      includeTagList.push(tag.innerHTML)
      break
    // case 'exclude':
    //   var nextState = 'include'
    //   myremove(excludeTagList, tag.innerHTML)
    //   includeTagList.push(tag.innerHTML)
    //   break
  }
  tag.className = nextState
  filterHeaders()
}

function filterHeaders() {
  for (var header of document.getElementById('content').children) {
    if (header.className === "outline-2") {
      for (var tag of header.getElementsByClassName('tag')[0].children) {
        if (includeTagList.includes(tag.innerHTML)) {
          header.style.display = 'block'
          break
        } else {
          header.style.display = 'none'
        }
      }
      // exclude list overrides include list
      for (var tag of header.getElementsByClassName('tag')[0].children) {
        if (excludeTagList.includes(header.tagName)) {
          header.style.display = 'none'
        }
      }
    }
  }
}
</pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
The command also creates files and folders for me and types the necessary options for me.
Here is the code:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun moon/new-blog (title)
  "Make a new blog post with TITLE."
  (interactive "M")
  (let* ((year (shell-command-to-string "echo -n $(date +%Y)"))
         (dir-file-name (downcase (replace-regexp-in-string " " "-" title)))
         (dir-path (concat (format  "~/p/casouri/note/%s/"
                                    year)
                           dir-file-name))
         (file-path (concat dir-path
                            "/index.org")))
    (mkdir dir-path)
    (find-file file-path)
    (insert (format "#+SETUPFILE: ../../setup.org
#+TITLE: %s
#+DATE:
"
                    title))
    (kill-new (format "{{{post(%s/%s/,%s)}}}"
                      title
                      year
                      dir-file-name))
    (save-buffer)
    (find-file "~/p/casouri/note/index.org")))
</pre>
</div></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
The manual doesn't mention that you can use <code>(eval)</code> inside macros.
Note that if you use <code>(eval)</code>, the whole macro definition has to be in <code>(eval)</code>:
</p>

<pre class="example">
#+MACRO naive-macro something (eval "like this") doesn't work.
</pre>

<p class="footpara">
That will just expand to
</p>

<pre class="example">
something (eval "like this") doesn't work.
</pre>

<p class="footpara">
On the other hand,
</p>

<pre class="example">
#+MACRO reasonable-macro (eval "Something like this works.")
</pre></div></div>


</div>
</div></div>
</body>
</html>]]></description>

<pubDate>Fri, 16 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>Easy Bindings when Region Is Active</title>
<link>https://archive.casouri.co.uk/note/2018/easy-bindings-when-region-is-active/</link>
<guid>https://archive.casouri.co.uk/note/2018/easy-bindings-when-region-is-active/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Easy Bindings when Region Is Active</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Easy Bindings when Region Is Active</h1>
<p>
In Emacs, "region active" means <code>transient-mark-mode</code> is on, which roughly means you selected some text.
In this state, you can bind some "easy" bindings, i.e., bindings without modifiers.
These easy bindings can greatly improve your text editing experience. Here is what I binded:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key</th>
<th scope="col" class="org-left">Operation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>p</code></td>
<td class="org-left"><code>yank</code> (paste)</td>
</tr>

<tr>
<td class="org-left"><code>y</code></td>
<td class="org-left"><code>kill-ring-save</code> (copy)</td>
</tr>

<tr>
<td class="org-left"><code>C-y</code></td>
<td class="org-left"><code>kill-ring-save</code> (copy)</td>
</tr>

<tr>
<td class="org-left"><code>Y</code></td>
<td class="org-left">(copy but don't exist <code>transient-mark-mode</code>)</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left"><code>s</code></td>
<td class="org-left"><code>isolate-quick-add</code></td>
</tr>

<tr>
<td class="org-left"><code>S</code></td>
<td class="org-left"><code>isolate-long-add</code></td>
</tr>

<tr>
<td class="org-left"><code>d</code></td>
<td class="org-left"><code>isolate-quick-delete</code></td>
</tr>

<tr>
<td class="org-left"><code>D</code></td>
<td class="org-left"><code>isolate-long-delete</code></td>
</tr>

<tr>
<td class="org-left"><code>c</code></td>
<td class="org-left"><code>isolate-quick-change</code></td>
</tr>

<tr>
<td class="org-left"><code>C</code></td>
<td class="org-left"><code>isolate-long-change</code></td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left"><code>f</code></td>
<td class="org-left"><code>er/mark-defun</code> (select function point)</td>
</tr>

<tr>
<td class="org-left"><code>w</code></td>
<td class="org-left"><code>er/mark-word</code> (select word at point)</td>
</tr>

<tr>
<td class="org-left"><code>W</code></td>
<td class="org-left"><code>er/mark-symbol</code> (select symbol at point)</td>
</tr>

<tr>
<td class="org-left"><code>P</code></td>
<td class="org-left"><code>mark-paragraph</code> (select paragraph at point)</td>
</tr>

<tr>
<td class="org-left"><code>q</code></td>
<td class="org-left"><code>er/mark-inside-quotes</code> (select inside quote)</td>
</tr>

<tr>
<td class="org-left"><code>Q</code></td>
<td class="org-left"><code>er/mark-outside-quotes</code> (select including quote)</td>
</tr>

<tr>
<td class="org-left"><code>b</code></td>
<td class="org-left"><code>er/mark-inside-pairs</code> (select inside pair)</td>
</tr>

<tr>
<td class="org-left"><code>B</code></td>
<td class="org-left"><code>er/mark-outside-pairs</code> (selct including pair)</td>
</tr>
</tbody>
</table>

<p>
Some remarks:
</p>

<ol class="org-ol">
<li>I bind <code>C-y</code> to <code>yank</code> out side selection,
so <code>C-y</code> pastes when nothing is selected and copies when something is selected.</li>
<li><code>isolate-xxx</code> commands are from <a href="https://github.com/casouri/isolate">isolate.el</a>, basically <a href="https://github.com/emacs-evil/evil-surround/blob/master/readme.org">evil-surround</a> for vanilla Emacs.</li>
<li>marking commands are like Vim text objects, I normally start region with <code>set-mark-command</code>
and use these short cuts to select the text object that I want.</li>
</ol>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2019-08-03 Sat&gt; </span></span> Update:</b>
</p>

<p>
Code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defconst angel-transient-mode-map-alist
  `((mark-active
     ,@(let ((map (make-sparse-keymap)))
         ;; operations
         (define-key map "p" (lambda (b e)
                               (interactive "r") (delete-region b e) (yank)))
         (define-key map "x" #'exchange-point-and-mark)
         (define-key map ";" #'comment-dwim)
         (define-key map "y" #'kill-ring-save)
         (define-key map (kbd "C-y") #'kill-ring-save)
         (define-key map "Y" (lambda
                               (b e)
                               (interactive "r")
                               (kill-new (buffer-substring b e))
                               (message "Region saved")))
         ;; isolate
         (define-key map "s" #'isolate-quick-add)
         (define-key map "S" #'isolate-long-add)
         (define-key map "d" #'isolate-quick-delete)
         (define-key map "D" #'isolate-long-delete)
         (define-key map "c" #'isolate-quick-change)
         (define-key map "C" #'isolate-long-change)
         ;; mark things
         (define-key map "f" #'er/mark-defun)
         (define-key map "w" #'er/mark-word)
         (define-key map "W" #'er/mark-symbol)
         (define-key map "P" #'mark-paragraph)
         ;; inner &amp; outer
         ;; (define-key map "C-i" inner-map)
         ;; (define-key map "C-a" outer-map)
         ;; (define-key inner-map "q" #'er/mark-inside-quotes)
         ;; (define-key outer-map "q" #'er/mark-outside-quotes)
         ;; (define-key inner-map "b" #'er/mark-inside-pairs)
         ;; (define-key outer-map "b" #'er/mark-outside-pairs)
         (define-key map "q" #'er/mark-inside-quotes)
         (define-key map "b" #'er/mark-inside-pairs)

         ;; expand-region
         (define-key map (kbd "C--") #'er/contract-region)
         (define-key map (kbd "C-=") #'er/expand-region)
         map))))

(add-to-list 'emulation-mode-map-alists
             'angel-transient-mode-map-alist t)
</pre>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Thu, 15 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>Emacs Keymap Precedence</title>
<link>https://archive.casouri.co.uk/note/2018/emacs-keymap-precedence/</link>
<guid>https://archive.casouri.co.uk/note/2018/emacs-keymap-precedence/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Emacs Keymap Precedence</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Emacs Keymap Precedence</h1>
<p>
Discussion from <a href="https://emacs-china.org/t/topic/7587/6">a post in emacs-china</a>. Copied from <a href="https://xuchunyang.me">xuchunyang</a>.
</p>

<p>
As a quick note, Emacs keymaps take precedence as follows:
</p>

<ol class="org-ol">
<li>overriding-terminal-local-map</li>
<li>overriding-local-map</li>
<li>text property's 'keymap property</li>
<li>emulation-mode-map-alists</li>
<li>minor-mode-overriding-map-alist</li>
<li>minor-mode-map-alist (Minor Mode)</li>
<li>text property's 'local-map property</li>
<li>(current-local-map) (Major Mode)</li>
<li>(current-global-map) (Global Map)</li>
</ol>

<p>
Related <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Searching-Keymaps.html">Emacs Manual Node</a>.
</p>
</div>
</body>
</html>]]></description>

<pubDate>Thu, 15 Nov 2018 00:00:00 -0500</pubDate>
</item>
<item>
<title>My Favorite Musicians</title>
<link>https://archive.casouri.co.uk/note/2018/my-favorite-musicians/</link>
<guid>https://archive.casouri.co.uk/note/2018/my-favorite-musicians/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>My Favorite Musicians</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">My Favorite Musicians</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org9e77aeb">1. Rock</a>
<ul>
<li><a href="#org3a6cf81">1.1. English</a></li>
<li><a href="#org21e8f52">1.2. Mandarin</a></li>
</ul>
</li>
<li><a href="#orgb295580">2. Blues</a>
<ul>
<li><a href="#orgb01064e">2.1. English</a></li>
</ul>
</li>
<li><a href="#orga049f9a">3. Jazz</a>
<ul>
<li><a href="#org63d4455">3.1. English</a></li>
<li><a href="#org43303f6">3.2. Japanese</a></li>
</ul>
</li>
<li><a href="#org7d86f08">4. Soul/Motown</a>
<ul>
<li><a href="#orgf18e317">4.1. English</a></li>
</ul>
</li>
<li><a href="#org2468b19">5. Country</a>
<ul>
<li><a href="#orgf306268">5.1. Mandarin</a></li>
<li><a href="#org4043231">5.2. English</a></li>
</ul>
</li>
<li><a href="#orgbd3785c">6. Alternative</a>
<ul>
<li><a href="#orga1c33b6">6.1. English</a></li>
</ul>
</li>
<li><a href="#org8148367">7. Pop</a>
<ul>
<li><a href="#org69f16f3">7.1. English</a></li>
<li><a href="#org9c804b4">7.2. Mandarin</a></li>
</ul>
</li>
<li><a href="#orgd14a2b7">8. Hip Pop</a>
<ul>
<li><a href="#org00e80d5">8.1. Mandarin</a></li>
</ul>
</li>
<li><a href="#orgb461474">9. OST</a></li>
</ul>
</div>
</div>
<p>
Not strictly ordered.
</p>

<div id="outline-container-org9e77aeb" class="outline-2">
<h2 id="org9e77aeb"><span class="section-number-2">1</span> Rock</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org3a6cf81" class="outline-3">
<h3 id="org3a6cf81"><span class="section-number-3">1.1</span> English</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>The Beatles</li>
<li>Rolling Stone</li>
<li>Queen</li>
<li>CCR</li>
<li>Lynyrd Skynyrd</li>
<li>Eagles</li>
<li>Huey Lewis and the News</li>
<li>The Doobie Brothers</li>
<li>ZZ Top</li>
<li>Animals</li>
<li>Baffalo Springfield</li>
<li>Janis Joplin</li>
<li>Billy Joe</li>
<li>Chicago</li>
<li>Led Zeppelin</li>
<li>Eric Clapton</li>
<li>CSN(and sometimes Y)</li>
<li>Neil Young</li>
<li>Kansas</li>
<li>Beach Boys</li>
<li>U2</li>
<li>The Heavy</li>
<li>Aerosmith</li>
<li>Journey</li>
<li>The Police</li>
<li>Dion</li>
<li>Byrds</li>
<li>Beach Boys</li>
<li>Boston</li>
<li>Led Zeppelin</li>
<li>Gun's N' Roses</li>
<li>ACDC</li>
<li>Van Morrison</li>
</ul>
</div>
</div>
<div id="outline-container-org21e8f52" class="outline-3">
<h3 id="org21e8f52"><span class="section-number-3">1.2</span> Mandarin</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>崔健</li>
<li>草东没有派对</li>
<li>汪峰</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgb295580" class="outline-2">
<h2 id="orgb295580"><span class="section-number-2">2</span> Blues</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-orgb01064e" class="outline-3">
<h3 id="orgb01064e"><span class="section-number-3">2.1</span> English</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>SRV</li>
<li>John Lee Hooker</li>
<li>BB King</li>
<li>(Blues Brothers)</li>
<li>Ray Charles</li>
<li>Buddy Guy</li>
<li>Kaleo</li>
<li>Mighty Sam McClain</li>
<li>Albert King</li>
<li>Muddy Waters</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orga049f9a" class="outline-2">
<h2 id="orga049f9a"><span class="section-number-2">3</span> Jazz</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org63d4455" class="outline-3">
<h3 id="org63d4455"><span class="section-number-3">3.1</span> English</h3>
</div>
<div id="outline-container-org43303f6" class="outline-3">
<h3 id="org43303f6"><span class="section-number-3">3.2</span> Japanese</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Ryo Fukui （福居良）
</p>
</div>
</div>
</div>
<div id="outline-container-org7d86f08" class="outline-2">
<h2 id="org7d86f08"><span class="section-number-2">4</span> Soul/Motown</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-orgf18e317" class="outline-3">
<h3 id="orgf18e317"><span class="section-number-3">4.1</span> English</h3>
<div class="outline-text-3" id="text-4-1">
<ul class="org-ul">
<li>Marvin Gay</li>
<li>James Brown</li>
<li>The Temptations</li>
<li>Storm, Earth and Fire</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org2468b19" class="outline-2">
<h2 id="org2468b19"><span class="section-number-2">5</span> Country</h2>
<div class="outline-text-2" id="text-5">
</div>
<div id="outline-container-orgf306268" class="outline-3">
<h3 id="orgf306268"><span class="section-number-3">5.1</span> Mandarin</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>宋冬野</li>
</ul>
</div>
</div>
<div id="outline-container-org4043231" class="outline-3">
<h3 id="org4043231"><span class="section-number-3">5.2</span> English</h3>
<div class="outline-text-3" id="text-5-2">
<ul class="org-ul">
<li>Bob Dylan</li>
<li>The Head and the Heart</li>
<li>John Denver</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgbd3785c" class="outline-2">
<h2 id="orgbd3785c"><span class="section-number-2">6</span> Alternative</h2>
<div class="outline-text-2" id="text-6">
</div>
<div id="outline-container-orga1c33b6" class="outline-3">
<h3 id="orga1c33b6"><span class="section-number-3">6.1</span> English</h3>
<div class="outline-text-3" id="text-6-1">
<ul class="org-ul">
<li>The Temper Trap</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org8148367" class="outline-2">
<h2 id="org8148367"><span class="section-number-2">7</span> Pop</h2>
<div class="outline-text-2" id="text-7">
</div>
<div id="outline-container-org69f16f3" class="outline-3">
<h3 id="org69f16f3"><span class="section-number-3">7.1</span> English</h3>
</div>
<div id="outline-container-org9c804b4" class="outline-3">
<h3 id="org9c804b4"><span class="section-number-3">7.2</span> Mandarin</h3>
<div class="outline-text-3" id="text-7-2">
<ul class="org-ul">
<li>李宗盛</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgd14a2b7" class="outline-2">
<h2 id="orgd14a2b7"><span class="section-number-2">8</span> Hip Pop</h2>
<div class="outline-text-2" id="text-8">
</div>
<div id="outline-container-org00e80d5" class="outline-3">
<h3 id="org00e80d5"><span class="section-number-3">8.1</span> Mandarin</h3>
</div>
</div>

<div id="outline-container-orgb461474" class="outline-2">
<h2 id="orgb461474"><span class="section-number-2">9</span> OST</h2>
<div class="outline-text-2" id="text-9">
<ul class="org-ul">
<li>Anything Disney</li>
<li>Cowboy Bebop</li>
<li>Splatoon (and most of Nintendo)</li>
</ul>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 20 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Who Called My Function?</title>
<link>https://archive.casouri.co.uk/note/2018/who-called-my-function/</link>
<guid>https://archive.casouri.co.uk/note/2018/who-called-my-function/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Who Called My Function?</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Who Called My Function?</h1>
<p>
Someone asked why his Emacs starts up with two split screen.
Apparently something in his <code>init.el</code> caused that.
</p>

<p>
But how can we find what caused the problem?
I searched around and found a way to check "backtrace frame" in Emacs: <code>backtrace-frames</code>.
</p>

<p>
Here is what I cooked up:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(advice-add 'split-window-right :before (lambda (&amp;rest _) (print (backtrace-frames))))
(defun some-function () (split-window-right))
</pre>
</div>

<p>
So when I call the function <code>some-funtion</code>,
a split window is created with following information printed:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">((t backtrace-frames nil nil)
 (nil print
      ((backtrace-frames))
      nil)
 (t
  (lambda
    (&amp;rest _)
    (print
     (backtrace-frames)))
  nil nil)
 (t apply
    ((lambda
       (&amp;rest _)
       (print
        (backtrace-frames)))
     nil)
    nil)
 (t split-window-right nil nil)
 (t some-function nil nil)
 (t eval
    ((some-function)
     nil)
    nil)
 (t elisp--eval-last-sexp
    (t)
    nil)
 (t eval-last-sexp
    (t)
    nil)
 (t eval-print-last-sexp
    (nil)
    nil)
 (t funcall-interactively
    (eval-print-last-sexp nil)
    nil)
 (t call-interactively
    (eval-print-last-sexp nil nil)
    nil)
 (t command-execute
    (eval-print-last-sexp)
    nil))
</pre>
</div>

<p>
We can see <code>some-funtion</code> is right before <code>split-window</code>. Cool.
As for the other <code>t</code> and <code>nil</code> stuff, I chose to not bother.
</p>
</div>
</body>
</html>]]></description>

<pubDate>Sun, 14 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Emacs Gateway Drug</title>
<link>https://archive.casouri.co.uk/note/2018/emacs-gateway-drug/</link>
<guid>https://archive.casouri.co.uk/note/2018/emacs-gateway-drug/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Emacs Gateway Drug</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Emacs Gateway Drug</h1>
<p>
Every time I try to introduce my friend Emacs, they ask "why?"
Well I can't really think of anything except "you can do anything you want with it".
Of course that statement is too broad and unconvincing.
So I though I'd collect some cool features that can lure my friends into using Emacs.
</p>

<p>
These tricks must be easily understandable and looks very cool even to laymen.
So here we go:
</p>

<ol class="org-ol">
<li><code>C-f/b</code> <code>M-f/b</code> <code>C-a/e</code></li>
<li><code>undo-tree-visualize</code></li>
<li>Org Mode</li>
<li>Keyboard Macros</li>
<li>Rectangle Selection</li>
<li>query replace</li>
<li>inline-replace</li>
<li>package installation (that's a bit controversial)</li>
<li>regexp-replace</li>
<li>(for programming) outshine</li>
<li>(mostle for programming) magit</li>
</ol>
</div>
</body>
</html>]]></description>

<pubDate>Sun, 07 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Org Mode in Source File</title>
<link>https://archive.casouri.co.uk/note/2018/org-mode-in-source-file/</link>
<guid>https://archive.casouri.co.uk/note/2018/org-mode-in-source-file/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Org Mode in Source File</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Org Mode in Source File</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org76cfa82">1. How Does It Work</a>
<ul>
<li><a href="#org8b3c084">1.1. Enable</a></li>
<li><a href="#org6115194">1.2. Headings</a></li>
<li><a href="#org3e95714">1.3. Folding</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div class="figure">
<p><img src="./outline0.png" alt="outline0.png" />
</p>
</div>


<div class="figure">
<p><img src="./outline1.png" alt="outline1.png" />
</p>
</div>


<div class="figure">
<p><img src="./outline2.png" alt="outline2.png" />
</p>
</div>

<p>
This nice package <a href="https://github.com/alphapapa/outshine">outshine</a> brings the look and feel of Org Mode into any major mode
as long as there is comment syntax defined.
</p>

<div id="outline-container-org76cfa82" class="outline-2">
<h2 id="org76cfa82"><span class="section-number-2">1</span> How Does It Work</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org8b3c084" class="outline-3">
<h3 id="org8b3c084"><span class="section-number-3">1.1</span> Enable</h3>
<div class="outline-text-3" id="text-1-1">
<pre class="example">
M-x outline-minor-mode
</pre>
</div>
</div>

<div id="outline-container-org6115194" class="outline-3">
<h3 id="org6115194"><span class="section-number-3">1.2</span> Headings</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Instead of <code>*</code> in Org Mode, use whatever comment syntax defined in the major mode.
</p>

<p>
In <code>emacs-lisp-mode</code>, <code>;;;</code> is top level heading, <code>;;;;</code> the second, and so on.
</p>
</div>
</div>

<div id="outline-container-org3e95714" class="outline-3">
<h3 id="org3e95714"><span class="section-number-3">1.3</span> Folding</h3>
<div class="outline-text-3" id="text-1-3">
<p>
Since <code>outshine</code> is no more than a extension of <code>outline-minor-mode</code>,
all the <code>outline-minor-mode</code> commands still apply.
To name a few:
</p>
<pre class="example">
outline-show-all
outline-hide-body
outline-toggle-children
</pre>

<p>
<code>outshine</code> binds <code>C-M-i</code> to <code>outshine-cycle-buffer</code>, I found it convenient.
</p>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sun, 07 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Retro Terminal Blog Style</title>
<link>https://archive.casouri.co.uk/note/2018/retro-terminal-blog-style/</link>
<guid>https://archive.casouri.co.uk/note/2018/retro-terminal-blog-style/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Retro Terminal Blog Style</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Retro Terminal Blog Style</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgee66ad6">1. Color and content</a></li>
<li><a href="#org4f2f51e">2. Animation</a>
<ul>
<li><a href="#org3da34bf">2.1. And Cursor?</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div class="figure">
<p><img src="./retro-term-css.gif" alt="retro-term-css.gif" />
</p>
</div>

<div id="outline-container-orgee66ad6" class="outline-2">
<h2 id="orgee66ad6"><span class="section-number-2">1</span> Color and content</h2>
<div class="outline-text-2" id="text-1">
<p>
Basically I made it looks like some official trying to search a person's archive in database
via a terminal.
</p>

<pre class="example">
$ visit BHL0388

Warning: Prohibited content with privilege B and lower

$ authorize ************************************

Welcome back, last login: Sep 8 2018 Sat 17:54:39 from c-68-80-3-96.hsd1.pa.comcast.net

Jumping back to last visited...

BHL0388

Name: ██████

███████████████

Surname: casouri

██████████████████████████████████

Associated Organization: Pluto Alice

████████████████████

███████████████████████████

█████████████████████████████████████████
</pre>

<p>
Blackouts are cool, aren't they?
</p>

<p>
My font spec:
</p>
<div class="org-src-container">
<pre class="src src-CSS">.mono:lang(en-us), .mono {
    font-family: Courier, Courier New;
}

:lang(zh-Hans) {
    font-family: Songti SC;
}
</pre>
</div>

<p>
And I added this retry terminal style with green text color and text-shadow by CSS:
</p>

<div class="org-src-container">
<pre class="src src-CSS">.retro  {
    background-color: #282828;
    color: #66FF66;
    text-shadow: 0 0 10px #33FF33;
}
</pre>
</div>

<p>
I got the color of retro displays form this <a href="https://superuser.com/questions/361297/what-colour-is-the-dark-green-on-old-fashioned-green-screen-computer-displays">stackexchange question</a>.
</p>

<p>
I also need to change my black-and-white profile image to glowing green,
<a href="https://www.youtube.com/watch?v=8DNIVet1PgI">this YouTube video</a> is a nice tutorial on add glowing effects onto image.
</p>


<p>
If you want to know more, just look at my index page's HTML and CSS directly.
</p>
</div>
</div>

<div id="outline-container-org4f2f51e" class="outline-2">
<h2 id="org4f2f51e"><span class="section-number-2">2</span> Animation</h2>
<div class="outline-text-2" id="text-2">
<p>
It's pretty cool now, but wouldn't it be better if it shows the actual animation
of typing?
</p>

<p>
Turns out it's quite simple, your can achieve that in pure CSS.
</p>

<p>
What we need is <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations">CSS animation</a>. <a href="https://codepen.io/thiagoteles/pen/ogoxLw">Here</a> is a nice snippet that has the exact effect we want.
</p>

<p>
The idea is to set width of the tag to 0 initially,
then use the animation to gradually expand the width.
</p>

<p>
I modified the snippet a bit: (get the files from here: <a href="./test.html">HTML</a> <a href="./style.css">CSS</a>)
</p>

<div class="org-src-container">
<pre class="src src-CSS">/* Google Fonts */
@import url(https://fonts.googleapis.com/css?family=Anonymous+Pro);

/* Global */
html{
    min-height: 100%;
    overflow: hidden;
}
body{
    color: rgba(255,255,255,.75);
    font-family: 'Anonymous Pro', monospace;
    background-color: rgb(25,25,25);
}

.line-1{
    width: 44ch;
    border-right: 1ch solid rgba(255,255,255,.75);
    white-space: nowrap;
    overflow: hidden;
}

/* Animation */
.anim-typewriter{
    animation: typewriter 6s steps(44) 1s 1 normal both,
               blinkTextCursor 1s steps(44) infinite normal;
}
@keyframes typewriter{
    from{width: 0;}
    to{width: 44ch;}
}

@keyframes blinkTextCursor{
    from{border-right-color: rgba(255,255,255,.75);}
    to{border-right-color: transparent;}
}
</pre>
</div>

<ul class="org-ul">
<li><code>overflow: hidden;</code> makes sure the content outside current width is hidden</li>
<li><code>white-space: nowrap;</code> makes sure the line is not wrapped</li>
<li>Here is what I modified: because the text has 44 characters, set width to <code>44ch</code>,
and set animation steps to 44. This way we get a nice crisp typing animation.
(<code>ch</code> is the width of <code>0</code> in current font)</li>
</ul>


<p>
Now all we need to do is apply animations and calculate the timing for each one.
</p>

<p>
For the "printing" content, I use a <code>showup</code> animation:
</p>

<div class="org-src-container">
<pre class="src src-CSS">@keyframes stage3-animation-a {
    from{opacity: 0;}
    to{opacity: 1;}
}
</pre>
</div>

<p>
It just changes opacity from <code>0</code> to <code>1</code>.
</p>
</div>

<div id="outline-container-org3da34bf" class="outline-3">
<h3 id="org3da34bf"><span class="section-number-3">2.1</span> And Cursor?</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The tutorial covers how to make a blinking cursor,
I just want to add how to make cursor disappear after the "user" finished typing.
</p>

<p>
To fake this effect, set the initial border color to <code>transparant</code>,
and add a time duration to the cursor animation.
For example, if the typing animation takes 3 seconds,
set your cursor animation to around 4 seconds.
I added a second because no one type and hit enter linearly,
people type in commands, stop, and hit enter.
</p>

<p>
So when the cursor animation is over, the border color goes back to <code>transparant</code>:
it disappears.
</p>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Fri, 05 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Join chat on IRC</title>
<link>https://archive.casouri.co.uk/note/2018/join-chat-on-irc/</link>
<guid>https://archive.casouri.co.uk/note/2018/join-chat-on-irc/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Join chat on IRC</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Join chat on IRC</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org3e89c9d">1. Server</a></li>
<li><a href="#org6dcb1c6">2. Client</a></li>
<li><a href="#org8ebf1a7">3. Join a Channel</a></li>
<li><a href="#org0744fe4">4. Quit</a></li>
<li><a href="#org3fb7a15">5. Other commands</a></li>
<li><a href="#orgdcd9a46">6. Useful Tips</a>
<ul>
<li><a href="#org07cf8f4">6.1. How to "@" people</a></li>
<li><a href="#org7712f31">6.2. How to see chat history?</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
IRC is a cool protocol that hackers all over the world have been using for decades. Many communities have a IRC channel.
</p>

<div id="outline-container-org3e89c9d" class="outline-2">
<h2 id="org3e89c9d"><span class="section-number-2">1</span> Server</h2>
<div class="outline-text-2" id="text-1">
<p>
Most of the IRC channels I know are on <a href="https://freenode.net">https://freenode.net</a>. Check the server your community uses.
</p>
</div>
</div>

<div id="outline-container-org6dcb1c6" class="outline-2">
<h2 id="org6dcb1c6"><span class="section-number-2">2</span> Client</h2>
<div class="outline-text-2" id="text-2">
<p>
First, freenode has an <a href="https://webchat.freenode.net">online client</a> for you. I prefer to use Emacs, and luckily Emacs comes with a nice IRC client called erc.
</p>

<p>
Start it up with <code>M-x erc</code>, it asks you for server and port, just leave the default. Then for the user name you can just type whatever you want. You actually “use” the nick name before you register it on IRC. Once you are in freenode, you can register your nick name by this command:
</p>

<pre class="example">
/msg NickServ REGISTER password youremail@example.com
</pre>
<p>
To “login” (freenode call it “identify”):
</p>
<pre class="example">
/msg NickServ IDENTIFY nickname password
</pre>

<p>
This is not really IRC protocol but a freenode protocol. You are actually sending a message to a special user <code>NickServ</code>, and the massage is <code>REGISTER password youremail@example.com</code>.
</p>
</div>
</div>

<div id="outline-container-org8ebf1a7" class="outline-2">
<h2 id="org8ebf1a7"><span class="section-number-2">3</span> Join a Channel</h2>
<div class="outline-text-2" id="text-3">
<p>
To join a channel:
</p>
<pre class="example">
/join #channel
</pre>
<p>
For example:
</p>
<pre class="example">
/join #emacs
</pre>
<p>
Channel names always start with <code>#</code>, I think.
</p>
</div>
</div>

<div id="outline-container-org0744fe4" class="outline-2">
<h2 id="org0744fe4"><span class="section-number-2">4</span> Quit</h2>
<div class="outline-text-2" id="text-4">
<p>
Quit with
</p>
<pre class="example">
/quit
</pre>
</div>
</div>

<div id="outline-container-org3fb7a15" class="outline-2">
<h2 id="org3fb7a15"><span class="section-number-2">5</span> Other commands</h2>
<div class="outline-text-2" id="text-5">
<p>
You can learn other IRC commands at <a href="http://www.ircbeginner.com/ircinfo/ircc-commands.html">here</a>.
</p>
</div>
</div>

<div id="outline-container-orgdcd9a46" class="outline-2">
<h2 id="orgdcd9a46"><span class="section-number-2">6</span> Useful Tips</h2>
<div class="outline-text-2" id="text-6">
</div>
<div id="outline-container-org07cf8f4" class="outline-3">
<h3 id="org07cf8f4"><span class="section-number-3">6.1</span> How to "@" people</h3>
<div class="outline-text-3" id="text-6-1">
<p>
Normally you type the person’s name and add a <code>:</code>. So <code>@cooldude xxx</code> would be <code>cooldude: xxx</code>. This is how we reply to people specifically.
</p>
</div>
</div>

<div id="outline-container-org7712f31" class="outline-3">
<h3 id="org7712f31"><span class="section-number-3">6.2</span> How to see chat history?</h3>
<div class="outline-text-3" id="text-6-2">
<p>
You can’t. You have to stay online to see the conversation. You can setup a remote server to stay online  and <code>ssh</code> to the server to chat. But really, you can just login and ask your question, if no one is online, just check in some other time. You don’t need to record every message every send to the channel.
</p>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Tue, 02 Oct 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Wanderlust</title>
<link>https://archive.casouri.co.uk/note/2018/wanderlust/</link>
<guid>https://archive.casouri.co.uk/note/2018/wanderlust/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Wanderlust</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Wanderlust</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org55cfc17">1. References</a></li>
<li><a href="#orgd5d9355">2. Install</a></li>
<li><a href="#org309cfd4">3. Receive Mail</a>
<ul>
<li><a href="#org1d846f4">3.1. Folder</a></li>
<li><a href="#orgbf56705">3.2. Grouping</a></li>
<li><a href="#org3baa703">3.3. Update: Use <code>fetchmail</code> to Download Mails</a></li>
<li><a href="#org28ed08b">3.4. Update: Use <code>mbsync</code> (<code>isync</code>) to Download Mails</a></li>
</ul>
</li>
<li><a href="#orgf50f3e2">4. Folder Buffer</a></li>
<li><a href="#org96d3d19">5. Summary Buffer</a>
<ul>
<li><a href="#org7eaa841">5.1. Message Buffer</a></li>
</ul>
</li>
<li><a href="#orgfa6aa22">6. Send Mail</a>
<ul>
<li><a href="#org59ea1a9">6.1. Configure</a></li>
<li><a href="#org37f6d72">6.2. Write Mail</a></li>
<li><a href="#org31e71cd">6.3. Dynamic Modification of Messages</a></li>
</ul>
</li>
<li><a href="#org1cab281">7. Address Book</a>
<ul>
<li><a href="#org5a5d894">7.1. <code>bbdb</code> as Address Book</a></li>
<li><a href="#orgb64be80">7.2. Built in</a></li>
</ul>
</li>
<li><a href="#org4f69639">8. Search Mail</a></li>
<li><a href="#orgbaca5d1">9. Auto Refile</a></li>
<li><a href="#orgd24313c">10. Expire rules</a></li>
<li><a href="#orgfd674d8">11. Other</a>
<ul>
<li><a href="#org4c16972">11.1. Save password</a></li>
<li><a href="#org54b9820">11.2. Ignore Crap in Header</a></li>
<li><a href="#org78b1f79">11.3. Show folders in Summary Buffer</a></li>
<li><a href="#orga25f8c1">11.4. X-Face</a></li>
</ul>
</li>
<li><a href="#orgb56bba9">12. Funny Quote</a></li>
</ul>
</div>
</div>
<p>
Wanderlust is a Emacs email client, I have had enough with Thunderbird and Mail on macOS (Thunderbird uses
a ton of RAM and Mail got werid bugs that no one except me seems have encountered, and both of them
sucks at searching mails),
and apparently Outlook doesn't work on mac, so I'm finally getting my hand dirty with Emacs email client.
</p>

<div id="outline-container-org55cfc17" class="outline-2">
<h2 id="org55cfc17"><span class="section-number-2">1</span> References</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://github.com/LdBeth/Emacs-for-Noobs/blob/master/WanderLust.org">LdBeth's tutorial</a>
</p>

<p>
<a href="https://www.emacswiki.org/emacs/WanderLust">EmacsWiki</a>
</p>

<p>
<a href="https://www.emacswiki.org/emacs/WlFaq">EmacsWiki FAQ</a>
</p>

<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html">Manual</a>
</p>

<p>
<a href="http://dis-dot-dat.blogspot.com/2010/04/ive-used-combination-of-mutt-emacs.html">Some good snippets</a>
</p>
</div>
</div>

<div id="outline-container-orgd5d9355" class="outline-2">
<h2 id="orgd5d9355"><span class="section-number-2">2</span> Install</h2>
<div class="outline-text-2" id="text-2">
<p>
You need APEL, FLIM/CLIME, SEMI, in that order, and, of course, wanderlust.
</p>

<p>
I installed them with my cowboy.el (in the brute force manner), you can just install from melpa.
</p>
</div>
</div>

<div id="outline-container-org309cfd4" class="outline-2">
<h2 id="org309cfd4"><span class="section-number-2">3</span> Receive Mail</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org1d846f4" class="outline-3">
<h3 id="org1d846f4"><span class="section-number-3">3.1</span> Folder</h3>
<div class="outline-text-3" id="text-3-1">
<p>
First, config file is <code>~/.folders</code>, you can change it by <code>wl-folders-file</code>. Here you setup "folders", for wanderlust there is only folder,
no account.
</p>

<p>
<a href="http://mihai.bazon.net/articles/emacs/wanderlust-email-client/configure-email-folders">Mishoo</a> has a detailed and helpful explanation of this, but for archiving purpose I'll repeat him below.
</p>

<blockquote>
<p>
WL stores the folders information in the file “$HOME/.folders” (dot folders).  Here's the syntax for one IMAP folder:
</p>

<p>
%INBOX:johndoe/clear@mail.domain.com:993!   "INBOX"
</p>

<p>
The above tells WL that we have an IMAP folder (starts with “%”), on the server named “mail.domain.com”, using “clear” (plain) authentication, user name “johndoe”, port “993” and should use secure sockets layer (SSL) when connecting (ends with “!”).  Additionally, the string "INBOX" at the end specifies how this folder should be named locally.
</p>
</blockquote>

<p>
P.S. <code>%</code> is IMAP folder, <code>+</code> is local folder, other folders see <a href="http://wanderlust.github.io/wl-docs/wl.html#Folders">the manual</a>.
</p>
</div>
</div>

<div id="outline-container-orgbf56705" class="outline-3">
<h3 id="orgbf56705"><span class="section-number-3">3.2</span> Grouping</h3>
<div class="outline-text-3" id="text-3-2">
<p>
A single folder is not very useful, here is how to setup groups in WL:
</p>

<div class="org-src-container">
<pre class="src src-unix-config">GMAIL {
   %Inbox:casouri/clear@imap.gmail.com:993!             "Inbox"
   %[Gmail]/All Mail:casouri/clear@imap.gmail.com:993!  "All Mail"
   %[Gmail]/Sent Mail:casouri/clear@imap.gmail.com:993! "Sent"
   %[Gmail]/Starred:casouri/clear@imap.gmail.com:993!   "Starred"
   %[Gmail]/Drafts:casouri/clear@imap.gmail.com:993!    "Draft"
   %[Gmail]/Trash:casouri/clear@imap.gmail.com:993!     "Trash"
}
</pre>
</div>

<p>
And it looks like this in WL:
</p>

<pre class="example">
[-]Desktop:0/37/24319
  [-]GMAIL :0/37/24319
    Inbox:0/0/2
    All Mail:0/0/544
    Sent:0/0/304
    Starred:0/0/1
    Draft:0/0/0
    Trash:0/37/23468
</pre>

<p>
(The <code>Desktop</code> can be changed by variable <code>wl-folder-desktop-name</code>)
</p>

<p>
It took me a while to sync up the labels in Gmail and my local WL folders.
</p>

<p>
The part <code>[Gmail]/All Mail</code> is the folder (label in Gmail).
I thought that the <code>[Gmail]</code> is some sort of special syntax,
turns out it's just how Google name their system labels (folders) in Gmail.
</p>

<p>
Also you need to make sure you have made these system labels available to SMTP:
</p>


<div class="figure">
<p><img src="./label-setting.png" alt="label-setting.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-org3baa703" class="outline-3">
<h3 id="org3baa703"><span class="section-number-3">3.3</span> Update: Use <code>fetchmail</code> to Download Mails</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Not downloading the mail until I read it sound silly, it's not like I don't read every mail&#x2026;
Plus WL is super slow when fetching mails when I open each mail.
</p>
</div>

<div id="outline-container-org234b3bb" class="outline-4">
<h4 id="org234b3bb"><span class="section-number-4">3.3.1</span> What You Need</h4>
<div class="outline-text-4" id="text-3-3-1">
<p>
<code>fetchmail</code> and <code>postfix</code>.
</p>
</div>
</div>

<div id="outline-container-org2700d9b" class="outline-4">
<h4 id="org2700d9b"><span class="section-number-4">3.3.2</span> <code>fetchmail</code></h4>
<div class="outline-text-4" id="text-3-3-2">
<p>
<a href="http://www.fetchmail.info/fetchmail-man.html">fetchmail manual</a>
</p>

<p>
<a href="https://www.linode.com/docs/email/clients/using-fetchmail-to-retrieve-email/">a tutorial</a>
</p>

<p>
Configure <code>fetchmail</code> with <code>~/.fetchmailrc</code>.
</p>

<p>
In the following line:
</p>

<div class="org-src-container">
<pre class="src src-shell">poll imap.gmail.com protocol IMAP auth password
    user "apprentice@gmail.com" is apprentice here
    password 'klwpcmaqeycndist'
    ssl, sslcertck, idle
</pre>
</div>

<p>
(Note: If I use <code>set deamon 60</code>, fetchmail cannot resolve DNS correctly.)
</p>

<p>
Then change <code>.folder</code> file:
</p>

<div class="org-src-container">
<pre class="src src-unix-config">GMAIL {
   .inbox             "Inbox"
}
</pre>
</div>

<p>
<code>.</code> means <a href="https://en.wikipedia.org/wiki/Maildir">maildir format</a>.
</p>
</div>
</div>

<div id="outline-container-orgb377820" class="outline-4">
<h4 id="orgb377820"><span class="section-number-4">3.3.3</span> <code>postfix</code></h4>
<div class="outline-text-4" id="text-3-3-3">
<p>
Open <code>/etc/postfix/main.cf</code>, Add/ucomment there lines:
</p>

<pre class="example">
home_mailbox = Maildir/
mailbox_command =
</pre>

<p>
Also make sure <code>inet_interface</code> is set to <code>loopback-only</code> (127.0.0.1):
</p>

<pre class="example">
inet_interfaces = loopback-only
</pre>

<p>
So you don't listen to mail comes from places other than <code>fetchmail</code>.
</p>

<p>
Note that <code>postfix</code> choses mail format between mailbox and maildir depends on whether <code>home_mailbox</code>
is a directory or a file (the slash). The name of the directory (or file)
can be changed how ever you like.
</p>
</div>
</div>

<div id="outline-container-org8ec8123" class="outline-4">
<h4 id="org8ec8123"><span class="section-number-4">3.3.4</span> Use <code>procmail</code> to replace <code>postfix</code></h4>
<div class="outline-text-4" id="text-3-3-4">
<p>
For some reason I cannot start <code>postfix</code> on my machine. This might be another culprit of macOS Mojave&#x2026;
</p>

<p>
Anyway, I then replaced it with <code>procmail</code>.
</p>

<p>
First change the <code>.fetchmailrc</code> to make it use another MDA:
</p>

<pre class="example">
mda '/usr/local/bin/procmail ~/.procmailrc'
</pre>

<p>
Then configure <code>~/.procmailrc</code>:
</p>

<p>
I found a detailed tutorial <a href="https://groups.csail.mit.edu/mac/ftpdir/users/mrb/Hacks/ELisp/Spam/spambnc.proctut.shtml">here</a>. And this is the <a href="http://archive.is/OTMaa">archived link</a> in case the original broke.
</p>

<pre class="example">
SHELL=/bin/sh
PATH=/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
MAILDIR=$HOME/Mail/
LOGFILE=$HOME/.procmail.log
VERBOSE=yes
DEFAULT=$MAILDIR/inbox/
</pre>
</div>
</div>
</div>

<div id="outline-container-org28ed08b" class="outline-3">
<h3 id="org28ed08b"><span class="section-number-3">3.4</span> Update: Use <code>mbsync</code> (<code>isync</code>) to Download Mails</h3>
<div class="outline-text-3" id="text-3-4">
<p>
It seems <code>mbsync</code> is faster and easier to configure.
</p>

<p>
Here is <a href="http://isync.sourceforge.net/mbsync.html">the manual</a>.
</p>

<p>
Configure <code>~/.mbsyncrc</code>:
</p>

<pre class="example">
IMAPAccount gmail
# Address to connect to
Host imap.gmail.com
User user@gmail.com
Pass password
# To store the password in an encrypted file use PassCmd instead of Pass
# PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.mailpass.gpg"
#
# Use SSL
SSLType IMAPS
AuthMechs LOGIN

# The following line should work. If get certificate errors, uncomment the two following lines and read the "Troubleshooting" section.
# CertificateFile /etc/ssl/certs/ca-certificates.crt
#CertificateFile ~/.cert/imap.gmail.com.pem
#CertificateFile ~/.cert/Equifax_Secure_CA.pem

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path ~/Mail/Gmail/
SubFolders Verbatim
Inbox ~/Mail/Gmail/Inbox

Channel gmail
Master :gmail-remote:
Slave :gmail-local:
# Exclude everything under the internal [Gmail] folder, except the interesting folders
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail"
# Or include everything
#Patterns *
# Automatically create missing mailboxes, both locally and on the server
Create Both
# Save the synchronization state files in the relevant directory
SyncState *


IMAPAccount psu
Host outlook.office365.com
User user@psu.edu
Pass password
SSLType IMAPS
AuthMechs LOGIN

IMAPStore psu-remote
Account psu

MaildirStore psu-local
Path ~/Mail/PSU/
SubFolders Verbatim
Inbox ~/Mail/PSU/Inbox

Channel psu
Master :psu-remote:
Slave :psu-local:
Patterns "Archive" "Sent Items"
Create Both
SyncState *
</pre>

<p>
Most of the stuff can be found in manual. If you are not sure what folders there are,
you can set <code>Pattern</code> to <code>*</code> and retrieve everything. Once you know the name for each folder,
you can set specific rules to get only the ones you want.
</p>

<p>
Note that mbsync is sensitive to empty lines. You got to keep each "block" together.
</p>

<p>
Fetch your mail by <code>mbsync &lt;account&gt;</code>, e.g. <code>mbsync gmail</code> or <code>mbsync psu</code>.
You can set a corn job (linux) or launchd job (macOS) to run it periodically.
</p>
</div>

<div id="outline-container-orga446eff" class="outline-4">
<h4 id="orga446eff"><span class="section-number-4">3.4.1</span> Use a Password File instead of plain text</h4>
<div class="outline-text-4" id="text-3-4-1">
<p>
Currently the password of my email account is just lying in the <code>.mbsyncrc</code>,
which makes me a bit uncomfortable and I can't put it under (public) version control.
However, the tutorial that I based my config
on already gave a solution: use a password file.
</p>

<p>
This way I can manage my config with git, cool.
</p>

<p>
So the concept is basically create a file with password, encrypt it with gpg,
when <code>mbsync</code> needs password, it runs gpg to decrypt the password.
</p>

<p>
I created <code>gmailpass</code> with my Gmail password in it. Then encrypted it with
</p>

<div class="org-src-container">
<pre class="src src-shell">gpg -c gmailpass
</pre>
</div>

<p>
If you have gpg setup correclty, it should ask you for a password, I just repeated
the Gmail password at here because I'm lazy.
Then you'll get a <code>gmaipass.gpg</code> file, that's your encrypted password file.
Now you can delete the plain text <code>gmailpass</code>.
</p>

<p>
Then set PassCmd in <code>~/.mbsyncrc</code>:
</p>

<pre class="example">
IMAPAccount gmail
# Address to connect to
Host imap.gmail.com
User casouri@gmail.com
# To store the password in an encrypted file use PassCmd instead of Pass
PassCmd "gpg -q --for-your-eyes-only --no-tty -d ~/gmailpass.gpg"
</pre>

<p>
If you run that command <code>gpg -q --for-your-eyes-only --no-tty -d ~/gmailpass.gpg</code>,
the password is actually printed back, so you can guess how does that work.
</p>

<p>
Now you can put <code>~/.mbsyncrc</code> and password file in your config repo safely.
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-orgf50f3e2" class="outline-2">
<h2 id="orgf50f3e2"><span class="section-number-2">4</span> Folder Buffer</h2>
<div class="outline-text-2" id="text-4">
<p>
Once you start up WL with <code>M-x wl</code> and entered your password, you are in folder mode:
</p>

<pre class="example">
[-]Desktop:0/0/307
  [-]GMAIL :0/0/307
    Inbox:0/0/2
    All Mail:0/0/0
    Sent:0/0/304
    Starred:0/0/1
    Draft:0/0/0
    Trash:0/0/0
</pre>

<p>
A couple bindings:
</p>

<dl class="org-dl">
<dt><code>n/p</code></dt><dd>move down/up</dd>
<dt><code>N/P</code></dt><dd>next/last folder with unread mail</dd>
<dt><code>q</code></dt><dd>quit WL</dd>
<dt><code>z</code></dt><dd>suspend WL</dd>
<dt><code>RET/SPC</code></dt><dd>open a folder and go to summary mode</dd>
<dt><code>c</code></dt><dd>mark all mail as read</dd>
<dt><code>M-RET</code></dt><dd>toggle child</dd>
<dt><code>[</code></dt><dd>expand all folders</dd>
<dt><code>]</code></dt><dd>collapse all folders</dd>
<dt><code>'</code></dt><dd>quick search</dd>
</dl>

<p>
For more bindings, checkout <a href="http://wanderlust.github.io/wl-docs/wl.html#Folder">the manual</a>.
</p>
</div>
</div>

<div id="outline-container-org96d3d19" class="outline-2">
<h2 id="org96d3d19"><span class="section-number-2">5</span> Summary Buffer</h2>
<div class="outline-text-2" id="text-5">
<p>
Here you see all your mails:
</p>

<pre class="example">
377  09/16(Wed)11:57 [+1: Takuro Kitame  ] Bug?
381  09/17(Thu)00:16 [+3: Fujikazu Okuni ] elmo-lha.el -- LHA interface
384  09/17(Thu)01:32 [+1: Yuuichi Terani ] wl-0.6.2
389 N09/18(Fri)01:07 [+2: Yuuichi Terani ] wl-0.6.3
</pre>

<p>
The columns are: Message number, Temporal mark, Persistent mark, Date, Sender, Subject.
</p>

<p>
Bindings:
</p>

<dl class="org-dl">
<dt><code>l</code></dt><dd>Toggle folder buffer in the left.</dd>
<dt><code>v</code></dt><dd>toggle display of message window. I found this important&#x2026;</dd>
<dt><code>n/p</code></dt><dd>move down/up</dd>
<dt><code>N/P</code></dt><dd>next/last unread mail</dd>
<dt><code>*</code></dt><dd>mark</dd>
<dt><code>u</code></dt><dd>unmark</dd>
<dt><code>U</code></dt><dd>unmark all</dd>
<dt><code>q</code></dt><dd>go back</dd>
<dt><code>SPC/RET</code></dt><dd>view mail, you can still use <code>n/p</code> to go through mails.
Keep tapping <code>SPC</code> to go through all unread mails.</dd>
<dt><code>s</code></dt><dd>refresh</dd>
<dt><code>/</code></dt><dd>toggle thread(conversation)</dd>
<dt><code>[/]</code></dt><dd>expand/collapse all thread</dd>
<dt><code>a</code></dt><dd>reply</dd>
<dt><code>f</code></dt><dd>forward</dd>
<dt><code>$</code></dt><dd>toggle <code>important</code> flag</dd>
<dt><code>w</code></dt><dd>new draft</dd>
<dt><code>q</code></dt><dd>quit WL</dd>
<dt><code>z</code></dt><dd>suspend WL</dd>
<dt><code>Z</code></dt><dd>sync with address book</dd>
<dt><code>!</code></dt><dd>Mark as unread</dd>
<dt><code>S</code></dt><dd>Sort</dd>
<dt><code>R</code></dt><dd>Mark as read</dd>
<dt><code>o</code></dt><dd>put refile mark</dd>
<dt><code>O</code></dt><dd>put copy mark</dd>
<dt><code>C-o</code></dt><dd>autorefile</dd>
<dt><code>d</code></dt><dd>put dispose mark, the result of disposal is controlled by <code>wl-dispose-folder-alist</code>.</dd>
<dt><code>@</code></dt><dd>add/remove/change sender to/from/in address book</dd>
<dt><code>'</code></dt><dd>quick search</dd>
</dl>

<p>
More in <a href="http://wanderlust.github.io/wl-docs/wl.html#Key-Bindings-of-Summary">the manual</a>
</p>
</div>

<div id="outline-container-org1e78f96" class="outline-4">
<h4 id="org1e78f96"><span class="section-number-4">5.0.1</span> Format of summary lines</h4>
<div class="outline-text-4" id="text-5-0-1">
<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Summary-View">manual</a>
</p>
</div>
</div>

<div id="outline-container-org7eaa841" class="outline-3">
<h3 id="org7eaa841"><span class="section-number-3">5.1</span> Message Buffer</h3>
<div class="outline-text-3" id="text-5-1">
<dl class="org-dl">
<dt><code>l</code></dt><dd>toggle display of summary buffer on the top</dd>
</dl>
</div>
</div>
</div>

<div id="outline-container-orgfa6aa22" class="outline-2">
<h2 id="orgfa6aa22"><span class="section-number-2">6</span> Send Mail</h2>
<div class="outline-text-2" id="text-6">
</div>
<div id="outline-container-org59ea1a9" class="outline-3">
<h3 id="org59ea1a9"><span class="section-number-3">6.1</span> Configure</h3>
<div class="outline-text-3" id="text-6-1">
<p>
I have two email address, this way I can chose which address I send mails from.
Hit <code>C-c C-j</code> in message mode to chose.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; default template
(setq wl-smtp-connection-type 'starttls
      wl-smtp-posting-port 587
      wl-smtp-authenticate-type "plain"
      wl-smtp-posting-user "casouri"
      wl-smtp-posting-server "smtp.gmail.com"
      wl-local-domain "gmail.com"
      wl-message-id-domain "smtp.gmail.com")
;; multi address
(setq wl-user-mail-address-list '("casouri@gmail.com" "ykf5041@psu.edu"))
(setq wl-template-alist
      '(("GMAIL"
         (wl-from . "Yuan Fu &lt;casouri@gmail.com&gt;")
         (wl-smtp-posting-user . "casouri")
         (wl-smtp-posting-server . "smtp.gmail.com")
         (wl-smtp-authenticate-type ."plain")
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-posting-port . 587)
         (wl-local-domain . "gmail.com")
         (wl-message-id-domain . "smtp.gmail.com")
         ("From" . wl-from))
        ("PSU"
         (wl-from . "Yuan Fu &lt;ykf5041@psu.edu&gt;")
         (wl-smtp-posting-user . "ykf5041@psu.edu")
         (wl-smtp-authenticate-type ."login")
         (wl-smtp-posting-server . "smtp.office365.com")
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-posting-port . 587)
         ("From" . wl-from))))
</pre>
</div>

<p>
You got to set the default config. By default WL doesn't apply any template.
Templates are kind of like color themes in Emacs, all they do is override.
</p>

<p>
Note that I set <code>wl-smtp-authenticate-type</code> to <code>"login"</code> in Outlook mail (Penn State uses Outlook).
</p>
</div>
</div>

<div id="outline-container-org37f6d72" class="outline-3">
<h3 id="org37f6d72"><span class="section-number-3">6.2</span> Write Mail</h3>
<div class="outline-text-3" id="text-6-2">
<p>
Hit <code>w</code> to start a Draft buffer and go into message mode.
</p>

<p>
Bindings:
</p>

<dl class="org-dl">
<dt><code>C-c C-j</code></dt><dd>switch between from addresses</dd>
<dt><code>C-c C-k</code></dt><dd>kill draft</dd>
<dt><code>C-c TAB</code></dt><dd>add attachment</dd>
<dt><code>C-c C-c</code></dt><dd>send and exit</dd>
<dt><code>C-c C-z</code></dt><dd>save and exit</dd>
<dt><code>C-c C-w</code></dt><dd>signature</dd>
<dt><code>C-c C-t</code></dt><dd>start editing text</dd>
<dt><code>C-c C-f</code></dt><dd>cc and friends</dd>
</dl>
</div>
</div>

<div id="outline-container-org31e71cd" class="outline-3">
<h3 id="org31e71cd"><span class="section-number-3">6.3</span> Dynamic Modification of Messages</h3>
<div class="outline-text-3" id="text-6-3">
<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; Use the same address to reply
(setq wl-draft-config-alist
      '(((string-match "psu" wl-draft-parent-folder)
         (template . "PSU"))
        ((string-match "gmail" wl-draft-parent-folder)
         (template . "GMAIL"))))
</pre>
</div>

<p>
This makes sure I always reply with the address to which the mail was send.
</p>

<p>
BTW, if it doesn't appear to work, it's because it applies when the mail is sent,
as the docstring of <code>wl-draft-config-alist</code> says:
</p>
<blockquote>
<p>
The configuration is applied when ‘wl-draft-config-exec’ is called, or
applied automatically before sending message.
</p>
</blockquote>

<p>
The format of <code>wl-draft-config-alist</code> is:
</p>

<pre class="example">
'(("regexp of the header" or elisp expression
  ("Field" . value(elisp expression))
   (variable . value(elisp expression))
   (sub-function . value(elisp expression))
   function
   …)
  ("regexp of the header" or elisp expression
   ("Field" . value(elisp expression))
   …))
</pre>

<p>
Per default, there are 13 following sub-functions.
</p>

<pre class="example">
'header:      Inserts the specified string at the bottom of the header.
'header-top:  Inserts the specified string at the top of the header.
'header-file: Inserts the specified file at the bottom of the header.
'x-face:      Inserts ‘X-Face:’ field with the content of the specified file.
'top:         Inserts the specified string at the top of the body.
'top-file:    Inserts the specified file at the top of the body.
'body:        Replaces the body with the specified string.
              Specifying nil deletes the entire body string.
'body-file:   Replaces the body with the content of the specified file.
'bottom:      Inserts the specified string at the bottom of the body.
'bottom-file: Inserts the specified file at the top of the body.
'part-top:  Inserts the specified string at the top of the current part.
'part-bottom: Inserts the specified string at the bottom of the current part.
'template:    Applies the specified template.
              (refer to the next subsection)
</pre>

<p>
More in [[<a href="http://wanderlust.github.io/wl-docs/wl.html#Dynamical-Message-Re_002darrangement">http://wanderlust.github.io/wl-docs/wl.html#Dynamical-Message-Re_002darrangement</a>][the manual]
</p>
</div>
</div>
</div>

<div id="outline-container-org1cab281" class="outline-2">
<h2 id="org1cab281"><span class="section-number-2">7</span> Address Book</h2>
<div class="outline-text-2" id="text-7">
</div>
<div id="outline-container-org5a5d894" class="outline-3">
<h3 id="org5a5d894"><span class="section-number-3">7.1</span> <code>bbdb</code> as Address Book</h3>
<div class="outline-text-3" id="text-7-1">
<p>
<code>bbdb-v3</code> supports Wanderlust directly. Get it from <a href="http://download.savannah.nongnu.org/releases/bbdb/">savannah</a>.
</p>

<p>
<a href="https://www.emacswiki.org/emacs/BBDBV3-Wl">Emacs Wiki</a> has a tutorial for <code>bbdb-v3</code> setup for Wanderlust.
<a href="http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html">Emacs-fu</a> also got a detailed tutorial, but his setup is for <code>bbdb-v2</code>.
I'll mention the different parts below.
</p>

<p>
I copied most part from emacs-fu with slight changes:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; before load
(setq bbdb-file (concat moon-star-dir "utility/email/bbdb"))

;; after load
(require 'bbdb-wl)
(bbdb-initialize 'wl)
(setq
 bbdb-wl-folder-regexp    ;; get addresses only from these folders
 "^\.inbox$\\|^.sent")
(setq
 bbdb-offer-save 1                        ;; 1 means save-without-asking

 bbdb-use-pop-up t                        ;; allow popups for addresses
 bbdb-electric-p t                        ;; be disposable with SPC
 bbdb-popup-target-lines  1               ;; very small

 bbdb-dwim-net-address-allow-redundancy t ;; always use full name
 bbdb-quiet-about-name-mismatches 2       ;; show name-mismatches 2 secs

 bbdb-always-add-address t                ;; add new addresses to existing...
 ;; ...contacts automatically
 bbdb-canonicalize-redundant-nets-p t     ;; x@foo.bar.cx =&gt; x@bar.cx

 bbdb-completion-type nil                 ;; complete on anything

 bbdb-complete-name-allow-cycling t       ;; cycle through matches
 ;; this only works partially

 bbbd-message-caching-enabled t           ;; be fast
 bbdb-use-alternate-names t               ;; use AKA


 bbdb-elided-display t                    ;; single-line addresses

 ;; auto-create addresses from mail
 bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook

 ;; don't ask about fake addresses
 ;; NOTE: there can be only one entry per header (such as To, From)
 ;; http://flex.ee.uec.ac.jp/texi/bbdb/bbdb_11.html
 bbdb-ignore-some-messages-alist
 '(( "From" . "no.?reply\\|DAEMON\\|daemon\\|facebookmail\\|twitter")))
</pre>
</div>

<p>
And in <code>.wl</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(require 'bbdb)
</pre>
</div>


<p>
To make it work for <code>bbdb-v3</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(require 'bbdb-wl)
(bbdb-initialize 'wl)
</pre>
</div>

<p>
There is also <a href="https://blog.anupamsg.me/2009/08/16/importing-contacts-from-osx-addressbook-to-emacs-bbdb/">this tutorial</a> on how to import mac contacts into bbdb,
I just don't bother.
</p>
</div>
</div>

<div id="outline-container-orgb64be80" class="outline-3">
<h3 id="orgb64be80"><span class="section-number-3">7.2</span> Built in</h3>
<div class="outline-text-3" id="text-7-2">
<p>
You can use the built in address book, I don't.
</p>

<p>
Hit <code>C-c C-a</code> to go into address manager, in address manager:
</p>

<dl class="org-dl">
<dt><code>c</code></dt><dd>add CC: mark</dd>
<dt><code>t</code></dt><dd>add To: mark</dd>
<dt><code>b</code></dt><dd>add Bcc: mark</dd>
<dt><code>u</code></dt><dd>cancel the marker</dd>
<dt><code>a</code></dt><dd>add entry</dd>
<dt><code>e</code></dt><dd>edit entry</dd>
<dt><code>d</code></dt><dd>delete entry</dd>
</dl>


<p>
In summary mode use <code>@</code> to add/remove/change sender to/from/in address book.
</p>

<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Address-Book">manual</a>
</p>
</div>
</div>
</div>

<div id="outline-container-org4f69639" class="outline-2">
<h2 id="org4f69639"><span class="section-number-2">8</span> Search Mail</h2>
<div class="outline-text-2" id="text-8">
<p>
You can use <code>notmuch</code> as a searching backend. To use <code>notmuch</code>:
</p>

<p>
Set:
</p>

<pre class="example">
(setq wl-quicksearch-folder "[]")
(setq elmo-search-default-engine 'notmuch)

</pre>

<p>
And download <code>notmuch</code> and set it up by <code>notmuch new</code>.
</p>

<p>
Then hit <code>'</code> to start a quick search.
</p>

<p>
Here is all the available <code>notmuch</code> searching patterns: <a href="https://notmuchmail.org/searching/">manual</a>.
</p>
</div>
</div>

<div id="outline-container-orgbaca5d1" class="outline-2">
<h2 id="orgbaca5d1"><span class="section-number-2">9</span> Auto Refile</h2>
<div class="outline-text-2" id="text-9">
<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Auto-Refile">manual</a>
</p>
</div>
</div>

<div id="outline-container-orgd24313c" class="outline-2">
<h2 id="orgd24313c"><span class="section-number-2">10</span> Expire rules</h2>
<div class="outline-text-2" id="text-10">
<p>
The expire rules are based on folders, you specific a time to expire and a destination of expiration,
usually trash folder or simply remove.
</p>

<p>
But what if we don't want to expire the whole buffer? You have <a href="http://wanderlust.github.io/wl-docs/wl.html#Filter-Folder">filter folders</a> to the rescue :)
</p>

<p>
<a href="http://wanderlust.github.io/wl-docs/wl.html#Expire">expire manual</a>
</p>

<p>
Example:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; expire
(setq wl-expire-alist
      `((,(concat "/cc:emacs-devel@gnu.org/" (regexp-quote ".~/Mail/Gmail/Inbox")) (date 7) trash)
        (,(regexp-quote ".~/Mail/Gmail/[Gmail]/Trivial") (date 14) trash)))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgfd674d8" class="outline-2">
<h2 id="orgfd674d8"><span class="section-number-2">11</span> Other</h2>
<div class="outline-text-2" id="text-11">
</div>
<div id="outline-container-org4c16972" class="outline-3">
<h3 id="org4c16972"><span class="section-number-3">11.1</span> Save password</h3>
<div class="outline-text-3" id="text-11-1">
<p>
Once you entered password, run <code>elmo-passwd-alis-save</code> to save password in=~/.elmo/passwd=.
The password is encrypted so don't worry.
</p>
</div>
</div>

<div id="outline-container-org54b9820" class="outline-3">
<h3 id="org54b9820"><span class="section-number-3">11.2</span> Ignore Crap in Header</h3>
<div class="outline-text-3" id="text-11-2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq wl-message-ignored-field-list
      '(".")
      wl-message-visible-field-list
      '("^\\(To\\|Cc\\):"
        "^Subject:"
        "^\\(From\\|Reply-To\\):"
        "^\\(Posted\\|Date\\):"
        "^Organization:"
        "^X-\\(Face\\(-[0-9]+\\)?\\|Weather\\|Fortune\\|Now-Playing\\):")
      wl-message-sort-field-list
      (append wl-message-sort-field-list
              '("^Reply-To" "^Posted" "^Date" "^Organization")))
</pre>
</div>
</div>
</div>

<div id="outline-container-org78b1f79" class="outline-3">
<h3 id="org78b1f79"><span class="section-number-3">11.3</span> Show folders in Summary Buffer</h3>
<div class="outline-text-3" id="text-11-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq wl-stay-folder-window t)
</pre>
</div>
</div>
</div>

<div id="outline-container-orga25f8c1" class="outline-3">
<h3 id="orga25f8c1"><span class="section-number-3">11.4</span> X-Face</h3>
<div class="outline-text-3" id="text-11-4">
<p>
Download x-face-e21.el from <a href="http://www.jpl.org/ftp/pub/elisp/">http://www.jpl.org/ftp/pub/elisp/</a>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(autoload 'x-face-decode-message-header "x-face-e21")
(setq wl-highlight-x-face-function 'x-face-decode-message-header)
</pre>
</div>

<p>
As long as <code>wl-x-face-file</code> exists, WL automatically insert X-Face into header.
You can control this behavior by <code>wl-auto-insert-x-face</code>.
</p>
</div>
</div>
</div>

<div id="outline-container-orgb56bba9" class="outline-2">
<h2 id="orgb56bba9"><span class="section-number-2">12</span> Funny Quote</h2>
<div class="outline-text-2" id="text-12">
<p>
From <a href="http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html">here</a>:
</p>

<blockquote>
<p>
It's a particulary nice setup for offline-usage: whenever there's a network connection, I suck up all the mails and have them available offline.
</p>
</blockquote>

<p>
From <a href="http://mihai.bazon.net/articles/emacs/wanderlust-email-client">here</a>:
</p>

<blockquote>
<p>
Wanderlust (WL) is an email client for Emacs.  I stumbled upon it in my never ending search for an email client that doesn't suck.  Wanderlust does suck, God it does! — but I'm using it for a few days and I was tricked to think that it sucks less than others.
</p>
</blockquote>

<blockquote>
<p>
WL, like other Emacs-based email clients, is not for everyone.  Before you get into it, I think you should ask yourself two questions:
</p>

<p>
Are you an Emacs user?
Do you think that all email clients suck?
If you answer “yes” to exactly one of these questions, you might want to give WL a chance.  “Yes” to both questions means that WL is just what you're looking for.  If your answer is “no” to both questions, save yourself some time and stop reading now. ;-)
</p>
</blockquote>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Fri, 28 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>My Favorite Animes</title>
<link>https://archive.casouri.co.uk/note/2018/my-favorite-animes/</link>
<guid>https://archive.casouri.co.uk/note/2018/my-favorite-animes/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>My Favorite Animes</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">My Favorite Animes</h1>
<ul class="org-ul">
<li>Cowboy Bebop</li>
<li>Space Dandy</li>
<li>Ghost in the Shell</li>
<li>少女终末旅行</li>
<li>鬼灯的冷彻</li>
</ul>
</div>
</body>
</html>]]></description>

<pubDate>Fri, 28 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Use Indirect Buffers</title>
<link>https://archive.casouri.co.uk/note/2018/use-indirect-buffers/</link>
<guid>https://archive.casouri.co.uk/note/2018/use-indirect-buffers/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Use Indirect Buffers</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Use Indirect Buffers</h1>
<p>
It seems that not many people know about <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Indirect-Buffers.html">indirect buffers</a> in Emacs.
</p>

<p>
Indirect buffer is basically another buffer but shares the content with the original buffer.
Any change will sync instantaneously in either buffer.
The good thing is, anything else are independent between the two buffer,
e.g. point, selection, narrrow, etc. So you can narrow or scroll in a indirect buffer
and the original buffer will be left unaffected.
</p>

<p>
<code>C-x 4 c</code> creates a indirect buffer and displays it in another window.
</p>
</div>
</body>
</html>]]></description>

<pubDate>Wed, 12 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Basic Sorting Algorithm</title>
<link>https://archive.casouri.co.uk/note/2018/basic-sorting-algorithm/</link>
<guid>https://archive.casouri.co.uk/note/2018/basic-sorting-algorithm/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Basic Sorting Algorithm</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Basic Sorting Algorithm</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org7dd7729">1. Bubble Sort</a>
<ul>
<li><a href="#org66f6d0f">1.1. Normal bubble</a></li>
<li><a href="#org1a80a9c">1.2. Short bubble</a></li>
</ul>
</li>
<li><a href="#orgfdfd26d">2. Selection Sort</a></li>
<li><a href="#org74f4d86">3. Insertion Sort</a></li>
<li><a href="#org88c0949">4. Shell Sort</a></li>
<li><a href="#org664ad1a">5. Merge Sort</a></li>
<li><a href="#org311c72e">6. Quick Sort</a></li>
</ul>
</div>
</div>
<p>
<a href="./sort.py">Download python source file</a>
</p>

<p>
This is my study note when following alone interactive python.
</p>

<p>
<b>Note:</b> all images are from <a href="http://interactivepython.org/courselib/static/pythonds/index.html">iteractive python</a>.
</p>

<div id="outline-container-org7dd7729" class="outline-2">
<h2 id="org7dd7729"><span class="section-number-2">1</span> Bubble Sort</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheBubbleSort.html">REF</a>
</p>
</div>

<div id="outline-container-org66f6d0f" class="outline-3">
<h3 id="org66f6d0f"><span class="section-number-3">1.1</span> Normal bubble</h3>
<div class="outline-text-3" id="text-1-1">
<p>
For each pair in the list (1&amp;2, 2&amp;3, 3&amp;4), if the former is greater than latter, swap.
After one pass from 0 to n, the largest number should be in the last position.
Then only n-1 numbers need to be sorted, so it perform another pass from 0 to n-1.
</p>

<p>
Therefore the time complexity is \(O(n^2)\).
</p>


<div class="figure">
<p><img src="./bubblepass.png" alt="bubblepass.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python">def bubble(lis):
    for last_num in range(len(lis) - 1, 0, -1):
        for index in range(0, last_num):
            if lis[index] &gt; lis[index + 1]:
                tmp = lis[index]
                lis[index] = lis[index + 1]
                lis[index + 1] = tmp
    return lis


alist = [54, 26, 93, 17, 77, 31, 44, 55, 20]
bubble(alist)
print(alist)
</pre>
</div>
</div>
</div>

<div id="outline-container-org1a80a9c" class="outline-3">
<h3 id="org1a80a9c"><span class="section-number-3">1.2</span> Short bubble</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Although bubble sort wastes time swapping, it has a unique character among sorting algorithms:
If it runs a pass without swapping any pair, then the list is already sorted and the program can end early.
</p>

<p>
That is good for lists that are almost sorted. The list below only need one pass.
</p>

<div class="org-src-container">
<pre class="src src-python">def short_bubble(lis):
    swapped_last_iter = True
    last_num = len(lis) - 1
    iter_count = 0
    while last_num and swapped_last_iter:
        iter_count += 1
        for index in range(0, last_num):
            if lis[index] &gt; lis[index + 1]:
                swapped_last_iter = True
                tmp = lis[index]
                lis[index] = lis[index + 1]
                lis[index + 1] = tmp
            else:
                swapped_last_iter = False
        last_num -= 1
    print(iter_count)

alist = [20, 30, 40, 90, 50, 60, 70, 80, 100, 110]
short_bubble(alist)
print(alist)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgfdfd26d" class="outline-2">
<h2 id="orgfdfd26d"><span class="section-number-2">2</span> Selection Sort</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheSelectionSort.html">REF</a>
</p>

<p>
The selection sort improves on the bubble sort by making only one exchange for every pass through the list.
Basically on each pass it looks for the largest number and then insert it in the proper place.
</p>

<p>
Although the time complexity of selection sort is also \(O(n^2)\),
but because it makes much less exchanges, selection sort is usually faster than bubble sort.
</p>


<div class="figure">
<p><img src="./selection.png" alt="selection.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python">def selection(lis):
    # note that it's to 1, not 0
    # because we only need to place n to n-1 position
    # then 0 position will be left with the smallest number
    for index_of_last_num in range(len(lis) - 1, 1, -1):
        index_of_max = 0
        # look for max number ('s index)
        for index in range(0, index_of_last_num + 1):
            if lis[index] &gt; lis[index_of_max]:
                index_of_max = index
        # swap
        tmp = lis[index_of_last_num]
        lis[index_of_last_num] = lis[index_of_max]
        lis[index_of_max] = tmp


alist = [54, 26, 93, 17, 77, 31, 44, 55, 20]
selection(alist)
print(alist)
</pre>
</div>
</div>
</div>

<div id="outline-container-org74f4d86" class="outline-2">
<h2 id="org74f4d86"><span class="section-number-2">3</span> Insertion Sort</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheInsertionSort.html">REF</a>
</p>

<p>
The insertion sort, although still \(O(n^2)\), uses shifting instead of swapping,
which is more efficient. Insertion sort maintains a sorted list in the beginning of the
list.
</p>

<p>
It assumes the first item of the list is sorted (sorted one item list),
and then for the 2nd, 3rd, &#x2026; item, it shifts the number in the sorted list
to put it into proper position.
</p>


<div class="figure">
<p><img src="./insertion.png" alt="insertion.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python">def insertion(lis):
    for index_of_moving_num in range(1, len(lis)):
        moving_num = lis[index_of_moving_num]
        # this position is at the end of the sorted list
        position = index_of_moving_num

        # shift forward until reached the beginning of the list
        # or found the right position
        while position &gt; 0 and lis[position - 1] &gt; moving_num:
            # shift the number before back
            lis[position] = lis[position - 1]
            position -= 1

        lis[position] = moving_num


alist = [54, 26, 93, 17, 77, 31, 44, 55, 20]
insertion(alist)
print(alist)
</pre>
</div>
</div>
</div>

<div id="outline-container-org88c0949" class="outline-2">
<h2 id="org88c0949"><span class="section-number-2">4</span> Shell Sort</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheShellSort.html">REF</a>
</p>

<p>
Or diminishing increment sort.
It improves insertion sort by breaking a list into several sub lists
and perform insertion sort on them. The key is that instead of breaking the list
into continuous sub lists, shell sort chose a <i>increment</i> <code>i</code>, and
choose all items <code>i</code> apart into a sub list.
</p>


<div class="figure">
<p><img src="./shellsortA.png" alt="shellsortA.png" />
</p>
</div>

<p>
Then by sorting these sub lists, items are closer to their right position
</p>


<div class="figure">
<p><img src="./shellsortB.png" alt="shellsortB.png" />
</p>
</div>

<p>
After all sub lists are sorted, a final insertion sort sorts everything into position.
Because of the earlier sub list sorting, the final sort requires less shifting.
</p>

<p>
Shell sort's time complexity often falls somewhere between \(O(n)\) and \(O(n^2)\).
By changing the increment, for example using \(2k−1\),
(1, 3, 7, 15, 31, and so on), a shell sort can perform at \(O(n^\frac{3}{2})\).
</p>

<div class="org-src-container">
<pre class="src src-python">def gap_insertion(lis, start_pos, gap):
    # same as insertion but step by sublist_count instead of 1
    for index in range(start_pos + gap, len(lis), gap):
        moving_num = lis[index]
        position = index
        while position &gt;= gap and lis[position - gap] &gt; moving_num:
            lis[position] = lis[position - gap]
            position = position - gap
        lis[position] = moving_num


def shell(lis):
    sublist_count = len(lis) // 2
    while sublist_count &gt; 0:
        for start_pos in range(sublist_count):
            gap_insertion(lis, start_pos, sublist_count)
        print(
            'Sorted sublists of number %d and list looks like' % sublist_count)
        print(lis)
        sublist_count = sublist_count // 2


alist = [54, 26, 93, 17, 77, 31, 44, 55, 20]
shell(alist)
print(alist)
</pre>
</div>
</div>
</div>

<div id="outline-container-org664ad1a" class="outline-2">
<h2 id="org664ad1a"><span class="section-number-2">5</span> Merge Sort</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheMergeSort.html">REF</a>
</p>

<p>
Merge sort has to stages: in the first stage it recursively subdivides
the list by half until there is only on item in each list;
in the second stage it merges each sublists back and sort them in the same time.
</p>

<p>
In the first stage the list is subdivided \(\log_2 n\) times,
so the time complexity is \(O(n \log n)\).
</p>


<div class="figure">
<p><img src="./mergesortA.png" alt="mergesortA.png" />
</p>
</div>


<div class="figure">
<p><img src="./mergesortB.png" alt="mergesortB.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python">def merge(lis):
    print("Splitting:", lis)
    if len(lis) &gt; 1:
        # split and merge
        mid = len(lis) // 2
        left = lis[:mid]
        right = lis[mid:]

        merge(left)
        merge(right)

        # merge them
        i = 0
        j = 0
        k = 0
        while i &lt; len(left) and j &lt; len(right):
            # before left and right run out
            # compare their smallest element (the first)
            # and insert the smaller one into the main list
            if left[i] &lt; right[j]:
                lis[k] = left[i]
                i += 1
            else:
                lis[k] = right[j]
                j += 1
            k += 1
        # in case one list runs out before another,
        # which is likely to happen
        while i &lt; len(left):
            lis[k] = left[i]
            i += 1
            k += 1
        while j &lt; len(right):
            lis[k] = right[j]
            j += 1
            k += 1
    print("Merging:", lis)

alist = [54,26,93,17,77,31,44,55,20]
merge(alist)
print(alist)

</pre>
</div>

<p>
Output:
</p>
<div class="org-src-container">
<pre class="src src-shell">Splitting: [54, 26, 93, 17, 77, 31, 44, 55, 20]
Splitting: [54, 26, 93, 17]
Splitting: [54, 26]
Splitting: [54]
Merging: [54]
Splitting: [26]
Merging: [26]
Merging: [26, 54]
Splitting: [93, 17]
Splitting: [93]
Merging: [93]
Splitting: [17]
Merging: [17]
Merging: [17, 93]
Merging: [17, 26, 54, 93]
Splitting: [77, 31, 44, 55, 20]
Splitting: [77, 31]
Splitting: [77]
Merging: [77]
Splitting: [31]
Merging: [31]
Merging: [31, 77]
Splitting: [44, 55, 20]
Splitting: [44]
Merging: [44]
Splitting: [55, 20]
Splitting: [55]
Merging: [55]
Splitting: [20]
Merging: [20]
Merging: [20, 55]
Merging: [20, 44, 55]
Merging: [20, 31, 44, 55, 77]
Merging: [17, 20, 26, 31, 44, 54, 55, 77, 93]
[17, 20, 26, 31, 44, 54, 55, 77, 93]
</pre>
</div>

<p>
Note that slicing is \(O(k)\) where \(k\) is the size of the list.
So in order to get truly \(O(n \log n)\) you need to play around with pointers, which I'm too lazy to do.
</p>
</div>
</div>

<div id="outline-container-org311c72e" class="outline-2">
<h2 id="org311c72e"><span class="section-number-2">6</span> Quick Sort</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://interactivepython.org/courselib/static/pythonds/SortSearch/TheQuickSort.html">REF</a>
</p>

<p>
The quick sort uses divide and conquer to gain the same advantages as the merge sort, while not using additional storage. As a trade-off, however, it is possible that the list may not be divided in half. When this happens, we will see that performance is diminished.
</p>

<p>
A quick sort first selects a value, which is called the <b>pivot value</b>. Although there are many different ways to choose the pivot value, we will simply use the first item in the list. The role of the pivot value is to assist with splitting the list. The actual position where the pivot value belongs in the final sorted list, commonly called the <b>split point</b>, will be used to divide the list for subsequent calls to the quick sort.
</p>

<p>
How it works:
</p>

<ol class="org-ol">
<li>Find the <b>pivot value</b>, in this case the first element 54.</li>
<li>Put <code>leftmark</code> and <code>rightmark</code> on the first and last position of the remaining list.</li>
<li>Repeat until <code>leftmark</code> and <code>rightmark</code> cross:
<ol class="org-ol">
<li><code>leftmark</code> go right until hit a number greater than <b>pivot value</b>.</li>
<li><code>rightmark</code> go left until hit a number less than <b>pivot value</b>.</li>
<li>Swap number under <code>leftmark</code> and <code>rightmark</code>.</li>
</ol></li>
<li>Now, we consider the <code>rightmark</code> the split point, all elements to its left is smaller than <b>pivot value</b>
and all elements to it's right is greater than <b>pivot value</b>. Insert <b>pivot value</b> (54) at <code>rightmark</code>.</li>
<li>Recursively sort the two halves with above steps.</li>
</ol>


<div class="figure">
<p><img src="./firstsplit.png" alt="firstsplit.png" />
</p>
</div>


<div class="figure">
<p><img src="./partitionA.png" alt="partitionA.png" />
</p>
</div>


<div class="figure">
<p><img src="./partitionB.png" alt="partitionB.png" />
</p>
</div>

<div class="org-src-container">
<pre class="src src-python">def quick(lis, first=None, last=None):
    # first and last default to 0 and len -1
    first = 0 if first == None else first
    last = len(lis) - 1 if last == None else last

    if first &lt; last:
        # step 3
        split_point = partition(lis, first, last)
        # recursively sort
        quick(lis, first, split_point - 1)
        quick(lis, split_point + 1, last)

def partition(lis, first, last):
    pivot_value = lis[first]

    leftmark = first + 1
    rightmark = last

    done = False
    while not done:
        # step 3.1
        # move leftmark until hit a number greater than pivot value
        while leftmark &lt;= rightmark and lis[leftmark] &lt;= pivot_value:
            leftmark += 1
        # step 3.2
        # move rightmark until hit a number less than pivot value.
        while leftmark &lt;= rightmark and lis[rightmark] &gt;= pivot_value:
            rightmark -= 1

        if rightmark &lt; leftmark:
            done = True
        else:
            # swap
            tmp = lis[rightmark]
            lis[rightmark] = lis[leftmark]
            lis[leftmark] = tmp

    # Now all numbers left of rightmark is smaller than pivot value
    # and all numbers left of leftmark is greater than pivot value
    tmp = lis[first] # pivot value
    lis[first] = lis[rightmark]
    lis[rightmark] = tmp

    return rightmark # return as split_point


alist = [54,26,93,17,77,31,44,55,20]
quick(alist)
print(alist)
</pre>
</div>

<p>
The problem with quick sort is that in worst case the pivot value so off that one
sub list is of length 0 and another is of length \(n - 1\), then \(n - 2\), and so on.
Then you get a time complexity of \(O(n^2)\).
</p>

<p>
To workaround this, use a technique called <b>median of three</b>: chose the first, middle and last number,
and use the median.
</p>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Cool URI Does not Change</title>
<link>https://archive.casouri.co.uk/note/2018/cool-uri-does-not-change/</link>
<guid>https://archive.casouri.co.uk/note/2018/cool-uri-does-not-change/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Cool URI Does not Change</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Cool URI Does not Change</h1>
<p>
I recently read this article: <a href="https://www.w3.org/Provider/Style/URI">Cool URIs don't change</a>. (found it on this <a href="https://ambrevar.xyz/blog-architecture/">blog</a>)
</p>

<p>
To summary:
</p>
<ol class="org-ol">
<li>URI (should) never change</li>
<li>As a webmaster (I like this word!) you should name URIs to last.</li>
<li>To design a ever-lasting URI:
<ul class="org-ul">
<li>What to use in URI:
<ol class="org-ol">
<li>Created time, it never changes. For example the year.
Another advantage of using created year is that,
when you refer back to <code>/2018/pics/</code> 200 years later,
you know that it mean what <code>pic</code> means in 2018 instead of in 2218.</li>
</ol></li>
<li>What to leave out (basically anything that might change):
<ol class="org-ol">
<li>Authors name.</li>
<li>Subject. The author of the original article claims that it changes
surprisingly fast.</li>
<li>Access. Like group access, personal access, public access, etc.</li>
<li>File name extension.</li>
<li>Software mechanisms. Such as <code>cgi</code>, <code>exce</code>, <code>rb</code>, etc.</li>
</ol></li>
</ul></li>
</ol>
</div>
</body>
</html>]]></description>

<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Blog with only Org Mode</title>
<link>https://archive.casouri.co.uk/note/2018/blog-with-only-org-mode/</link>
<guid>https://archive.casouri.co.uk/note/2018/blog-with-only-org-mode/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Blog with only Org Mode</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Blog with only Org Mode</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org029d261">1. Organization</a></li>
<li><a href="#orgb72062e">2. CSS</a>
<ul>
<li><a href="#org1521074">2.1. Including Custom Style Sheet</a></li>
<li><a href="#orgcf1ed1d">2.2. Disable Default Styling</a></li>
<li><a href="#org1b4d3c9">2.3. Floating TOC by CSS</a></li>
<li><a href="#orge03aa7a">2.4. Image Size</a></li>
</ul>
</li>
<li><a href="#org67e2497">3. Add UP and HOME link</a></li>
<li><a href="#org2252a8c">4. <span class="todo TODO">TODO</span> RSS feeds</a></li>
<li><a href="#org60f9b5a">5. <span class="todo TODO">TODO</span> Bind Emacs style shortcuts</a></li>
<li><a href="#org54190a0">6. Links</a></li>
<li><a href="#org99d89fc">7. Meta data like date and title</a></li>
<li><a href="#org718a464">8. Further reading</a></li>
</ul>
</div>
</div>
<p>
Nowadays you can choose from a handful of static blog frameworks, like hexo, pelican, etc.
Most of them support Markdown, and you can use Org Mode along with them by exporting Org file
to Markdown file. Some framework even has deeper integration. For example the package ox-hugo
provides a dozen advanced export options and well intergrated hugo and Org Mode options/properties.
</p>

<p>
Using frameworks has some advantages and some disadvantages.
On the one side, you get pretty themes, animation, dynamic(automatic) content generation, automatic publication, etc.
On the other side, your cost is: learn a framework, choose from a limited selection of themes or make your own, etc.
</p>

<p>
For me, I don't need animation or pre-made themes.
my blog contains few duplicated parts that need automation,
and I can just write some quick snippet to handle that.
Publication isn't a problem either because I host my blog in GitHub Pages.
All I need is a trivial alias that commits everything and push them.
</p>

<p>
And the cost of a framework is just Too Much Trouble® for me. I tried pelican and hugo and never liked them.
</p>

<p>
Turns out that, <b>Org Mode already provides me with everything I need.</b>
The html export options in Org Mode helps build my blog with trivial effort.
Plus, when building blog with plain HTML, JavaScript, CSS and Org Mode I have so much more control and flexibility.
CSS is much easier because your are writing it directly to HTML, instead of some fancy tags that you don't know who defined.
The blog your are currently reading from is built without any framework and looks pretty complete to me.
</p>

<p>
Below is how do I build my blog.
</p>

<div id="outline-container-org029d261" class="outline-2">
<h2 id="org029d261"><span class="section-number-2">1</span> Organization</h2>
<div class="outline-text-2" id="text-1">
<p>
All my blog posts are under <a href="https://archive.casouri.co.uk/note/">https://archive.casouri.co.uk/note/</a>
</p>

<div class="org-src-container">
<pre class="src src-shell">.
|-- 2018
|   |-- bindings-in-web-page
|   |   `-- index.org
|   |-- blog-with-only-org-mode
|   |   `-- index.org
|   |-- fancy-startup-screen-for-emacs
|   |   |-- home.png
|   |   |-- index.html
|   |   |-- index.org
|   |   |-- moon.gif
|   |   `-- moon.png
|   `-- note-about-domain-and-dns
|       |-- index.html
|       `-- index.org
|-- index.html
|-- index.org
`-- style.css

5 directories, 12 files
</pre>
</div>

<p>
Each sub directory is a year, and sub directories of that are individual posts.
The  <code>index.org</code> and (exported) <code>index.html</code> are the actual content.
Other static contents of a page like images are under the same directory.
Whenever I update an Org file, I re-export it by <code>C-c C-e h h</code>. Then commit both files.
(I could have write a org publish pipeline but too lazy to do so, Magit is just too easy to use.)
</p>

<p>
Under the root directory (<code>/note/</code>), I have a style sheet, a index.org and a index.html in root directory.
<code>index.org</code> and (exported) <code>index.html</code> is my home page. Every page under <code>/note/</code> links to <code>style.css</code>.
</p>
</div>
</div>

<div id="outline-container-orgb72062e" class="outline-2">
<h2 id="orgb72062e"><span class="section-number-2">2</span> CSS</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org1521074" class="outline-3">
<h3 id="org1521074"><span class="section-number-3">2.1</span> Including Custom Style Sheet</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Including style sheet(s) is quite easy.
In each Org file that you want to link the style sheet, insert <code>#+HTML_HEAD:</code> or <code>#+HTML_HEAD_EXTRA:</code>.
</p>

<p>
Here is what I have in my Org file:
</p>

<div class="org-src-container">
<pre class="src src-org-mode">#+HTML_HEAD: &lt;link rel="stylesheet" type="text/css" href="/note/style.css"/&gt;
#+HTML_HEAD_EXTRA: &lt;script type="text/javascript" src="/note/script.js"&gt;&lt;/script&gt;
</pre>
</div>

<p>
The first line includes the global style sheet I use for pages across my whole personal web site.
The second line includes the scripting file which I will talk about later.
</p>

<p>
Inside my local <code>/note/style.css</code> I have this snippet to import my global style sheet:
</p>

<div class="org-src-container">
<pre class="src src-CSS">@import url("/style.css");
</pre>
</div>

<p>
For all the classes Org Mode uses when exporting to HTML, you can find them <a href="https://orgmode.org/manual/CSS-support.html#CSS-support">here</a>.
However, that isn't the ultra complete list, the best way is probably look at the exported HTML file.
</p>

<p>
You can open the exported html file in your favorite browser and play with CSS by developer tool.
</p>
</div>
</div>

<div id="outline-container-orgcf1ed1d" class="outline-3">
<h3 id="orgcf1ed1d"><span class="section-number-3">2.2</span> Disable Default Styling</h3>
<div class="outline-text-3" id="text-2-2">
<p>
To turn off the default CSS styling, insert <code>#+OPTIONS: html-style:nil</code>.
</p>
</div>
</div>

<div id="outline-container-org1b4d3c9" class="outline-3">
<h3 id="org1b4d3c9"><span class="section-number-3">2.3</span> Floating TOC by CSS</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Put this into your custom css file and you can get a floating TOC on the right of the screen.
I use <a href="https://www.w3schools.com/cssref/css3_pr_mediaquery.asp">media rule</a> so TOC only floats on desktop.
</p>
<div class="org-src-container">
<pre class="src src-CSS">@media screen and (min-width: 800px) {
    #table-of-contents  {
        position: fixed;
        top: 5%;
        right: 2%;
    }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-orge03aa7a" class="outline-3">
<h3 id="orge03aa7a"><span class="section-number-3">2.4</span> Image Size</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Because I use a MacBook, my screen shots and photos are usually enormous.
It is great viewing them locally, but not so great when I put them on to the Web.
</p>

<p>
To fix those ridiculously large images, I set this rule in my CSS:
</p>

<div class="org-src-container">
<pre class="src src-CSS">img {
    max-width: 400px;
}
</pre>
</div>

<p>
and assign custom size with <code>#+ATTR_HTML: :width 100px</code> for individual images.
</p>
</div>
</div>
</div>

<div id="outline-container-org67e2497" class="outline-2">
<h2 id="org67e2497"><span class="section-number-2">3</span> Add UP and HOME link</h2>
<div class="outline-text-2" id="text-3">
<p>
If you add these options,
the exported HTML page will contain the hyperlink
to upper level and home page on the top of the exported web page.
</p>

<p>
I linked both <code>UP</code> and <code>HOME</code> to my home page because
there isn't any other layer between each post and home page.
</p>
<div class="org-src-container">
<pre class="src src-org-mode">#+HTML_LINK_UP: /note
#+HTML_LINK_HOME: /note
</pre>
</div>
</div>
</div>

<div id="outline-container-org2252a8c" class="outline-2">
<h2 id="org2252a8c"><span class="section-number-2">4</span> <span class="todo TODO">TODO</span> RSS feeds</h2>
<div class="outline-text-2" id="text-4">
<p>
A blog without RSS feeds isn't complete.
But Org Mode didn't have a very good way to generate RSS feeds.
</p>

<p>
<a href="https://www.wired.com/2010/02/rss_for_beginnners/">https://www.wired.com/2010/02/rss_for_beginnners/</a>
</p>
</div>
</div>

<div id="outline-container-org60f9b5a" class="outline-2">
<h2 id="org60f9b5a"><span class="section-number-2">5</span> <span class="todo TODO">TODO</span> Bind Emacs style shortcuts</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="https://medium.com/@melwinalm/crcreating-keyboard-shortcuts-in-javascripteating-keyboard-shortcuts-in-javascript-763ca19beb9e">https://medium.com/@melwinalm/crcreating-keyboard-shortcuts-in-javascripteating-keyboard-shortcuts-in-javascript-763ca19beb9e</a>
</p>

<p>
<a href="https://craig.is/killing/mice">https://craig.is/killing/mice</a>
</p>
</div>
</div>

<div id="outline-container-org54190a0" class="outline-2">
<h2 id="org54190a0"><span class="section-number-2">6</span> Links</h2>
<div class="outline-text-2" id="text-6">
<p>
Links work just like paths: <code>/</code> is the root URL, for me it is <code>arhive.casouri.co.uk</code>;
relative links like <code>./</code> and <code>../</code> works just like you would expected.
Since my source files (Org files) and ouput files (HTML files) are under the same directory,
I don't need to worry about path differences.
</p>

<p>
Internal links works without any problem either.
<a href="#org99d89fc">This internal link to the next heding</a> works in both Org file and the exported webpage.
</p>

<p>
Internal links are inserted just like external links: hit <code>C-c C-l</code>, and insert the
heading or tag you want to link to, <code>RET</code>, insert the display name you want it to have (leave blank if you want none.)
</p>

<p>
Manual for <a href="https://orgmode.org/manual/External-links.html">external links</a> and <a href="https://orgmode.org/manual/Internal-links.html">internal links</a>
</p>
</div>
</div>

<div id="outline-container-org99d89fc" class="outline-2">
<h2 id="org99d89fc"><span class="section-number-2">7</span> Meta data like date and title</h2>
<div class="outline-text-2" id="text-7">
<p>
You probably already know these stuff:
</p>

<div class="org-src-container">
<pre class="src src-org-mode">#+DATE:
#+TITLE:
#+AUTHOR:
#+EMAIL:
etc
</pre>
</div>

<p>
BTW, you can insert a time stamp by <code>C-c .</code>
</p>

<p>
Check out the <a href="https://orgmode.org/manual/Export-settings.html">complete list</a>. You can use <code>C-c C-e #</code> to insert template with export options.
</p>
</div>
</div>


<div id="outline-container-org718a464" class="outline-2">
<h2 id="org718a464"><span class="section-number-2">8</span> Further reading</h2>
<div class="outline-text-2" id="text-8">
<p>
Checkout <a href="https://orgmode.org/manual/HTML-export.html#HTML-export">the manual</a>.
</p>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Note About Domain and DNS</title>
<link>https://archive.casouri.co.uk/note/2018/note-about-domain-and-dns/</link>
<guid>https://archive.casouri.co.uk/note/2018/note-about-domain-and-dns/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Note About Domain and DNS</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Note About Domain and DNS</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org3b7ad32">1. What Is DNS</a></li>
<li><a href="#orge7ec1a8">2. Domain Hierarchy</a>
<ul>
<li><a href="#orgb8ab7c9">2.1. Side Note: dot in the end of a domain</a></li>
</ul>
</li>
<li><a href="#org70557b2">3. Some Terminology</a>
<ul>
<li><a href="#org6c21265">3.1. Resource Record (RR)</a></li>
<li><a href="#org2b38ed8">3.2. DNS Zone</a></li>
<li><a href="#org270a7fe">3.3. Domain Register</a></li>
<li><a href="#org19e36d4">3.4. Name server</a></li>
<li><a href="#orgeeef8f8">3.5. Zone file</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-org3b7ad32" class="outline-2">
<h2 id="org3b7ad32"><span class="section-number-2">1</span> What Is DNS</h2>
<div class="outline-text-2" id="text-1">
<p>
DNS routing translates a domain name (<code>example.com</code>) to an IP address (<code>18.28.0.35</code>).
</p>
</div>
</div>

<div id="outline-container-orge7ec1a8" class="outline-2">
<h2 id="orge7ec1a8"><span class="section-number-2">2</span> Domain Hierarchy</h2>
<div class="outline-text-2" id="text-2">

<div class="figure">
<p><img src="https://www.slashroot.in/sites/default/files/DNS%20domain%20name%20classification.png" alt="DNS%20domain%20name%20classification.png" />
</p>
</div>

<p>
Top to bottom:
</p>
<ol class="org-ol">
<li>13 root servers</li>
<li>(TLD) Top Level Domain (<code>.com .co .moe .edu .org</code>)</li>
<li>Second level domains (<code>casouri psu nintendo</code>)</li>
<li>sub domains (<code>blog archive</code>)</li>
</ol>

<p>
For example, in following domain,
</p>
<pre class="example">
archive.casouri.co.uk
</pre>

<p>
<code>co.uk</code> is the Top Level Domain, <code>casouri</code> is the secondary domain (which I bought from gandi.net),
<code>archive</code> is the sub domain (which I can create as many as I want).
</p>

<p>
Most of the Top Level Domains isn't made of two separate parts like <code>co.uk</code>,
I have no idea why British made their country TLD like that.
</p>
</div>

<div id="outline-container-orgb8ab7c9" class="outline-3">
<h3 id="orgb8ab7c9"><span class="section-number-3">2.1</span> Side Note: dot in the end of a domain</h3>
<div class="outline-text-3" id="text-2-1">
<p>
You might have seen domains with a dot in the end:
</p>
<pre class="example">
archive.casouri.co.uk.
</pre>

<p>
This not only is a valid domain, but also a better (more concise) format than the one
without the dot in the end. The ending dot is like the root directory <code>/</code>, it marks the root of the domain.
And a domain with that dot in the end is considered absolute, just like an absolute path.
</p>

<p>
Similarly, a domain without an ending dot is considered relative.
So I can totally add something after it like <code>archive.casouri.co.uk.what.is.this.com</code>,
just like what I can do to a relative path.
</p>
</div>
</div>
</div>

<div id="outline-container-org70557b2" class="outline-2">
<h2 id="org70557b2"><span class="section-number-2">3</span> Some Terminology</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org6c21265" class="outline-3">
<h3 id="org6c21265"><span class="section-number-3">3.1</span> Resource Record (RR)</h3>
<div class="outline-text-3" id="text-3-1">
<p>
DNS resource records are basically mapping files that
tell the DNS server which IP address each domain is associated with.
</p>

<p>
Here are the most commonly used types of DNS records:
</p>

<dl class="org-dl">
<dt>A record</dt><dd>An A record maps a domain name (e.g., www.example.com) to an IP address and usually starts with www.</dd>
<dt>CNAME record</dt><dd>A Canonical Name (CNAME) is a type of record in the DNS that is used to specify
that a domain name is an alias for another domain or sub domain.
I used a CNAME record to link <code>archive.casouri.co.uk.</code> to <code>casouri.github.io.</code></dd>
<dt>MX record</dt><dd>A mail exchanger (MX) record refers to a resource record (RR) that routes traffic to an email server.
More on <a href="https://en.wikipedia.org/wiki/MX_record">https://en.wikipedia.org/wiki/MX_record</a>.</dd>
<dt>TXT record</dt><dd>A text record (TXT record) is a type of resource record in the DNS that lets you associate plain text with a domain.</dd>
</dl>
</div>
</div>


<div id="outline-container-org2b38ed8" class="outline-3">
<h3 id="org2b38ed8"><span class="section-number-3">3.2</span> DNS Zone</h3>
<div class="outline-text-3" id="text-3-2">
<p>
A DNS zone represents a range of IP addresses in a domain name space.
</p>
</div>
</div>

<div id="outline-container-org270a7fe" class="outline-3">
<h3 id="org270a7fe"><span class="section-number-3">3.3</span> Domain Register</h3>
<div class="outline-text-3" id="text-3-3">
<p>
A domain provider, or domain name registrar, is a company or organization that manages the assignment of domain names.
For me it's gandi.net.
</p>
</div>
</div>

<div id="outline-container-org19e36d4" class="outline-3">
<h3 id="org19e36d4"><span class="section-number-3">3.4</span> Name server</h3>
<div class="outline-text-3" id="text-3-4">
<p>
The server that translates domains into IP addresses.
</p>
</div>
</div>

<div id="outline-container-orgeeef8f8" class="outline-3">
<h3 id="orgeeef8f8"><span class="section-number-3">3.5</span> Zone file</h3>
<div class="outline-text-3" id="text-3-5">
<p>
A text file describes mapping between domain and IP.
</p>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Tue, 11 Sep 2018 00:00:00 -0400</pubDate>
</item>
<item>
<title>Fancy startup screen</title>
<link>https://archive.casouri.co.uk/note/2018/fancy-startup-screen-for-emacs/</link>
<guid>https://archive.casouri.co.uk/note/2018/fancy-startup-screen-for-emacs/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Fancy startup screen</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Fancy startup screen</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org830261c">1. Text image</a></li>
<li><a href="#org6818559">2. xpm image</a></li>
</ul>
</div>
</div>


<div id="outline-container-org830261c" class="outline-2">
<h2 id="org830261c"><span class="section-number-2">1</span> Text image</h2>
<div class="outline-text-2" id="text-1">

<div class="figure">
<p><img src="./home.png" alt="home.png" />
</p>
</div>

<p>
I first drew the image in pixel mode in photoshop and exported it to png file:
</p>


<div class="figure">
<p><img src="./moon.png" alt="moon.png" />
</p>
</div>

<p>
Then used a simple python script to convert this image to text.
The script converts black pixel to "██" and white pixel to space:
</p>

<div class="org-src-container">
<pre class="src src-python"># -*- coding: utf-8 -*-

import sys

import numpy as np
from PIL import Image

ARGV = sys.argv
DEFAULT_IMAGE_NAME = 'image.png'
PIXEL = '██'
SPACE = '  '
THRESH = 127
black = SPACE
white = PIXEL


if len(ARGV) &gt; 1:
    image_name = ARGV[1]
else:
    image_name = DEFAULT_IMAGE_NAME

if len(ARGV) &gt; 2:
    cmd = ARGV[2]
    if cmd == '-i': # innvert
        black, white = PIXEL, SPACE

image = Image.open(image_name)

width, height = image.size


image = np.asarray(image)

text_image = ''
for line in image:
    text_line = ''
    for pixel in line:
        mask = pixel[3]
        if mask &lt; THRESH:
            text_line += black
        else:
            text_line += white
    text_image += text_line + '\n'


print(text_image)
</pre>
</div>

<p>
Terminal displays:
</p>

<pre class="example">
          ████████
      ██████████████
   █████████         █
  ████████
████████
████████
████████
████████
████████
  ████████            █
  ██████████        ██
      ██████████████
          ████████
</pre>
</div>
</div>

<div id="outline-container-org6818559" class="outline-2">
<h2 id="org6818559"><span class="section-number-2">2</span> xpm image</h2>
<div class="outline-text-2" id="text-2">
<p>
I also made an actual image for the moon,
for that I converted png file to xpm with imagemagick:
</p>

<div class="org-src-container">
<pre class="src src-shell">convert moon.png moon.xpm
</pre>
</div>

<p>
To insert the image:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(overlay-put (make-overlay beg end) 'display (create-image image-path))
</pre>
</div>
</div>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Mon, 10 Sep 2018 00:00:00 -0400</pubDate>
</item>

  </channel>
</rss>
