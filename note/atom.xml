<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notes</title>
  <link href="https://archive.casouri.cc/note" rel="self" />
  <updated>2022-11-18T10:12:00.00-05:00</updated>
  <author>
    <name>Yuan Fu</name>
  </author>
  <icon>https://archive.casouri.cc/favicon.png</icon>
  <id>urn:uuid:53fd03d4-ec1b-11eb-8cca-e7401fdbc2e2</id>
  
  <entry><title>This Site is Changing its Domain</title><link href="https://archive.casouri.cc/note/2022/domain-change"/><id>urn:uuid:ff14d65c-6726-11ed-b927-c76ea0aa4499</id><updated>2022-11-18T00:00:00.00-05:00</updated><content type="html">&lt;p&gt;Right now this site resides on &lt;a href="https://archive.casouri.cc/note/2022/domain-change/https:/archive.casouri.cat"&gt;archive.casouri.cat&lt;/a&gt;, I really love the .cat TLD. Alas, .cat was never meant for generic use and my site doesn't comply to its requirements, which is to use and promote Catalan language and culture. I don’t want to wake up one day recieving a take down notice, however slim the possibility is. Plus, the longer this site uses this domain, the more backlinks to it, the harder to move on.&lt;/p&gt;&lt;p&gt;Moving forward, this site will be on &lt;a href="https://archive.casouri.cc/note/2022/domain-change/https:/archive.casouri.cc"&gt;archive.casouri.cc&lt;/a&gt;. I'll keep the .cat domain around for a few years. In the meantime the .cat domain will redirect to the .cc domain by 301 redirect. The whole site is archived on the Wayback Machine. Hopefully someone in the future clicking on my .cat link knows about Wayback Machine and can view the page.&lt;/p&gt;&lt;p&gt;If you have a link to the .cat domain, you might want to edit the link to point to the new domain. Sorry for the incovenience! Fortunately there are so few links to my site :-)&lt;/p&gt;</content></entry>
  <entry><title>NAT traversal: STUN, TURN, ICE, what do they actually do?</title><link href="https://archive.casouri.cc/note/2022/nat-what-do-they-do"/><id>urn:uuid:84e3d816-a8c6-11ec-bcbd-af8069bc8361</id><updated>2022-03-20T20:26:00.00-05:00</updated><content type="html">&lt;p&gt;In this post I try to explain what does each NAT traversal protocol actually do. When searching for NAT traversal I found these protocols but no one can tell me what do they essentially do to traverse NAT, hence this post. I assume you already know what NAT is ;-)&lt;/p&gt;&lt;p&gt;What NAT traversal does is not really punching holes on the NAT, or delivering message through some tunnel, or some arcane magic, but to simply find the public address:port that can can reach &lt;em&gt;me&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;If I’m behind a NAT or even multiple NAT’s, what happens is that my packets get relayed by my NAT’s and they appears on the public Internet at the out-most NAT’s address with a port assigned to me. And reply packets going to that address:port are relayed back to me. So essentially I got a public address:port that can reach me on the public Internet. The purpose of NAT traversal is to find that public address:port. That’s basically what the initial/classic STUN (&lt;a href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc3489"&gt;RFC 3489&lt;/a&gt;) does.&lt;/p&gt;&lt;p&gt;The truly host-to-host traversal is just that, finding the public address:port. Sometimes having that address:port is not enough, because NAT poses &lt;a id="footref:extra" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Aextra"&gt;extra restrictions&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;. Then we have to resort to having a public-visible relay server in the middle, which is what TURN (&lt;a href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc5766"&gt;RFC 5766&lt;/a&gt;) does. But any host-to-host traversal is just finding public address:port. There is no extra magic there.&lt;/p&gt;&lt;p&gt;How does the classic STUN works is quite simple. You send a STUN server a message, the STUN server looks at the source IP address and port of the IP packet, and reply that back to you. Voilà, you know you public address:port!&lt;/p&gt;&lt;p&gt;That leaves us with ICE, what does it do? Basically, people realize that there are so many situations that are wildly different, so there is no one single method that guarantees to work everywhere. It is best to try a bunch of ways and pick the one that works and works best.&lt;/p&gt;&lt;p&gt;ICE does basically that. It gathers a bunch of address:port’s that possibly works (through STUN) and tries them one-by-one according to some algorithm, and reports to you the best one. If none works, it tries to establish a relay through TURN.&lt;/p&gt;&lt;p&gt;And here is where the new STUN comes in. People threw away the algorithm for finding address:port in classic STUN, and kept and extended the STUN message format. Now ICE runs a more thorough algorithm that uses STUN messages to communicate with STUN servers. And the new STUN (&lt;a href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc5389"&gt;RFC 5389&lt;/a&gt;) just defines the STUN message format. There is a even newer version (&lt;a href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc8489"&gt;RFC 8489&lt;/a&gt;) that updated RFC 5389 slightly, but with no fundamental changes.&lt;/p&gt;&lt;p&gt;Similarly, TURN is updated in&lt;a href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc8656"&gt;RFC 8656&lt;/a&gt; and now is a method used by ICE rather than a standalone solution.&lt;/p&gt;&lt;div id="footdef:extra" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Aextra"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;Some NAT wouldn’t let a packet from an external host through if the host inside never sent a packet to that external host before. There are many ways a NAT could make your life difficult, check out “full cone”, “restricted cone”, “symmetric NAT”, etc.&lt;/div&gt;&lt;/div&gt;</content></entry>
  <entry><title>Using Fontsets in Emacs</title><link href="https://archive.casouri.cc/note/2021/fontset"/><id>urn:uuid:336b8c2c-4d8b-11ec-967b-17e83717b0eb</id><updated>2021-11-24T17:01:00.00-05:00</updated><content type="html">&lt;h2 id="Fontset" class="section"&gt;Fontset?&lt;/h2&gt;&lt;p&gt;Fontset is a feature of Emacs that allows you to bundle together multiple fonts and use them as a single font, such that it covers more characters than a single font could have. For example, you can combine a Latin font, a Greek font and a Chinese font together.&lt;/p&gt;&lt;p&gt;With fontsets, we can use different Unicode fonts for different faces. For example, serif Latin and Chinese font for a “serif” face, and sans serif Latin and Chinese font for a “sans” face. Without fontsets, we can only set different Latin fonts to faces and use a single fall-back Chinese font.&lt;/p&gt;&lt;p&gt;&lt;img alt="A graph showing different fonts with different faces" src="https://archive.casouri.cc/note/2021/fontset/fonts%20&amp;amp;%20faces.svg"/&gt;&lt;/p&gt;&lt;h2 id="Create%20a%20fontset" class="section"&gt;Create a fontset&lt;/h2&gt;&lt;p&gt;A fontset is recognized by its name. Each fontset has two names, one short and one long. The short name looks like &lt;code&gt;fontset-xxx&lt;/code&gt;. The long name is a &lt;a href="https://archive.casouri.cc/note/2021/fontset/https:/wiki.archlinux.org/title/X_Logical_Font_Description"&gt;X Logical Font Description&lt;/a&gt; with last two fields being &lt;code&gt;fontset&lt;/code&gt; and &lt;code&gt;xxx&lt;/code&gt;. For example,&lt;/p&gt;&lt;pre class="code-block"&gt;-*-ibm plex mono-medium-*-*-*-13-*-*-*-*-*-fontset-my fontset&lt;/pre&gt;&lt;p&gt;Emacs come with three fontsets by default: &lt;code&gt;fontset-startup&lt;/code&gt;, &lt;code&gt;fontset-standard&lt;/code&gt; and &lt;code&gt;fontset-default&lt;/code&gt;. We only care about &lt;code&gt;fontset-default&lt;/code&gt;; it is the ultimate fall-back when Emacs cannot find a font to display a character. But more on that later.&lt;/p&gt;&lt;p&gt;To create a fontset, you can use &lt;code&gt;create-fontset-from-fontset-spec&lt;/code&gt; and pass it a bunch of X Logical Font Descriptions, each for a font you want to include. I find that tedious. Instead, I like to create a fontset with a single ASCII font and use &lt;code&gt;set-fontset-font&lt;/code&gt; to add other fonts later, like this:&lt;/p&gt;&lt;pre class="code-block"&gt;(create-fontset-from-fontset-spec
 (font-xlfd-name
  (font-spec :family "IBM Plex Mono"
             :size 13
             :registry "fontset-my fontset")))&lt;/pre&gt;&lt;p&gt;Make sure you put the short fontset name under the &lt;code&gt;:registry&lt;/code&gt; spec. The code above creates the fontset, and returns its long name,&lt;/p&gt;&lt;pre class="code-block"&gt;-*-ibm plex mono-*-*-*-*-13-*-*-*-*-*-fontset-my fontset&lt;/pre&gt;&lt;p&gt;Now we can add a Chinese font and a Greek font:&lt;/p&gt;&lt;pre class="code-block"&gt;(set-fontset-font
 "fontset-my fontset"
 'han (font-spec :family "Source Han Serif" :size 12))
(set-fontset-font
 "fontset-my fontset"
 'greek (font-spec :family "Academica"))&lt;/pre&gt;&lt;p&gt;If you are not familiar with &lt;code&gt;set-fontset-font&lt;/code&gt;, &lt;a href="https://archive.casouri.cc/note/2021/fontset/http:/idiocy.org/emacs-fonts-and-fontsets.html"&gt;&lt;em&gt;Emacs, fonts and fontsets&lt;/em&gt;&lt;/a&gt; is a good read.&lt;/p&gt;&lt;h2 id="Apply%20a%20fonset" class="section"&gt;Apply a fonset&lt;/h2&gt;&lt;p&gt;Although the manual says we can use a fontset wherever a font is appropriate, it is not entirely true. If you pass your fontset through the &lt;code&gt;:font&lt;/code&gt; attribute in &lt;code&gt;set-face-attribute&lt;/code&gt;, &lt;a id="footref:takes-ascii" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Atakes-ascii"&gt;Emacs takes the ASCII font from the fontset and only uses the ASCII font for the face&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;. The real way to do it is to use the undocumented &lt;code&gt;:fontset&lt;/code&gt; attribute:&lt;/p&gt;&lt;pre class="code-block"&gt;(set-face-attribute
 'some-face nil :fontset "fontset-my fontset")&lt;/pre&gt;&lt;p&gt;That’s not all. While the above code works for most faces, setting &lt;code&gt;:fontset&lt;/code&gt; for &lt;code&gt;default&lt;/code&gt; will not work as you expected, because Emacs again &lt;a id="footref:default" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Adefault"&gt;only takes the ASCII font, even if you use the &lt;code&gt;fontset&lt;/code&gt; attribute&lt;sup class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt;. So don’t set the fontset for the &lt;code&gt;default&lt;/code&gt; face; instead, just modify &lt;code&gt;fontset-default&lt;/code&gt; (it’s the ultimate fall-back fontset we mentioned earlier) for Unicode fonts, and use whatever method you like for ASCII font. If you read &lt;a href="https://archive.casouri.cc/note/2021/fontset/http:/idiocy.org/emacs-fonts-and-fontsets.html"&gt;&lt;em&gt;Emacs, fonts and fontsets&lt;/em&gt;&lt;/a&gt;, you’ll know we can modify &lt;code&gt;fontset-default&lt;/code&gt; by either&lt;/p&gt;&lt;pre class="code-block"&gt;(set-fontset-font "fontset-default" ...)&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&lt;pre class="code-block"&gt;(set-fontset-font t ...)&lt;/pre&gt;&lt;p&gt;Technically you could set the &lt;code&gt;font&lt;/code&gt; attribute of a frame to a fontset by &lt;code&gt;set-frame-font&lt;/code&gt; and it works fine. But as soon as you change any font-related attributes in &lt;code&gt;default&lt;/code&gt; face, like font size, your fontset in the frame attribute will be overwritten by the font derived from &lt;code&gt;default&lt;/code&gt; face. So the best way is still to just modify &lt;code&gt;fontset-default&lt;/code&gt;.&lt;/p&gt;&lt;div id="footdef:takes-ascii" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Atakes-ascii"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;According to &lt;a href="https://archive.casouri.cc/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3391"&gt;the source&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:default" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Adefault"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;Basically, if the face is &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;set-face-attribute&lt;/code&gt; calls &lt;code&gt;set_font_frame_param&lt;/code&gt; (&lt;a href="https://archive.casouri.cc/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3514"&gt;source&lt;/a&gt;), which only looks at the &lt;code&gt;:font&lt;/code&gt; attribute (&lt;a href="https://archive.casouri.cc/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3685"&gt;source&lt;/a&gt;).&lt;/div&gt;&lt;/div&gt;&lt;h2 id="Further%20reading" class="section"&gt;Further reading&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Command &lt;code&gt;list-fontsets&lt;/code&gt; lists all the defined fontsets.&lt;/li&gt;&lt;li&gt;Command &lt;code&gt;describe-fontset&lt;/code&gt; shows which font is each character assigned to in a fontset.&lt;/li&gt;&lt;li&gt;Manual page: &lt;a href="https://archive.casouri.cc/note/2021/fontset/https:/www.gnu.org/software/emacs/manual/html_node/emacs/Fontsets.html"&gt;&lt;em&gt;Fontsets, Emacs User Manual&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Another manual page: &lt;a href="https://archive.casouri.cc/note/2021/fontset/https:/www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html"&gt;&lt;em&gt;Fontsets, Emacs Lisp Manual&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content></entry>
  <entry><title>Code Page 437</title><link href="https://archive.casouri.cc/note/2021/code-page-437"/><id>urn:uuid:97279de0-28c5-11ec-b9e1-e3d1f57bb295</id><updated>2021-10-23T00:11:00.00-05:00</updated><content type="html">&lt;p&gt;So I was installing a new OS on my desktop machine, and for some technical reasons I need to install the OS manually. That means typing in a console. I couldn’t help but wonder: what the font is it showing?&lt;/p&gt;&lt;figure&gt;&lt;img alt="Screenshot of the console" src="https://archive.casouri.cc/note/2021/code-page-437/console.jpeg"/&gt;
&lt;figcaption&gt;I was typing in this&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Turns out the typeface isn’t even a typeface. It is a encoding that extends ASCII. It maps 8-bit patterns to characters. For example,&lt;code&gt;10000110&lt;/code&gt; corresponds to “å”. According to Wikipedia, It is the“standard character set of the original IBM PC”, and it “remains the primary set in the core of any EGA and VGA-compatible graphic cards”. Basically this is the most basic font on a personal computer, stored directly in hardware.&lt;/p&gt;&lt;p&gt;This character set is supposed to contain many characters including fancy ones like “⌠”, “☺”, “§”, etc. But my graphic card is missing most of the non-basic characters. (How disappointing!)&lt;/p&gt;&lt;figure&gt;&lt;img alt="A screenshot specimen" src="https://archive.casouri.cc/note/2021/code-page-437/specimen.jpeg"/&gt;
&lt;figcaption&gt;Many characters are missing&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I don’t think this font is pretty or anything. What makes it so interesting to me is that it is such ubiquitous yet most people never notice it. Next time &lt;a id="footref:PC" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3APC"&gt;when your PC starts up or crashes&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;, see if you can spot any message printed in this font.&lt;/p&gt;&lt;p&gt;You can even download the font file for this font: &lt;a href="https://archive.casouri.cc/note/2021/code-page-437/https:/cp437.github.io"&gt;&lt;em&gt;Code Page 437&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;PS. this makes me wonder if Mac has something similar, and sure enough, there is. &lt;a href="https://archive.casouri.cc/note/2021/code-page-437/https:/apple.stackexchange.com/questions/157038/what-font-is-used-during-verbose-boot-mode"&gt;Someone asked about it on StackExchange&lt;/a&gt;. I bet even less people know about this one. I for one have never seen it despite using a MacBook for years (That’s probably a good thing, as one only see it when something goes hopelessly wrong.)&lt;/p&gt;&lt;p&gt;PPS. On Linux, you can drop yourself into a console by typing Ctrl+Alt+F1/F2/etc. Usually that screen is printed in &lt;a href="https://archive.casouri.cc/note/2021/code-page-437/http:/terminus-font.sourceforge.net"&gt;Terminus&lt;/a&gt;.&lt;/p&gt;&lt;div id="footdef:PC" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3APC"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;You still use a PC, do you?&lt;/div&gt;&lt;/div&gt;</content></entry>
  <entry><title>Dutch 801 Headline</title><link href="https://archive.casouri.cc/note/2021/dutch-801"/><id>urn:uuid:78a32c96-227f-11ec-9fc2-63ecfe829692</id><updated>2021-09-30T23:18:00.00-05:00</updated><content type="html">&lt;p&gt;Today’s typeface isn’t really interesting in itself, but in the way I came across it. It’s a long story, are you ready? Ok, so I was reading assigned papers for my OS class, and I started on this one:&lt;/p&gt;&lt;p&gt;&lt;img alt="A clip of the paper" src="https://archive.casouri.cc/note/2021/dutch-801/hydra.jpeg"/&gt;&lt;/p&gt;&lt;p&gt;The title immediately caught my attention: it’s a elegant, graceful font. So I clipped an image and searched on myfont.com, and it turns out to be ... Dutch 801 Headline.&lt;/p&gt;&lt;p&gt;The end. (Told you it’s a long story.)&lt;/p&gt;&lt;p&gt;I don’t know about you, but I thought it’s a rather strange name for a typeface. Why Dutch? Why 801? I still don’t know the answer. Anyway, I think its a cool name. Maybe the one who named it thought the same.&lt;/p&gt;&lt;p&gt;Despite its interesting name, information about this typeface is quite scarce. I only know it is Bitstream’s version of Times New Roman (ie, clone). I was kind of surprised when I found out, because I never associated Times New Roman with elegance. Maybe enlarging a font naturally releases it from its humble form, and brings out its gracefulness.&lt;/p&gt;&lt;figure&gt;&lt;img alt="A larger clip of the title" src="https://archive.casouri.cc/note/2021/dutch-801/hydra-large.jpeg"/&gt;
&lt;figcaption&gt;The title in its full glory&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt="Clip for another title" src="https://archive.casouri.cc/note/2021/dutch-801/tenex.jpeg"/&gt;
&lt;figcaption&gt;Another article title&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As for the body text, I can only assume it to be Dutch 801 Text. I didn’t bother to check though.&lt;/p&gt;&lt;p&gt;&lt;img alt="A clip of the body text" src="https://archive.casouri.cc/note/2021/dutch-801/body.jpeg"/&gt;&lt;/p&gt;</content></entry>
  <entry><title>Academica</title><link href="https://archive.casouri.cc/note/2021/academica"/><id>urn:uuid:8a5678de-2181-11ec-9b77-8b26fea6a693</id><updated>2021-09-29T17:01:00.00-05:00</updated><content type="html">&lt;p&gt;&lt;a href="https://archive.casouri.cc/note/2021/academica/https:/www.stormtype.com/families/academica"&gt;Academica&lt;/a&gt; is a typeface I found out when reading &lt;a href="https://archive.casouri.cc/note/2021/academica/https:/aeon.co"&gt;&lt;em&gt;aeon&lt;/em&gt;&lt;/a&gt; (a digital magazine in Science and Humanities). Academica is designed by Josef Týfa for scientific texts. The original design was cut and cast in metal in 1968, and in 2003, Týfa and František Štorm worked together to rework it for digital printing.&lt;/p&gt;&lt;p&gt;Academica shares some similarities with Charter in tall x‑height and emphasize on legibility, but the similarity pretty much ends there. Comparing to Charter, Academica is considerably blacker. And comparing to Charter’s &lt;a id="footref:stoic" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Astoic"&gt;stoic stint on curves&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;, Academica is lavishly rounded, tapered, bent, squished and stretched. In fact, I don’t even know why am I comparing it to Charter, Academica reminds me more of another typeface (that I dig), &lt;a href="https://archive.casouri.cc/note/2021/academica/https:/en.wikipedia.org/wiki/Cooper_Black"&gt;Cooper Black&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img alt="A specimen for some lower-case Latin letters" src="https://archive.casouri.cc/note/2021/academica/specimen1.png"/&gt;&lt;/p&gt;&lt;p&gt;The alien-looking 0 is perhaps the most salient character (pun intended) in Academica. Instead of simply narrowing 0 to distinguish it from capital O, Academica “flipped” it such that the horizontal stroke is thicker than the vertical. The 0 is really the culmination of the overall vibe of Academica—little roundish goofiness here and there, slightly throwing the reader off; but when you zoom away, you see a legible, realistic academic typeface.&lt;/p&gt;&lt;p&gt;&lt;img alt="A specimen for text “2001”" src="https://archive.casouri.cc/note/2021/academica/specimen2.png"/&gt;&lt;/p&gt;&lt;p&gt;Overall, Academica feels humane to me. It is a practical typeface for serious scientific publications, but in the same time has its very own quirky character. I’m very fond of it. It isn’t that expensive either. If you buy it on &lt;a href="https://archive.casouri.cc/note/2021/academica/https:/www.myfonts.com"&gt;myfonts.com&lt;/a&gt;, each font costs $44 (at the time of writing). &lt;a id="footref:need" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Aneed"&gt;So regular, italic and bold&lt;sup class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt; combined costs $132. That’s more than a cup of coffee, but still less than 20 cups (I think?)&lt;/p&gt;&lt;p&gt;Some more specimen:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A specimen for body text" src="https://archive.casouri.cc/note/2021/academica/specimen3.png"/&gt;
&lt;figcaption&gt;Academica Text (Regular) in body text&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt="A specimen for Light/Book weight" src="https://archive.casouri.cc/note/2021/academica/specimen4.png"/&gt;
&lt;figcaption&gt;Academica Book (Light) in slightly larger size&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Further reading:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://archive.casouri.cc/note/2021/academica/https:/fontsinuse.com/typefaces/13032/academica"&gt;&lt;em&gt;Fonts in Use: Academica&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The &lt;a href="https://archive.casouri.cc/note/2021/academica/StormType-AcademicaSpecimenA4.pdf"&gt;Official specimen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id="footdef:stoic" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Astoic"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;Of course, there is nothing bad about stoic outlines. Matthew Carter designed Charter for low-resolution laser printers (which will muddle any delicate detail on the character), and aimed for economic use of curves to accommodate low-memory computers and printers. More over, the crisp, direct, clean outline is actually one of Charter’s virtues.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:need" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Aneed"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;Regular, italic and bold are really all you need, sometimes you don’t even need bold. If you want to use Academica in a larger size (larger than 13pt), then Light, Light italic and Regular is probably a better combination.&lt;/div&gt;&lt;/div&gt;</content></entry>
  <entry><title>RFC: Emacs tree-sitter integration</title><link href="https://archive.casouri.cc/note/2021/emacs-tree-sitter"/><id>urn:uuid:484e573e-207f-11ec-bd91-975a51a5f3f1</id><updated>2021-09-28T10:12:00.00-05:00</updated><content type="html">&lt;p&gt;&lt;a href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/tree-sitter.github.io/tree-sitter"&gt;Tree-sitter&lt;/a&gt; is a incremental parser that can provide a concrete syntax tree for the source code and is fast enough to parse on each key press. It has supported a wide range of languages, and support for more languages is on the way.&lt;/p&gt;&lt;p&gt;I’ve been working on a integration of tree-sitter library into Emacs’ core. The integration consists of two parts, first the direct translate of tree-sitter’s API, second the integration with Emacs’ font-lock and indent system.  The first part is completed and is rather uncontentious. I’d appreciate comments on the second: Is the interface easy to understand? Is it easy to use? Is it flexible enough for every language?&lt;/p&gt;&lt;p&gt;Whether you are a major mode author or just a interested Emacs user, I invite you to try hacking with this tree-sitter integration—recreate existing major mode features (font-lock, indent), create new features (structured editing, etc)—and tell me how well it works. Better yet, provide some suggestions on improving the interface.&lt;/p&gt;&lt;h2 id="Building%20Emacs%20with%20tree-sitter%20support" class="section"&gt;Building Emacs with tree-sitter support&lt;/h2&gt;&lt;h3 id="Install%20tree-sittter" class="subsection"&gt;Install tree-sittter&lt;/h3&gt;&lt;p&gt;First, install libtree-sitter, either by a package manager, or from source:&lt;/p&gt;&lt;pre class="code-block"&gt;git clone https://github.com/tree-sitter/tree-sitter.git
cd tree-sitter
make
make install&lt;/pre&gt;&lt;p&gt;This should install libtree-sitter in standard location.&lt;/p&gt;&lt;h3 id="Build%20Emacs" class="subsection"&gt;Build Emacs&lt;/h3&gt;&lt;p&gt;Then, build Emacs from my GitHub repository. Make sure you clone the &lt;code&gt;ts&lt;/code&gt; branch.&lt;/p&gt;&lt;pre class="code-block"&gt;git clone https://github.com/casouri/emacs.git --branch ts
./autogen.sh
./configure
make&lt;/pre&gt;&lt;p&gt;No need for special configure flags, tree-sitter is enabled automatically if libtree-sitter is present on the system. Now Emacs can be started by&lt;/p&gt;&lt;pre class="code-block"&gt;src/emacs&lt;/pre&gt;&lt;h3 id="Get%20language%20definitions" class="subsection"&gt;Get language definitions&lt;/h3&gt;&lt;p&gt;To use tree-sitter features in any meaningful way, we also need the language definition, eg, libtree-sitter-c for C. I wrote a script for automatically retrieving and compiling some of the libraries. The following commands&lt;/p&gt;&lt;pre class="code-block"&gt;git clone https://github.com/casouri/tree-sitter-module.git
cd tree-sitter-module
./batch-new.sh&lt;/pre&gt;&lt;p&gt;should produce libraries for C, JSON, Go, HTML, JavaScript, CSS and Python and store them in &lt;code&gt;dist&lt;/code&gt; directory. From there you can copy these libraries to a standard path, or add that directory to &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can also find pre-built libraries in the release page: &lt;a href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/github.com/casouri/tree-sitter-module/releases/tag/v2,0"&gt;&lt;em&gt;tree-sitter-module release v2.0&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="Basic%20tree-sitter%20features" class="section"&gt;Basic tree-sitter features&lt;/h2&gt;&lt;p&gt;I suggest reading the tree-sitter node in the manual first, it covers how to create a parser, how to retrieve a node, how to pattern match nodes, and more. You can access the manual by typing&lt;/p&gt;&lt;pre class="code-block"&gt;C-h i m elisp RET g Parsing Program Source RET&lt;/pre&gt;&lt;p&gt;The command(s) above opens the Info reader, goes to &lt;em&gt;Elisp Reference Manual&lt;/em&gt;, and opens the “Parsing Program Source” node, which contains manual for tree-sitter. Alternatively, you can read &lt;a href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/Parsing-Program-Source.html"&gt;the tree-sitter node&lt;/a&gt; that I clipped from the HTML manuel.&lt;/p&gt;&lt;p&gt;Once you’ve read the manual, you can &lt;code&gt;(require 'tree-sitter)&lt;/code&gt; and hack away!&lt;/p&gt;&lt;p&gt;The manual only documents basic features of tree-sitter, leaving out font-lock and indent integration, because I expect the latter to change. They are instead documented below.&lt;/p&gt;&lt;h2 id="Font-lock%20interface" class="section"&gt;Font-lock interface&lt;/h2&gt;&lt;p&gt;(From now on, I assume you have read the manual and I will use concepts introduced in the manual without explanation.)&lt;/p&gt;&lt;p&gt;If you are familiar with font-lock in Emacs, you know it is primarily configured by &lt;code&gt;font-lock-defaults&lt;/code&gt;: major mode sets this variable with language-specific configuration, font-lock takes that variable and populate &lt;code&gt;font-lock-keywords&lt;/code&gt;, which directly defines the pattern to fontify.&lt;/p&gt;&lt;h3 id="tree-sitter-font-lock-settings" class="subsection"&gt;&lt;code&gt;tree-sitter-font-lock-settings&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;a id="footref:ts-name" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Ats-name"&gt;Tree-sitter&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt; provides two analogues variables, &lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt; and &lt;code&gt;tree-sitter-font-lock-settings&lt;/code&gt;. &lt;code&gt;tree-sitter-font-lock-settings&lt;/code&gt; is a list of &lt;code&gt;SETTING&lt;/code&gt;s where each &lt;code&gt;SETTING&lt;/code&gt; looks like&lt;/p&gt;&lt;pre class="code-block"&gt;(LANGUAGE QUERY)&lt;/pre&gt;&lt;p&gt;&lt;code&gt;LANGUAGE&lt;/code&gt; is the language this setting should use, and &lt;code&gt;QUERY&lt;/code&gt; is either a string or a sexp query. Each capture name in &lt;code&gt;QUERY&lt;/code&gt; is either a face name, in which case the captured node is fontified in that face, or a function name, in which case the captured node is passed to the function for fontification. Specifically, the function is passed three arguments &lt;code&gt;(BEG END NODE)&lt;/code&gt;, where &lt;code&gt;BEG&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; is the beginning and end position of the node in the buffer, for convenience.&lt;/p&gt;&lt;p&gt;An example &lt;code&gt;SETTING&lt;/code&gt; for C is&lt;/p&gt;&lt;pre class="code-block"&gt;(tree-sitter-c ; LANGUAGE
 ((null) @font-lock-constant-face
  (true) @font-lock-constant-face
  (false) @font-lock-constant-face)) ; QUERY&lt;/pre&gt;&lt;div id="footdef:ts-name" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Ats-name"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;From now on, “tree-sitter” refers to the Emacs integration of tree-sitter.&lt;/div&gt;&lt;/div&gt;&lt;h3 id="tree-sitter-font-lock-defaults" class="subsection"&gt;&lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Tree-sitter font-lock, like font-lock, support fontification at different levels of decoration (controlled by &lt;code&gt;font-lock-maximum-decoration&lt;/code&gt;). And this is the primary purpose of &lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt;. Its value is a list of&lt;/p&gt;&lt;pre class="code-block"&gt;(DEFAULT :KEYWORD VALUE...)&lt;/pre&gt;&lt;p&gt;Where each &lt;code&gt;DEFAULT&lt;/code&gt; may be a symbol or a list of symbols. The symbol should be either a variable containing &lt;code&gt;(LANGUAGE QUERY)&lt;/code&gt;, or a function that returns that.  If &lt;code&gt;DEFAULT&lt;/code&gt; is a list, each symbol corresponds to a decoration level. For example, if I want to implement three levels of decoration for C, I would populate &lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt; with&lt;/p&gt;&lt;pre class="code-block"&gt;(((c-font-lock-settings-1
   c-font-lock-settings-2
   c-font-lock-settings-3)
  :KEYWORD VALUE...))&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;c-font-lock-settings-1&lt;/code&gt; would contain, say,&lt;/p&gt;&lt;pre class="code-block"&gt;(tree-sitter-c
 ((null) @font-lock-constant-face
  (true) @font-lock-constant-face
  (false) @font-lock-constant-face))&lt;/pre&gt;&lt;p&gt;for those who need no more. And the other two levels could be for the rest mortals. As for &lt;code&gt;:KEYWORD&lt;/code&gt; and &lt;code&gt;VALUE&lt;/code&gt;, they are analogues to that in &lt;code&gt;font-lock-defaults&lt;/code&gt;, used for specifying other configurations. Currently they are not used for tree-sitter font-lock.&lt;/p&gt;&lt;p&gt;To enable tree-sitter font-lock, a major mode should first assign &lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt;, then call &lt;code&gt;tree-sitter-font-lock-enable&lt;/code&gt;. For example,&lt;/p&gt;&lt;pre class="code-block"&gt;(define-derived-mode ts-c-mode prog-mode "tree-sitter C"
  (setq-local tree-sitter-font-lock-defaults
              '((ts-c-tree-sitter-settings-1)))
  (tree-sitter-enable-font-lock))&lt;/pre&gt;&lt;h2 id="Indentation" class="section"&gt;Indentation&lt;/h2&gt;&lt;p&gt;In Emacs, indentation is provided by &lt;code&gt;indent-line-function&lt;/code&gt;. Tree-sitter provides a convenient system, &lt;em&gt;tree-sitter-simple-indent&lt;/em&gt;, to simplify the implementation of a indenting function. To use it, bind &lt;code&gt;indent-line-function&lt;/code&gt; to &lt;code&gt;tree-sitter-indent&lt;/code&gt;, and fill in indentation configurations in &lt;code&gt;tree-sitter-simple-indent-rules&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;tree-sitter-simple-indent-rules&lt;/code&gt; is a list of rules, and each rule looks like&lt;/p&gt;&lt;pre class="code-block"&gt;(MATCHER ANCHOR OFFSET)&lt;/pre&gt;&lt;p&gt;When indenting, &lt;em&gt;tree-sitter-simple-indent&lt;/em&gt; finds the largest node that starts at the beginning of the current line, and matches it against each &lt;code&gt;MATCHER&lt;/code&gt; in &lt;code&gt;tree-sitter-simple-indent-rules&lt;/code&gt;. If &lt;code&gt;MATCHER&lt;/code&gt; matches that node, &lt;code&gt;ANCHOR&lt;/code&gt; and &lt;code&gt;OFFSET&lt;/code&gt; determines how to indent—find the column of &lt;code&gt;ANCHOR&lt;/code&gt; (which represents a point), and add &lt;code&gt;OFFSET&lt;/code&gt; to it.&lt;/p&gt;&lt;p&gt;By now you must be wondering what the heck is &lt;code&gt;MATCHER&lt;/code&gt;. It is a function that takes &lt;code&gt;(NODE PARENT BOL &amp;amp;rest _)&lt;/code&gt; as arguments, if the rule should apply to &lt;code&gt;NODE&lt;/code&gt;, it returns non-nil. &lt;code&gt;PARENT&lt;/code&gt; and &lt;code&gt;BOL&lt;/code&gt; (position of beginning of line) are provided just for convenience. The “&lt;code&gt;&amp;amp;rest _&lt;/code&gt;” part is required to allow the possibility to extend the interface in the future.&lt;/p&gt;&lt;p&gt;This function can do anything: check the type of that node, check the type of its parent, check whether this node is the first child node of its parent, etc. &lt;code&gt;ANCHOR&lt;/code&gt; is also a function that takes theses arguments, but it returns a point, the “anchor”. If the rule determines that the node should be indented two columns inward comparing to its parent, &lt;code&gt;ANCHOR&lt;/code&gt; should return the start of the parent node, and &lt;code&gt;OFFSET&lt;/code&gt; should be 2.&lt;/p&gt;&lt;p&gt;For example, the following rule matches any line that starts with the &lt;code&gt;null&lt;/code&gt; keyword, and indents the line inwards by two columns against the &lt;code&gt;null&lt;/code&gt;’s parent node.&lt;/p&gt;&lt;pre class="code-block"&gt;((lambda (n p bol &amp;amp;rest _)
   (equal (tree-sitter-node-type n) "null")) ; MATCHER
 (lambda (n p bol &amp;amp;rest _)
   (tree-sitter-node-start
    (tree-sitter-node-parent n))) ; ANCHOR
 2) ; OFFSET&lt;/pre&gt;&lt;p&gt;Of course, it is terribly tedious to write out every &lt;code&gt;MATCHER&lt;/code&gt; and &lt;code&gt;ANCHOR&lt;/code&gt; explicitly. &lt;em&gt;tree-sitter-simple-indent&lt;/em&gt; provides some predefined &lt;code&gt;MATCHER&lt;/code&gt; and &lt;code&gt;ANCHOR&lt;/code&gt; functions. Most of them are higher-order functions: they takes an argument and returns a function.&lt;/p&gt;&lt;p&gt;&lt;code&gt;MATCHER&lt;/code&gt; presets:&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;(parent-is TYPE)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Check that the parent has type &lt;code&gt;TYPE&lt;/code&gt;.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;(node-is TYPE)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Check that node has type &lt;code&gt;TYPE&lt;/code&gt;.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;(match NODE-TYPE PARENT-TYPE NODE-FIELD NODE-INDEX-MIN NODE-INDEX-MAX)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;code&gt;NODE-TYPE&lt;/code&gt; checks for node’s type, &lt;code&gt;PARENT-TYPE&lt;/code&gt; checks for parent’s type, &lt;code&gt;NODE-FIELD&lt;/code&gt; checks for the field name for node int the parent, &lt;code&gt;NODE-INDEX-MIN&lt;/code&gt; and &lt;code&gt;NODE-INDEX-MAX&lt;/code&gt; limits the node’s index in the parent. Any argument left as nil are not checked. For example, to match the node that is the first child and has a parent of type &lt;code&gt;argument_list&lt;/code&gt;, use&lt;br/&gt;&lt;code&gt;(match nil "argument_list" nil nil 0 0)&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;(query QUERY)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Queries the parent with &lt;code&gt;QUERY&lt;/code&gt;. Matches if the node is captured by any capture name.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;no-node&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Matches null node. When the current line is empty, there is no node at the beginning, so the node is nil.&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;&lt;code&gt;ANCHOR&lt;/code&gt; presets:&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;first-child&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Finds the first sibling of node, ie, the first child of the parent.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Finds the parent node.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;prev-sibling&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Finds node’s first sibling.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;no-indent&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Do nothing, don’t indent. This is useful for a indenting a line inside a multiline string, where masterful inactivity is most preferred.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;prev-line&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Find the named node on the previous line. This can be used when indenting an empty line: just indent like the previous node.&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id="Some%20handy%20tools" class="section"&gt;Some handy tools&lt;/h2&gt;&lt;p&gt;I have two handy tools for you to work with tree-sitter more easily: first, &lt;code&gt;tree-sitter-inspect-mode&lt;/code&gt; will show the relevant information of the node at point in the mode-line; second, &lt;code&gt;tree-sitter-check-indent&lt;/code&gt; can check the indent result against a stock major mode. Check out their docstring for more detail.&lt;/p&gt;&lt;h2 id="Feedback" class="section"&gt;Feedback&lt;/h2&gt;&lt;p&gt;You can send a message to &lt;a href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/lists.gnu.org/mailman/listinfo/emacs-devel"&gt;&lt;em&gt;emacs-devel&lt;/em&gt;&lt;/a&gt;, or open an issue on the &lt;a href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/github.com/casouri/emacs"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="An%20example" class="section"&gt;An example&lt;/h2&gt;&lt;p&gt;All these must be pretty confusing without seeing a concrete example, so here it is. This example code is for a demo C major mode, &lt;code&gt;ts-c-mode&lt;/code&gt;, defined in the “&lt;code&gt;;;; Lab&lt;/code&gt;” section in &lt;code&gt;tree-sitter.el&lt;/code&gt;. (Here is a &lt;a href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/github.com/casouri/emacs/blob/350ae9cc19e478f08468443843f63bdf005d9d92/lisp/tree-sitter.el#L640"&gt;link to the file on GitHub&lt;/a&gt;.)&lt;/p&gt;&lt;p&gt;Indent:&lt;/p&gt;&lt;pre class="code-block"&gt;(defvar ts-c-tree-sitter-indent-rules
  `((tree-sitter-c
     ;; Empty line.
     (no-node prev-line 0)

     ;; Function/struct definition body {}.
     ((match nil "function_definition" "body") parent 0)
     ((node-is "field_declaration_list") parent 0)

     ;; Call expression.
     ((parent-is "call_expression") parent 2)

     ;; If-else.
     ((match nil "if_statement" "condition") parent 2)
     ((match nil "if_statement" "consequence") parent 2)
     ((match nil "if_statement" "alternative") parent 2)
     ((match nil "switch_statement" "condition")  parent 2)
     ((node-is "else") parent 0)

     ;; Switch case.
     ((parent-is "case_statement") parent 2)
     ((node-is "case_statement") parent 0)

     ;; { and }.
     ((node-is "compound_statement") parent 2)
     ((node-is "}") parent 0)

     ;; Multi-line string.
     ((parent-is "string_literal") no-indent 0)

     ;; List.
     ,@(cl-loop for type in '("compound_statement" "initializer_list"
                              "argument_list" "parameter_list"
                              "field_declaration_list")
                collect `((match nil ,type nil 0 0) parent 2)
                collect `((match nil ,type nil 1) first-sibling 0)))))&lt;/pre&gt;&lt;p&gt;Font-lock:&lt;/p&gt;&lt;pre class="code-block"&gt;(defvar ts-c-tree-sitter-settings-1
  '(tree-sitter-c
    ((null) @font-lock-constant-face
     (true) @font-lock-constant-face
     (false) @font-lock-constant-face

     (comment) @font-lock-comment-face

     (system_lib_string) @ts-c-fontify-system-lib

     (unary_expression
      operator: _ @font-lock-negation-char-face)

     (string_literal) @font-lock-string-face
     (char_literal) @font-lock-string-face



     (function_definition
      declarator: (identifier) @font-lock-function-name-face)

     (declaration
      declarator: (identifier) @font-lock-function-name-face)

     (function_declarator
      declarator: (identifier) @font-lock-function-name-face)



     (init_declarator
      declarator: (identifier) @font-lock-variable-name-face)

     (parameter_declaration
      declarator: (identifier) @font-lock-variable-name-face)

     (preproc_def
      name: (identifier) @font-lock-variable-name-face)

     (enumerator
      name: (identifier) @font-lock-variable-name-face)

     (field_identifier) @font-lock-variable-name-face

     (parameter_list
      (parameter_declaration
       (identifier) @font-lock-variable-name-face))

     (pointer_declarator
      declarator: (identifier) @font-lock-variable-name-face)

     (array_declarator
      declarator: (identifier) @font-lock-variable-name-face)

     (preproc_function_def
      name: (identifier) @font-lock-variable-name-face
      parameters: (preproc_params
                   (identifier) @font-lock-variable-name-face))



     (type_identifier) @font-lock-type-face
     (primitive_type) @font-lock-type-face

     "auto" @font-lock-keyword-face
     "break" @font-lock-keyword-face
     "case" @font-lock-keyword-face
     "const" @font-lock-keyword-face
     "continue" @font-lock-keyword-face
     "default" @font-lock-keyword-face
     "do" @font-lock-keyword-face
     "else" @font-lock-keyword-face
     "enum" @font-lock-keyword-face
     "extern" @font-lock-keyword-face
     "for" @font-lock-keyword-face
     "goto" @font-lock-keyword-face
     "if" @font-lock-keyword-face
     "register" @font-lock-keyword-face
     "return" @font-lock-keyword-face
     "sizeof" @font-lock-keyword-face
     "static" @font-lock-keyword-face
     "struct" @font-lock-keyword-face
     "switch" @font-lock-keyword-face
     "typedef" @font-lock-keyword-face
     "union" @font-lock-keyword-face
     "volatile" @font-lock-keyword-face
     "while" @font-lock-keyword-face

     "long" @font-lock-type-face
     "short" @font-lock-type-face
     "signed" @font-lock-type-face
     "unsigned" @font-lock-type-face

     "#include" @font-lock-preprocessor-face
     "#define" @font-lock-preprocessor-face
     "#ifdef" @font-lock-preprocessor-face
     "#ifndef" @font-lock-preprocessor-face
     "#endif" @font-lock-preprocessor-face
     "#else" @font-lock-preprocessor-face
     "#elif" @font-lock-preprocessor-face
     )))&lt;/pre&gt;</content></entry>
  <entry><title>Don’t Use Rubber Pin Backings on Backpacks</title><link href="https://archive.casouri.cc/note/2021/secure-pin-backing"/><id>urn:uuid:093e8b2e-1515-11ec-b47c-a70e3cf20eb9</id><updated>2021-09-13T22:01:00.00-05:00</updated><content type="html">&lt;p&gt;If you like enamel pins, you know there are three types of backings: rubber, butterfly, and “secure/locking backing”. I grew up with butterfly backings, but nowadays, when you buy a enamel pin, more often than not, it comes with rubber backings.&lt;/p&gt;&lt;p&gt;Rubber backings—they feels insecure at first sight, but then the difficulty to remove one from the packaging might give you a false sense of security. Let me tell you: don’t trust them. My mistrust lost me a pin on my backpack. Thankfully I only lost one—the others are at most loose or missing one of two backings. Still, that’s enough proof that rubber backings are not suitable for surfaces that see a lot of movement, for example, a backpack.&lt;/p&gt;&lt;p&gt;Butterfly backings have their own problems: under stress or repeated use, they might loose the little metal butterfly wings. On top of that, they aren’t that much more secure than rubber backings. They won’t gradually loosen by time like the rubber backings do, but they can come loose or break under force.&lt;/p&gt;&lt;p&gt;That left the “secure/locking” backings. They can be a bit of pain when putting on and taking off—you need to get a feel for them. But they are secure. Buy a box of them from Amazon for a couple bucks, and your precious pins won’t gone missing from your backpack again.&lt;/p&gt;</content></entry>
  <entry><title>自动处理网页里的全角引号和标点挤压</title><link href="https://archive.casouri.cc/note/2021/full-width-quote"/><id>urn:uuid:05c234e6-d6b3-11eb-b625-f744d8291272</id><updated>2021-09-03T13:15:00.00-05:00</updated><content type="html">&lt;h2 id="%E5%85%A8%E8%A7%92%E5%BC%95%E5%8F%B7" class="section"&gt;全角引号&lt;/h2&gt;&lt;p&gt;在 Unicode 里&lt;span class="full-width-mark"&gt;，&lt;/span&gt;问号&lt;span class="full-width-mark"&gt;、&lt;/span&gt;叹号&lt;span class="full-width-mark"&gt;、&lt;/span&gt;各种括号都有全角半角两种版本&lt;span class="full-width-mark"&gt;，&lt;/span&gt;各自有独立的编码&lt;span class="full-width-mark"&gt;；&lt;/span&gt;但因为莫名的原因&lt;span class="full-width-mark"&gt;，&lt;/span&gt;最常用的引号却不在此列&lt;span class="full-width-mark"&gt;。&lt;/span&gt;中英混排的时候想要正确显示直角和半角的引号就很头疼&lt;span class="full-width-mark"&gt;；&lt;/span&gt;搞不好的话&lt;span class="full-width-mark"&gt;，&lt;/span&gt;中文里显示半角引号还不算太违和&lt;span class="full-width-mark"&gt;，&lt;/span&gt;英文里蹦出来一个全角引号就太丑了&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;CSS 没法自动区别什么时候用全角引号&lt;span class="full-width-mark"&gt;、&lt;/span&gt;什么时候用半角&lt;span class="full-width-mark"&gt;，&lt;/span&gt;只能靠标记&lt;span class="full-width-mark"&gt;。&lt;/span&gt;好在还没复杂到需要手工标记的地步&lt;span class="full-width-mark"&gt;，&lt;/span&gt;只要用程序检查引号前后的字是中文还是英文&lt;span class="full-width-mark"&gt;，&lt;/span&gt;以此标记全角还是半角&lt;span class="full-width-mark"&gt;，&lt;/span&gt;就基本不会出错&lt;span class="full-width-mark"&gt;。&lt;/span&gt;我现在的办法是这样&lt;span class="full-width-mark"&gt;，&lt;/span&gt;默认字体还是英文先中文后&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre class="code-block"&gt;body {
  font-family: Charter, Source Han Serif CN, serif;
}&lt;/pre&gt;&lt;p&gt;需要全角的引号用 &lt;code&gt;span&lt;/code&gt; 标签包起来&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre class="code-block"&gt;&amp;lt;span class="full-width-quote"&amp;gt;“&amp;lt;/span&amp;gt;&lt;/pre&gt;&lt;p&gt;然后用 CSS 指定中文字体&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre class="code-block"&gt;span.full-width-quote {
  font-family: Srouce Han Serif CN, serif;
}&lt;/pre&gt;&lt;p&gt;怎么区别一个引号应该全角还是半角呢&lt;span class="full-width-mark"&gt;？&lt;/span&gt;我用了一个简单的判断方法&lt;span class="full-width-mark"&gt;：&lt;/span&gt;如果前或后紧挨着中文字符&lt;span class="full-width-mark"&gt;，&lt;/span&gt;就全角&lt;span class="full-width-mark"&gt;；&lt;/span&gt;如果前后都不是中文字符&lt;span class="full-width-mark"&gt;，&lt;/span&gt;就半角&lt;span class="full-width-mark"&gt;。&lt;/span&gt;我目前还没发现这个简单判断不够用的情况&lt;span class="full-width-mark"&gt;。&lt;/span&gt;这样一来还需要判断一个字符是不是中文&lt;span class="full-width-mark"&gt;，&lt;/span&gt;最简单的办法是检查字符的 Unicode codepoint 在不在中文区间内&lt;span class="full-width-mark"&gt;。&lt;/span&gt;常用汉字和标点符号在 &lt;code&gt;0x4E00&lt;/code&gt;–&lt;code&gt;0x9FFF&lt;/code&gt; 和 &lt;code&gt;0x3000&lt;/code&gt;–&lt;code&gt;0x303F&lt;/code&gt; 两个区间里&lt;span class="full-width-mark"&gt;，&lt;/span&gt;检查这两个就够了&lt;span class="full-width-mark"&gt;，&lt;/span&gt;其他的区间里都是生僻字&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 id="%E6%A0%87%E7%82%B9%E6%8C%A4%E5%8E%8B" class="section"&gt;标点挤压&lt;/h2&gt;&lt;p&gt;全角引号搞好了&lt;span class="full-width-mark"&gt;，&lt;/span&gt;又会贪心标点挤压&lt;span class="full-width-mark"&gt;。&lt;/span&gt;没有标点挤压的时候&lt;span class="full-width-mark"&gt;，&lt;/span&gt;几个标点排在一起确实不大好看&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class="half300" alt="没有标点挤压的样子" src="https://archive.casouri.cc/note/2021/full-width-quote/%E4%BE%8B%E5%AD%901.png"/&gt;
&lt;figcaption&gt;&lt;a href="https://archive.casouri.cc/note/2021/full-width-quote/https:/archive.casouri.cat/rock/day/day-48/index.html"&gt;余日摇滚第48期&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;挤压以后就不那么空了&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class="half300" alt="有标点挤压的样子" src="https://archive.casouri.cc/note/2021/full-width-quote/%E4%BE%8B%E5%AD%902.png"/&gt;
&lt;figcaption&gt;&lt;a href="https://archive.casouri.cc/note/2021/full-width-quote/https:/archive.casouri.cat/rock/day/day-48/index.html"&gt;余日摇滚第48期&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;原理是设置 CSS 属性 &lt;code&gt;font-feature-settings: "halt"&lt;/code&gt;&lt;span class="full-width-mark"&gt;，&lt;/span&gt;启用 OpenType 的 &lt;code&gt;halt&lt;/code&gt; 特性&lt;span class="full-width-mark"&gt;。&lt;/span&gt;和全角引号一样&lt;span class="full-width-mark"&gt;，&lt;/span&gt;用程序自动识别需要挤压的标点&lt;span class="full-width-mark"&gt;，&lt;/span&gt;包在 &lt;code&gt;span&lt;/code&gt; 标签里&lt;span class="full-width-mark"&gt;。&lt;/span&gt;要注意的是&lt;span class="full-width-mark"&gt;，&lt;/span&gt;你用的字体要有 &lt;code&gt;halt&lt;/code&gt; 这个特性才行&lt;span class="full-width-mark"&gt;，&lt;/span&gt;我用的思源宋体是有的&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;具体怎么挤压标点符号&lt;span class="full-width-mark"&gt;，&lt;/span&gt;我没找到现成的标准或者算法&lt;span class="full-width-mark"&gt;，&lt;/span&gt;下面是我的方法&lt;span class="full-width-mark"&gt;。&lt;/span&gt;这个方法并不完整&lt;span class="full-width-mark"&gt;，&lt;/span&gt;只处理比较常见的情况&lt;span class="full-width-mark"&gt;，&lt;/span&gt;但对我来说够用了&lt;span class="full-width-mark"&gt;。&lt;/span&gt;如果读者知道更好的算法&lt;span class="full-width-mark"&gt;，&lt;/span&gt;请一定告诉我&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先&lt;span class="full-width-mark"&gt;，&lt;/span&gt;能挤压的标点符号可以分为三类&lt;span class="full-width-mark"&gt;：&lt;/span&gt;靠左&lt;span class="full-width-mark"&gt;，&lt;/span&gt;靠右&lt;span class="full-width-mark"&gt;，&lt;/span&gt;居中&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt="各种类型的标点符号" src="https://archive.casouri.cc/note/2021/full-width-quote/%E5%90%84%E7%B1%BB%E7%AC%A6%E5%8F%B7.png"/&gt;
&lt;figcaption&gt;&lt;a href="https://archive.casouri.cc/note/2021/full-width-quote/https:/www.w3.org/TR/2020/WD-clreq-20201101"&gt;&lt;span class="full-width-mark"&gt;《&lt;/span&gt;中文排版需求&lt;span class="squeeze full-width-mark"&gt;》&lt;/span&gt;&lt;span class="full-width-mark"&gt;，&lt;/span&gt;W3C Working Draft 01 November 2020&lt;span class="full-width-mark"&gt;，&lt;/span&gt;3.1.6 标点符号的宽度调整&lt;span class="full-width-mark"&gt;，&lt;/span&gt;有修改&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们不考虑居中的符号&lt;span class="full-width-mark"&gt;，&lt;/span&gt;因为简体中文普遍不用&lt;span class="full-width-mark"&gt;，&lt;/span&gt;而我以简体中文写作&lt;span class="full-width-mark"&gt;。&lt;/span&gt;程序从头到尾遍历每个字符&lt;span class="full-width-mark"&gt;，&lt;/span&gt;决定每个字符要不要挤压&lt;span class="full-width-mark"&gt;。&lt;/span&gt;挤不挤压取决于这个字符和其前后的字符&lt;span class="full-width-mark"&gt;，&lt;/span&gt;以伪码表达为&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre class="code-block"&gt;遍历 字符：
  如果 此字符为靠左标点 且 后一字符为标点：
    挤压此字符
  如果 此字符为靠右标点 且 前一字符为靠右标点：
    挤压此字符&lt;/pre&gt;&lt;p&gt;这个算法运行的结果是这样&lt;span class="squeeze full-width-mark"&gt;：&lt;/span&gt;&lt;span class="full-width-mark"&gt;（&lt;/span&gt;&lt;span class="squeeze full-width-mark"&gt;（&lt;/span&gt;文字&lt;span class="squeeze full-width-mark"&gt;）&lt;/span&gt;&lt;span class="squeeze full-width-mark"&gt;）&lt;/span&gt;&lt;span class="squeeze full-width-mark"&gt;，&lt;/span&gt;&lt;span class="full-width-mark"&gt;（&lt;/span&gt;文&lt;span class="squeeze full-width-mark"&gt;）&lt;/span&gt;&lt;span class="full-width-mark"&gt;「&lt;/span&gt;字&lt;span class="squeeze full-width-mark"&gt;」&lt;/span&gt;&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a id="footref:subset" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Asubset"&gt;如果你用 &lt;code&gt;pyftsubset&lt;/code&gt; 压缩过字体文件&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;span class="full-width-mark"&gt;，&lt;/span&gt;注意它默认会把 &lt;code&gt;halt&lt;/code&gt; 这样的 OTF 特性扔掉&lt;span class="full-width-mark"&gt;，&lt;/span&gt;这样一来即使加上挤压标签也没有效果&lt;span class="full-width-mark"&gt;。&lt;/span&gt;压缩的时候加上 &lt;code&gt;--layout-features='*'&lt;/code&gt; 这个选项就可以保留所有 OTF 特性了&lt;span class="full-width-mark"&gt;。&lt;/span&gt;也可以用 &lt;code&gt;--layout-features='halt'&lt;/code&gt; 只保留 &lt;code&gt;halt&lt;/code&gt; 特性&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;div id="footdef:subset" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Asubset"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;参见 &lt;a href="https://archive.casouri.cc/note/2019/reduce-font-loading-time-in-my-blog/index.html"&gt;&lt;em&gt;Reduce Font Loading Time in My Blog&lt;/em&gt;&lt;/a&gt;&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="%E7%A0%B4%E6%8A%98%E5%8F%B7" class="section"&gt;破折号&lt;/h2&gt;&lt;p&gt;我还发现破折号有时会显示成 em dash&lt;span class="full-width-mark"&gt;（&lt;/span&gt;因为破折号在 Unicode 里其实就是 em dash&lt;span class="squeeze full-width-mark"&gt;）&lt;/span&gt;&lt;span class="full-width-mark"&gt;。&lt;/span&gt;解决方法和全角引号一样&lt;span class="full-width-mark"&gt;，&lt;/span&gt;包上全角的 &lt;code&gt;span&lt;/code&gt; 标签就可以了&lt;span class="full-width-mark"&gt;——&lt;/span&gt;这样就能正确显示破折号&lt;span class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;</content></entry>
</feed>
