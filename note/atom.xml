<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Notes</title>
<link href="https://archive.casouri.cc/note" rel="self" />
<updated>2025-02-22T23:13:00.00-05:00</updated>
<author>
<name>Yuan Fu</name>
</author>
<icon>https://archive.casouri.cc/favicon.png</icon>
<id>urn:uuid:53fd03d4-ec1b-11eb-8cca-e7401fdbc2e2</id>
<entry>
<title>I Made a Font!</title>
<link href="https://archive.casouri.cc/note/2025/boritina" />
<id>urn:uuid:5520c5ac-ed7f-11ef-b773-f3846d3eaa16</id>
<updated>2025-02-17T14:32:00.00-05:00</updated>
<content type="html">&lt;h2 id="The%20story" class="section"&gt;The
story&lt;/h2&gt;&lt;p&gt;I’ve always been kind of a type enthusiast, and
naturally I dream about making a typeface myself. So when Letterform
Archive here in SF opened an online introductory type design course last
summer, I snatched the opportunity and signed up. It was hella fun, and
hella grind. I would start working on the font after I get off work and
not stop until midnight. Kind of addicting, honestly—seeing a font
steadily taking shape, and stare at the beautiful letters and think “I
made it”.&lt;/p&gt;&lt;p&gt;The instructor &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/www.instagram.com/keltroughton"&gt;Kel&lt;/a&gt;
and TA &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/www.instagram.com/thetypefella"&gt;Josh&lt;/a&gt;
are so nice and supportive, and they definitely knows their sh..tuff. The
classmates are all so cool and creative. It’s so fun to get to know
artists, when you interact with mostly engineers everyday. One of the
classmates, Brian, actually started doing type: &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/www.instagram.com/fusion_type"&gt;Fusion
Type&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;When the course ended I finished the
lower and upper case, lining and oldstyle numbers, some symbols and basic
diacritics. After the course I didn’t touch it for a few weeks, then
added some more symbols and started to add a bold. But eventually the
progress almost stalled. I’ve finished the bold for all the letters but
couldn’t get myself to finish the bold for all those numbers and symbols,
and fix kerning for everything. Doubt also starts creeping in—looking at
those beautiful and polished typefaces like &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/www.typotheque.com/fonts/william-text"&gt;William&lt;/a&gt;,
Clifford, &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/djr.com/fern"&gt;Fern&lt;/a&gt;,
my font looks more and more like a nervous splotchy mess that doesn’t
know what it wants to be. By the end of &lt;span
class="oldstyle-num"&gt;2024&lt;/span&gt;, I almost give up finishing
it.&lt;/p&gt;&lt;p&gt;Fast forward to a few days ago, I was reading a
newsletter in my mail client, and noticed that the font looks so pretty!
I’ve set the default font of my mail client to my font (so I can catch
errors and tweak the font in a real setting), but it looked so good that
I thought it’s using some other font that the newsletter brought itself.
I had to zoom in and look at the letters back and forth before certain
that it’s using my font. That encouraged me so much, and I thought I’ll
do the “get a garbage out first” strat and just finish it real quick, not
dwell on anything, just skip it if I can’t make something
work.&lt;/p&gt;&lt;p&gt;It’s been a week, I finished bold for numbers and
all the symbols, more-or-less copy-pasted kerning from regular to bold,
and added smallcaps using &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/remix-tools.com"&gt;font
remix tools&lt;/a&gt;. It’s finally ready to be used on my blog! Though
definitely not ready for anybody else to use. I haven’t even asked
anybody to review the bold for me, because I don’t think it’s presentable
for review right now.&lt;/p&gt;&lt;figure&gt;&lt;img alt="Screenshot of
the newsletter that"
src="https://archive.casouri.cc/note/2025/boritina/newsletter.png"/&gt;
&lt;figcaption&gt;A screenshot of the &lt;span
class="oldstyle-num"&gt;February 11, 2025&lt;/span&gt; issue of
&lt;em&gt;Letters from an American&lt;/em&gt;. Thanks for reigniting me
to finish the font :-) Here’s &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/heathercoxrichardson.substack.com/about"&gt;a
link to the newsletter&lt;/a&gt;.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2
id="The%20font" class="section"&gt;The font&lt;/h2&gt;&lt;p&gt;I call
this font Boritina, because people seems to name fonts something-tina a
lot, and I want to make a boring body text.&lt;/p&gt;&lt;p&gt;Boritina is
basically a mixture of all the features I like for a body text. Before
Boritina, I was using &lt;a
href="https://archive.casouri.cc/note/2025/boritina/https:/klim.co.nz/retail-fonts/martina-plantijn"&gt;Martina
Plantijn&lt;/a&gt; for this blog. It’s clean as crystal, and has the
color I like, but I can envision something that has a bit more flair like
a classic Venetian typeface—the slanted bar of e, the longer stems, the
extended tail of Q, the warmer feeling, the dagger, etc. On the other
hand, old Venetian often are too thin and delicate, and a x-height as low
as classic Venetian’s is a bit inconvenient for modern settings. I want
the robustness of Plantin, and other modern features so the font doesn’t
look out-of-place even for a technical blog like this
one.&lt;/p&gt;&lt;p&gt;I stole the skeleton from Jenson’s roman, but
relaxed the aperture and shortened the x-height. I maintained a low
contrast, and kept a tiny bit of remnant of pen strokes, to capture that
humane warmth, while not appearing too old. The curves are largely very
simplistic, but I added a tiny bit of personality in the bowl of B, R,
and D, and in the serif of G and S. So when you look up close, it’s not
completely dull. R, Q, J all have very extended tails, which I like;
together with the wider capitals, they make the font spacious and
extended and comfortable—some of the “workhorse” body text typefaces
tends to have very short descenders and cramped tails and feet, which I
sometimes find a bit uncomfortable. In this day and age, page count isn’t
an issue anymore, so I say we deserve some more
room.&lt;/p&gt;&lt;p&gt;Another guardrail—or limitation, depends on how
you see it—that I set for myself is to make the counterspace as pretty as
the strokes are. If you look at the inside of h, n, m, the triangles of
x, v, y, w, the bowl of b, p, q, d, or inside and around the capitals,
you’ll find them to be pretty shapes.&lt;/p&gt;&lt;p&gt;To see the font
in action, well, you’ve been seeing it in action, since this blog now
uses Boritina (it still uses Margina Plantijn for italics). I might make
a specimen/showcase page for Boritina later.&lt;/p&gt;</content>
</entry>
<entry>
<title>Tree-sitter Changes in Emacs 30</title>
<link href="https://archive.casouri.cc/note/2024/emacs-30-tree-sitter" />
<id>urn:uuid:7ca5d6e8-6360-11ef-a7d1-9fc47809e9cf</id>
<updated>2024-12-16T21:19:00.00-05:00</updated>
<content type="html">&lt;p&gt;A year has passed since the release of
Emacs &lt;span class="oldstyle-num"&gt;29&lt;/span&gt;; last time we
added support for tree-sitter and several tree-sitter-based major modes.
This time, there are more major modes, better support for multi-language
modes, and more utility features.&lt;/p&gt;&lt;p&gt;The first three
sections introduce changes visible to end-users, the rest are for package
and major mode developers.&lt;/p&gt;&lt;h2 id="Derived%20mode%20check"
class="section"&gt;Derived mode check&lt;/h2&gt;&lt;p&gt;Now
&lt;code&gt;(derived-mode-p 'c-mode)&lt;/code&gt; returns
&lt;code&gt;t&lt;/code&gt; even in &lt;code&gt;c-ts-mode&lt;/code&gt;
(and similarly for other builtin tree-sitter modes). That means
&lt;code&gt;.dir-locals.el&lt;/code&gt; settings and yasnippets for
&lt;code&gt;c-mode&lt;/code&gt; will work for
&lt;code&gt;c-ts-mode&lt;/code&gt; too. However,
&lt;code&gt;c-ts-mode&lt;/code&gt; still doesn’t run
&lt;code&gt;c-mode&lt;/code&gt;’s major mode hooks. Also, there’s still
no major mode fallback. But I think that can be solved by packages like
&lt;a
href="https://archive.casouri.cc/note/2024/emacs-30-tree-sitter/https:/github.com/renzmann/treesit-auto"&gt;treesit-auto&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This
new inheritance doesn’t come automatically, someone needs to use
&lt;code&gt;derived-mode-add-parents&lt;/code&gt; to add the
relationship.&lt;/p&gt;&lt;h2 id="New%20major%20modes"
class="section"&gt;New major modes&lt;/h2&gt;&lt;p&gt;There are some new
built-in major modes: Elixir and HEEx mode, HTML mode, Lua mode, PHP mode
with PHPDoc support, and Doxygen support for C/C++/Java mode. Kudos to
Wilhelm for writing Elixir and HEEx mode, John for writing Lua mode, and
Vincenzo for writing PHP mode and Doxygen support!&lt;/p&gt;&lt;p&gt;HEEx
mode and PHP mode really shows the power of tree-sitter: without
tree-sitter, it would take a lot of work to write a major mode for mixed
languages like these; now tree-sitter takes care of all the hard work,
and we can focus on writing the things we care about: font-lock and
indentation rules, utility commands, etc.&lt;/p&gt;&lt;p&gt;When Wilhelm
and Vincenzo were implementing multi-language major modes, they found
bugs and missing features in Emacs and provided invaluable feedback on
emacs-devel and the bug tracker. Their feedback and requests allow us to
improve Emacs’ support for multi-languages. So if you’re writing a major
mode or some package with tree-sitter and run into issues, don’t hesitate
to reach out on emacs-devel or the bug tracker!&lt;/p&gt;&lt;h2
id="Sexp%20movement" class="section"&gt;Sexp
movement&lt;/h2&gt;&lt;p&gt;I’ll explain it a bit more in the next
section, but the gist is that &lt;code&gt;forward-sexp&lt;/code&gt; and
&lt;code&gt;backward-sexp&lt;/code&gt; can now use the parse tree for
navigation, as long as the major mode adds support for them. Users can
also change what’s considered a &lt;code&gt;sexp&lt;/code&gt; (A
statement? An expression? Or any node in the parse tree?) themselves,
overriding the major mode’s setting.&lt;/p&gt;&lt;h2
id="Defining%20things" class="section"&gt;Defining
things&lt;/h2&gt;&lt;p&gt;Sections below are mostly for
developers.&lt;/p&gt;&lt;p&gt;In the spirt of
&lt;code&gt;thing-at-point&lt;/code&gt;, a major mode or user can now
define tree-sitter &lt;em&gt;things&lt;/em&gt;:
&lt;code&gt;defun&lt;/code&gt;, &lt;code&gt;sexp&lt;/code&gt;,
&lt;code&gt;sentence&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt;,
&lt;code&gt;text&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;, etc. The
definition is flexible: it can be a regexp matching node names, or a
predicate function, or a regexp plus a predicate. It can also be defined
with logical operands &lt;code&gt;not&lt;/code&gt; and
&lt;code&gt;or&lt;/code&gt;, like &lt;code&gt;(not sexp)&lt;/code&gt;, or
&lt;code&gt;(not "comment")&lt;/code&gt;, &lt;code&gt;(or comment
text)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;At the moment, the following
“standard” things are used by
Emacs:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;sexp&lt;/code&gt;: Used
by &lt;code&gt;forward-sexp&lt;/code&gt;,
etc.&lt;/li&gt;&lt;li&gt;&lt;code&gt;defun&lt;/code&gt;: Used by
&lt;code&gt;end-of-defun&lt;/code&gt;,
etc.&lt;/li&gt;&lt;li&gt;&lt;code&gt;sentence&lt;/code&gt;: Used by
&lt;code&gt;forward-sentence&lt;/code&gt;. In imperative languages, it
can be a statement.&lt;/li&gt;&lt;li&gt;&lt;code&gt;comment&lt;/code&gt;:
All types of
comments.&lt;/li&gt;&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: All types
of strings.&lt;/li&gt;&lt;li&gt;&lt;code&gt;text&lt;/code&gt;: Any
non-code. Comments, strings, and text in languages HTML and
jsx.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Like font-lock features, we’re
starting with a basic list; if you have suggestions fore more things
(perhaps you wrote a package that uses a thing that major modes should
support), reach out on emacs-devel or
debbugs.&lt;/p&gt;&lt;p&gt;Tree-sitter things are supported in every
tree-sitter function . Once the major mode defines it, everyone can use
it. Here are some things you can do with it:&lt;/p&gt;&lt;p&gt;Get the
sexp at point &lt;a id="footref:in-any-mode" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Ain-any-mode"&gt;in any tree-sitter major mode&lt;sup
class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;:
&lt;code&gt;(treesit-thing-at-point 'sexp 'nested)&lt;/code&gt;. Get the
sexp before point: &lt;code&gt;(treesit-thing-prev (point)
'sexp)&lt;/code&gt;.&lt;/p&gt;&lt;div id="footdef:in-any-mode"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Ain-any-mode"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Provided that the mode defined the
thing.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Generate a tree of all the defuns
in a buffer:&lt;/p&gt;&lt;pre
class="code-block"&gt;(treesit-induce-sparse-tree
(treesit-buffer-root-node) 'defun)&lt;/pre&gt;&lt;p&gt;Traverse
things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;treesit-beginning-of-thing&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;treesit-end-of-thing&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;treesit-navigate-thing&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I
can also see packages reserving a particular thing, and have major modes
add definition for that thing. In that case, it’s best to add the package
prefix to avoid naming conflict.&lt;/p&gt;&lt;h2 id="Local%20parsers"
class="section"&gt;Local parsers&lt;/h2&gt;&lt;p&gt;Normally, even for
the embedded language, there’s only one parser for that language in a
buffer. Each individual embedded code block are “stitched together” and
is parsed as a whole by that parser. The pro is we only need to create
one parser, the cons are error in one code block might affect other code
blocks, and sometimes, each code block is syntactically self-contained
and shouldn’t be stitched with others.&lt;/p&gt;&lt;p&gt;That’s why we
added local parsers, with each one confined to a single code block. Emacs
creates and manages parsers for each embedded code block automatically.
PHPDoc and Doxygen support are possible thanks to local parsers. To use
local parsers, simply add the &lt;code&gt;:local t&lt;/code&gt; flag in
&lt;code&gt;treesit-range-rules&lt;/code&gt;, and Emacs handles the
rest.&lt;/p&gt;&lt;h2 id="Other%20changes" class="section"&gt;Other
changes&lt;/h2&gt;&lt;p&gt;A small convenience improvement:
&lt;code&gt;treesit-font-lock-rules&lt;/code&gt; now supports the
&lt;code&gt;:default-language&lt;/code&gt; keyword, so major mode author
don’t need to write &lt;code&gt;:language 'xxx&lt;/code&gt; for every
query anymore.&lt;/p&gt;&lt;p&gt;Each parser in the parser list now has a
tag. By default, a parser has the &lt;code&gt;nil&lt;/code&gt; tag, and
&lt;code&gt;(treesit-parser-list)&lt;/code&gt; returns all the parsers
with &lt;code&gt;nil&lt;/code&gt; tag (because the third optional
argument &lt;code&gt;TAG&lt;/code&gt; defaults to
&lt;code&gt;nil&lt;/code&gt;). That means if you don’t explicitly set a
tag when creating a parser, it’ll show up when anyone calls
&lt;code&gt;(treesit-parser-list)&lt;/code&gt;. On the other hand, you
can create a parser that doesn’t show up in the parser list if you give
it a non-nil tag. The intended use-case is to create special purpose
parsers that shouldn’t normally appear in the parser
list.&lt;/p&gt;&lt;p&gt;Local parsers has the
&lt;code&gt;embedded&lt;/code&gt; tag, so they don’t appear in the parser
list. You can get them by passing &lt;code&gt;embedded&lt;/code&gt; to
the &lt;code&gt;TAG&lt;/code&gt; argument, or by passing the special
value &lt;code&gt;t&lt;/code&gt; to the &lt;code&gt;TAG&lt;/code&gt;
argument, which means return all parsers regardless of their
tag.&lt;/p&gt;&lt;p&gt;Indirect buffers now gets individual parser lists.
In Emacs 29, the origin buffer and all its indirect buffers share the
same parser list. Now they each have their own parser
list.&lt;/p&gt;&lt;h2
id="Better%20filling%20for%20C-style%20comment%20blocks"
class="section"&gt;Better filling for C-style comment
blocks&lt;/h2&gt;&lt;p&gt;This is not directly related to tree-sitter but
it affects tree-sitter modes for all C-like languages. You see, all these
tree-sitter major modes (C, C++, Java, Rust, Javascript, Typescript) uses
C-style comment blocks, and they all use
&lt;code&gt;c-ts-common.el&lt;/code&gt; for things like filling the
comment block, or setting up &lt;code&gt;comment-start&lt;/code&gt;,
etc.&lt;/p&gt;&lt;p&gt;Traditionally these kind of major modes use
cc-mode’s utilities, but cc-mode is a beast on its own, and it’s not
worth it to add that dependency for filling a comment block. (It’s not
just code dependency, but also cc-mode’s own parsing facility, data
structure, etc.) So we had to recreate these utilities in
&lt;code&gt;c-ts-common.el&lt;/code&gt;, with the bonus goal of keeping
the code as easy to read as possible.&lt;/p&gt;&lt;p&gt;Filling C-style
comment block is harder than one might imagine. It’s quite involved and
interesting, and worth a separate article on its own. Suffice to say that
the filling logic is improved and works on even more styles of C comment
blocks now. Below are a few among the ones that we
support.&lt;/p&gt;&lt;pre class="code-block"&gt;/* xxx /** /* xxx * xxx *
xxx xxx */ */ xxx */ /*====== /* * xxx | xxx *======/
*/&lt;/pre&gt;&lt;p&gt;And it goes beyond just filling, when you type
return in a comment block, you expect the next line to be prefixed with
some character (&lt;code&gt;*&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt;
or space) and indented to the right place. Making that work for all those
styles on top of the filling and keeping the code reasonably readable is
a small miracle :-)&lt;/p&gt;&lt;h2 id="Primary%20parser"
class="section"&gt;Primary parser&lt;/h2&gt;&lt;p&gt;If you are the
author of a tree-sitter major mode, make sure to set
&lt;code&gt;treesit-primary-parser&lt;/code&gt; in your major mode if it
has multiple languages! This is a new variable added in Emacs &lt;span
class="oldstyle-num"&gt;30&lt;/span&gt;, and setting it is vital for
font-lock update to work properly in complex situations. Emacs makes a
reasonable guess when the major mode doesn’t set it themselves (it sets
the first parser in the parser list as the primary parser). But this
guess doesn’t work reliably for multi-language major
modes.&lt;/p&gt;&lt;p&gt;Besides Emacs itself, other packages can also
make use of this variable. It’ll be better than &lt;code&gt;(car
(treesit-parser-list))&lt;/code&gt;, especially in multi-language
modes.&lt;/p&gt;&lt;p&gt;Having an explicit primary parser allows Emacs
to update the “changed region” after each buffer change correctly,
especially for multi-language modes. For example, when the user types the
closing block comment delimiter &lt;code&gt;*/&lt;/code&gt;, not only
does Emacs fontify the &lt;code&gt;*/&lt;/code&gt; itself, it also needs
to re-fontify the whole block comment, which previously weren’t fontified
in comment face due to incomplete parse tree. You can read more about it
in &lt;code&gt;treesit--font-lock-mark-ranges-to-fontify&lt;/code&gt; and
&lt;code&gt;treesit--pre-redisplay&lt;/code&gt;.&lt;/p&gt;&lt;h2
id="Ready%20your%20major%20mode%20for%20Emacs%2030"
class="section"&gt;Ready your major mode for Emacs
30&lt;/h2&gt;&lt;p&gt;Here’s a check
list:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Define
&lt;code&gt;treesit-primary-parser&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Define
things in &lt;code&gt;treesit-thing-settings&lt;/code&gt;, especially
&lt;code&gt;sexp&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Err, that
list is shorter than I thought. But I do have some more words for
&lt;code&gt;sexp&lt;/code&gt; thing.&lt;/p&gt;&lt;p&gt;There are multiple
ways of defining the &lt;code&gt;sexp&lt;/code&gt; thing, you can define
it to any node (excluding some punctuation marks), or repeatable node
(function arguments, list elements, statements, blocks, defun), or a
hand-crafted list of nodes.&lt;/p&gt;&lt;p&gt;Defining
&lt;code&gt;sexp&lt;/code&gt; as every node (excluding punctuation) could
be a good starting point. For example, this is the definition for
&lt;code&gt;sexp&lt;/code&gt; in
&lt;code&gt;c-ts-mode&lt;/code&gt;:&lt;/p&gt;&lt;pre
class="code-block"&gt;(not ,(rx (or "{" "}" "[" "]" "(" ")"
",")))&lt;/pre&gt;&lt;p&gt;This way, if point is at the beginning of any
thing, C-M-f will bring me to the end of that thing, be it an expression,
statement, function, block, or whatever. I use it all the time and it’s
very handy for selecting code.&lt;/p&gt;&lt;p&gt;&lt;a
id="footref:sexp-list" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Asexp-list"&gt;A slight
upgrade&lt;sup class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt; from
this is to define &lt;code&gt;sexp&lt;/code&gt; to anything that’s
repeatable. That takes a bit more effort but C-M-f will always move you
to the end of a repeatable construct. This is more inline with the
concept of sexp, where we consider each repeatable construct in the code
as an atom.&lt;/p&gt;&lt;div id="footdef:sexp-list"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Asexp-list"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;This is just my personal opinion, of course.
“Everything is a sexp” might as well be better, since you can move over
more types of things.&lt;/div&gt;&lt;/div&gt;&lt;h2 id="Emacs%2031"
class="section"&gt;Emacs 31&lt;/h2&gt;&lt;p&gt;At this point we have
pretty good support for writing major modes with tree-sitter. Many
tree-sitter major modes and packages appeared after Emacs &lt;span
class="oldstyle-num"&gt;29&lt;/span&gt; and it’s very encouraging. We’ll
continue making it easier to write major modes with tree-sitter, and make
it easier to use and configure tree-sitter modes. For example, we’ll add
a baseline indentation rule, so major mode authors need to write less
indentation rules. And there’re some upgrades to the sexp movement,
too.&lt;/p&gt;&lt;p&gt;There are still some unsolved issues. The lack of
versioning for language grammars breaks major modes from time to time;
installing tree-sitter grammar is not very easy; tree-sitter library
still has bugs that results in incorrect parse tree or even causes Emacs
to hang. These will be resolved, albeit slowly.&lt;/p&gt;&lt;p&gt;That’s
about it! Emacs has been making good progress regarding tree-sitter. And
as I said last time, tree-sitter is a really good way to start
contributing to Emacs. We’ve seen folks adding their tree-sitter modes
into Emacs, you could be the next! Also, many existing builtin major
modes lacks utiliy functions that usually come with a major mode. If you
see missing feature in a mode, feel free to send a
patch!&lt;/p&gt;&lt;p&gt;Ok folks, stay tuned for the next update for
Emacs &lt;span class="oldstyle-num"&gt;31&lt;/span&gt;, and feel free to
reach out in the meantime!&lt;/p&gt;</content>
</entry>
<entry>
<title>Peer-to-peer Connection with WebRTC in Rust Using
webrtc-rs</title>
<link href="https://archive.casouri.cc/note/2024/rust-webrtc" />
<id>urn:uuid:9b2c35da-4583-11ef-a0d5-53181c23211b</id>
<updated>2024-07-20T00:00:00.00-05:00</updated>
<content type="html">&lt;p&gt;This is a guide for using &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/webrtc.rs"&gt;webrtc-rs&lt;/a&gt;
to create &lt;span class="oldstyle-num"&gt;p2p&lt;/span&gt; connections
that can go through NAT in Rust. This should be useful for anyone that
wants to create a &lt;span
class="oldstyle-num"&gt;p2p&lt;/span&gt;/distributed program. I assume
the reader knows about &lt;a id="footref:stun" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Astun"&gt;STUN, ICE&lt;sup
class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;, websocket. I’ll brefly
explain how WebRTC works. Reader also needs to know PEM, DER, X.509, and
PKI in general, for the security side of things.&lt;/p&gt;&lt;p&gt;I’m
not an expert on WebRTC, just some dude that needs &lt;span
class="oldstyle-num"&gt;p2p&lt;/span&gt; and spent some time figuring out
how to use webrt-rs for it; so if you spot some mistake, please do
correct me!&lt;/p&gt;&lt;div id="footdef:stun" class="footdef"&gt;&lt;div
class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to
main text" href="#footref%3Astun"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Yuo can refer to this post: &lt;a
href="https://archive.casouri.cc/note/2024/2022/nat-what-do-they-do/index.html"&gt;&lt;em&gt;NAT
traversal: STUN, TURN, ICE, what do they actually
do?&lt;/em&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2
id="Overall%20structure" class="section"&gt;Overall
structure&lt;/h2&gt;&lt;p&gt;There are several parts in the system. First
there is a bunch of &lt;span class="oldstyle-num"&gt;p2p&lt;/span&gt;
programs that want to connect to each other, let’s call them peers. Then
there needs to be a public-facing server that every peer can connect to.
You’ll need to write this server and host it yourself. When peer A and B
wants to connect to each other, they both send a request to the public
server (let’s call it S); S will relay information between A and B, until
A and B successfully establish a &lt;a id="footref:udp"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Audp"&gt;UDP “connection”&lt;sup
class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt;. Finally, you need some
STUN servers and maybe even TURN servers. There are plenty of free public
STUN servers (Google, Cloudflare, etc hosts a bunch of them). On the
other hand, free public TURN server is basically unheard of, since
they’re so easy to abuse.&lt;/p&gt;&lt;div id="footdef:udp"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Audp"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Most of the time people use UDP for NAT traversal,
it’s rare to see TCP connections: it’s more difficult to establish
through NAT, and only used when the firewall blocks
UDP.&lt;/div&gt;&lt;/div&gt;&lt;h2 id="WebRTC"
class="section"&gt;WebRTC&lt;/h2&gt;&lt;p&gt;The main purpose of WebRTC
is for video conferencing and VoIP on browsers; transfering arbitrary
data requires much less hassle. So we really don’t need most of the
WebRTC that deals with video codec and media channels. On top of that,
WebRTC isn’t really a single protocol, but rather a bunch of revived
protocols plus a spec defining how to use these protocols together. The
Rust crate, webrtc-rs, implements each underlining protocol (SCTP, DTLS,
STUN, ICE, ...) in separate crates, plus a webrtc glue layer. So it’s
possible to only use the underlining crates and ignore the WebRTC layer
altogether.&lt;/p&gt;&lt;p&gt;Technically, WebRTC already has what we
want—&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Using_data_channels"&gt;data
channel&lt;/a&gt;. It’s convenient if you’re using WebRTC in browsers
with the Javascript API. But for us, it’s simpler to use the underlying
protocol directly instead of going through WebRTC; it gives us more
control over the process too.&lt;/p&gt;&lt;p&gt;The stack of WebRTC looks
roughly like
this:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Protocol
&lt;/th&gt;&lt;th&gt;
Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;WebRTC
&lt;/td&gt;&lt;td&gt;
Application&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SCTP&lt;/td&gt;&lt;td&gt;
Congestion and flow
control&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DTLS&lt;/td&gt;&lt;td&gt;
Security&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ICE&lt;/td&gt;&lt;td&gt;NAT
traversal&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;UDP&lt;/td&gt;&lt;td&gt;
Transport&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Technically,
DTLS (think of TLS for UDP) should run on top of SCTP (think of TCP Pro
Max), right? But WebRTC uses them the other way around. Probably because
SCTP provides a much nicer abstraction than DTLS? Anyway, the designers
explained it in detail here: &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/www.rfc-editor.org/rfc/rfc8831.html"&gt;&lt;span
class="oldstyle-num"&gt;RFC
8831&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now, here’s how WebRTC
establish a connection between two peers A and
B:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;A creates a local &lt;a id="footref:sdp"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Asdp"&gt;SDP&lt;sup
class="inline-footref"&gt;3&lt;/sup&gt;&lt;/a&gt; (called offer), send it
to B through a &lt;a id="footref:third-party" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Athird-party"&gt;third-party channel&lt;sup
class="inline-footref"&gt;4&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;B
receives A’s SDP, sets it as the remote SDP, and sends B’s local SDP
(called answer) to A. Meanwhile, B starts gathering ICE candidate
according to the information in A’s SDP.&lt;/li&gt;&lt;li&gt;A receives
B’s SDP, sets it to its remote SDP, and start gathering ICE candidates
according to B’s SDP.&lt;/li&gt;&lt;li&gt;While A and B gather ICE
candidates, they’ll send the candidates they gathered to each other
through the signaling server, &lt;a id="footref:trickle"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Atrickle"&gt;and try to establish a (UDP)
connection.&lt;sup
class="inline-footref"&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Once
the connection is established, A and B setup a DTLS connection over it,
then a SCTP connection over the DTLS
connection.&lt;/li&gt;&lt;/ol&gt;&lt;div id="footdef:sdp"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Asdp"&gt;3&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;SDP (Session Description Protocol) is basically a
text packet with a bunch of metadata used for establishing the
connection, including media codec, ICE information, fingerprints, etc.
See &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/webrtchacks.com/sdp-anatomy"&gt;&lt;em&gt;SDP
Anatomy&lt;/em&gt;&lt;/a&gt; for more. There’s no need to know the
details, because we’re going to use our own kind of
SDP.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:third-party"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Athird-party"&gt;4&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;WebRTC doesn’t specify this third-party, it can be
copy-pasting in Message app between two users, email, pidegon, whatever.
A common setup is to use a public “signaling server”, that’s our server
S.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:trickle"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Atrickle"&gt;5&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;This is called “trickle ICE”. The alternative is
to first gather all the candidates, then try to establish ICE connection.
Trickle ICE is much faster and is pretty much the standard practice
now.&lt;/div&gt;&lt;/div&gt;&lt;h3 id="Authentication"
class="subsection"&gt;Authentication&lt;/h3&gt;&lt;p&gt;For
authentication, A and B each generates a self-signed key, and hash it to
get a fingerprint, then put the fingerprint in their SDP. Then they do
the ICE exchange, and gets each other’s fingerprint from the SDP. When
setting up the DTLS connection, they accpet any key that the other end
provides. But after the handshake completes, they verify that the other
end’s key matches the fingerprint&lt;/p&gt;&lt;p&gt;The implication here
is that A and B must trust the signaling server to deliver their SDP
securely.&lt;/p&gt;&lt;p&gt;The format of the fingerprint is specified in
&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/datatracker.ietf.org/doc/html/rfc8122"&gt;&lt;span
class="oldstyle-num"&gt;RFC 8122&lt;/span&gt; section &lt;span
class="oldstyle-num"&gt;5&lt;/span&gt;&lt;/a&gt;: “A certificate
fingerprint is a secure one-way hash of the Distinguished Encoding Rules
(DER) form of the certificate.”&lt;/p&gt;&lt;p&gt;Technically many hash
functions can be used, but webrtc-rs only supports &lt;span
class="oldstyle-num"&gt;sha-256&lt;/span&gt;; maybe all the browsers and
libraries decide to only use &lt;span
class="oldstyle-num"&gt;sha-256&lt;/span&gt;?&lt;/p&gt;&lt;p&gt;For
reference, here is how does webrtc-rs hash and validate the fingerprint:
&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/webrtc-rs/webrtc/blob/4bb9614c56131accc47e903eed086b46c9a2e57c/webrtc/src/dtls_transport/mod.rs#L548"&gt;&lt;code&gt;validate_fingerprint&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here’s
an example SDP that contains two fingerprints.
(&lt;code&gt;a&lt;/code&gt; means attribute. See &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/datatracker.ietf.org/doc/html/rfc8866#name-attributes-a"&gt;&lt;span
class="oldstyle-num"&gt;RFC 8866&lt;/span&gt;&lt;/a&gt;.) The fingerprint
is produced by first hasing the DER, then print out each byte in hex, and
join them together with colon.&lt;/p&gt;&lt;pre
class="code-block"&gt;m=image 54111 TCP/TLS t38 c=IN IP4 192.0.2.2
a=setup:passive a=connection:new a=fingerprint:SHA-256 \
12:DF:3E:5D:49:6B:19:E5:7C:AB:4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF: \
3E:5D:49:6B:19:E5:7C:AB:4A:AD a=fingerprint:SHA-1 \
4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB&lt;/pre&gt;&lt;h2
id="Code" class="section"&gt;Code&lt;/h2&gt;&lt;p&gt;Knowing how WebRTC
works is one thing, knowing how to conjure the right module and function
in the library is another thing. It doesn’t help that webrtc-rs is
relatively thin on documentation. So this section contains code snippets
taken directly from working code, plus reference to &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode"&gt;my
program&lt;/a&gt; and webrtc-rs.&lt;/p&gt;&lt;h3 id="Signaling%20server"
class="subsection"&gt;Signaling server&lt;/h3&gt;&lt;p&gt;This is not a
part of WebRTC, but for completeness I’ll brefly explain how I wrote my
signaling server. There are many articles online about signaling servers
too.&lt;/p&gt;&lt;p&gt;For my signaling server, I used websocket since it
allows the client to receive streams from the server, plus it provides a
nice text/binary message abstraction, making it nicer to use than TCP. I
used &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/crates.io/crates/tokio-tungstenite"&gt;tokio-tungstenite&lt;/a&gt;
for websocket.&lt;/p&gt;&lt;p&gt;When a client (say, A) wants to accept
connections from other peers, it sends a &lt;code&gt;Bind&lt;/code&gt;
message to the signaling server S, along with an id. Then, another client
(say, B) can send a &lt;code&gt;Connect&lt;/code&gt; message to S that
asks to connect to A by its id. B’s &lt;code&gt;Connect&lt;/code&gt;
message would contain its SDP. S relays B’s
&lt;code&gt;Connect&lt;/code&gt; message to A, then A sends its SDP via a
&lt;code&gt;Connect&lt;/code&gt; message to B (relayed by S). Then A and
B would start sending each other ICE candidates via
&lt;code&gt;Candidate&lt;/code&gt; message through S. Finally, A and B
establish e2e connection and don’t need S anymore.&lt;/p&gt;&lt;p&gt;My
signaling code is in &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/signaling.rs"&gt;&lt;code&gt;/src/signaling.rs&lt;/code&gt;&lt;/a&gt;
and &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/tree/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/signaling"&gt;&lt;code&gt;/src/signaling&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h3
id="Cargo.toml"
class="subsection"&gt;Cargo.toml&lt;/h3&gt;&lt;p&gt;Here’s the relevant
crates I used and their version:&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="n"&gt;sha2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"0.10.8"&lt;/span&gt; &lt;span
class="n"&gt;pem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="s2"&gt;"3.0.4"&lt;/span&gt; &lt;span class="c1"&gt;# Make sure the
version of webrtc-util matches the one that&amp;#39;s used
by&lt;/span&gt; &lt;span class="c1"&gt;# webrtc-ice, webrtc-sctp, and
webrtc-dtls.&lt;/span&gt; &lt;span
class="n"&gt;webrtc-ice&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"0.10.0"&lt;/span&gt; &lt;span
class="n"&gt;webrtc-util&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"0.8.0"&lt;/span&gt; &lt;span
class="n"&gt;webrtc-sctp&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"0.9.0"&lt;/span&gt; &lt;span
class="n"&gt;webrtc-dtls&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"0.8.0"&lt;/span&gt; &lt;span
class="c1"&gt;# Used by webrtc.&lt;/span&gt; &lt;span
class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"1.4.0"&lt;/span&gt; &lt;span
class="c1"&gt;# This is the version used by webrtc-dtls.&lt;/span&gt;
&lt;span class="n"&gt;rcgen&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="s2"&gt;"0.11.1"&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;features&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span
class="s2"&gt;"pem"&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="s2"&gt;"x509-parser"&lt;/span&gt;&lt;span
class="p"&gt;]}&lt;/span&gt; &lt;span class="c1"&gt;# This is the version
used by webrtc-dtls.&lt;/span&gt; &lt;span
class="n"&gt;rustls&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"0.21.10"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id="ICE"
class="subsection"&gt;ICE&lt;/h3&gt;&lt;p&gt;&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/docs.rs/webrtc-ice/latest/webrtc_ice/agent/index.html"&gt;webrtc_ice
documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Suppose we have two peer A and
B; A wants to accept connection from B. Then A is the server in this
situation, and B is the client. In the same time, both A and B are
clients of the signaling server S. To avoid confusion, let’s call A the
&lt;span class="oldstyle-num"&gt;p2p&lt;/span&gt; server, B the &lt;span
class="oldstyle-num"&gt;p2p&lt;/span&gt; client, and call A &amp;amp; B
the signaling client.&lt;/p&gt;&lt;p&gt;To start establishing an ICE
connection, we need to create an agent (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc/ice.rs#L146"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;std&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;sync&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;webrtc_ice&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;agent_config&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;AgentConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;webrtc_ice&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;webrtc_ice&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;network_type&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;NetworkType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;webrtc_ice&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;udp_network&lt;/span&gt;&lt;span
class="p"&gt;::{&lt;/span&gt;&lt;span
class="n"&gt;EphemeralUDP&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;UDPNetwork&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;webrtc_ice&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;url&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;AgentConfig&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// "Controlling" should be true for the initiator
(p2p client), false&lt;/span&gt; &lt;span class="c1"&gt;// for the
acceptor (p2p server).&lt;/span&gt; &lt;span
class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;is_controlling&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span
class="p"&gt;;&lt;/span&gt; &lt;span
class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;network_types&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="fm"&gt;vec!&lt;/span&gt;&lt;span
class="p"&gt;[&lt;/span&gt;&lt;span
class="n"&gt;NetworkType&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Udp4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;udp_network&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;UDPNetwork&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Ephemeral&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;EphemeralUDP&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// A list of public STUN servers.&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;urls&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="fm"&gt;vec!&lt;/span&gt;&lt;span
class="p"&gt;[&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Url&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;parse_url&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="s"&gt;"stun:stun1.l.google.com:19302"&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Url&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;parse_url&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="s"&gt;"stun:stun2.l.google.com:19302"&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Url&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;parse_url&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="s"&gt;"stun:stun3.l.google.com:19302"&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Url&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;parse_url&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="s"&gt;"stun:stun4.l.google.com:19302"&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Url&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;parse_url&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="s"&gt;"stun:stun.nextcloud.com:443"&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Url&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;parse_url&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="s"&gt;"stun:stun.relay.metered.ca:80"&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt; &lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Arc&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;Agent&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If we were to use WebRTC’s
glue layer, we would create a SDP and set two ICE attributes in it:
&lt;code&gt;ufrag&lt;/code&gt; and &lt;code&gt;pwd&lt;/code&gt;. But
since we aren’t using WebRTC’s glue layer, we just need to get
&lt;code&gt;ufrag&lt;/code&gt; and &lt;code&gt;pwd&lt;/code&gt; from the
ICE agent, serialize it, and send it through the signaling server. This
will be our version of the SDP.&lt;/p&gt;&lt;p&gt;Our “SDP-at-home” also
needs to include the fingerprint. Technically this fingerprint can be in
any format you wish, but I decided to just follow WebRTC’s spec—hash the
DER version of the public key. Here’s my hash function (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/config_man.rs#L47"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;sha2&lt;/span&gt;&lt;span
class="p"&gt;::{&lt;/span&gt;&lt;span
class="n"&gt;Digest&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Sha256&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="sd"&gt;/// Hash the binary DER file and return the hash
in fingerprint&lt;/span&gt; &lt;span class="sd"&gt;/// format: each byte
in uppercase hex, separated by colons.&lt;/span&gt; &lt;span
class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nf"&gt;hash_der&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;der&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span
class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span
class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="p"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Sha256&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;digest&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;der&lt;/span&gt;&lt;span
class="p"&gt;);&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="c1"&gt;// Separate each byte with colon like webrtc
does.&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nb"&gt;Vec&lt;/span&gt;&lt;span
class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span
class="nb"&gt;String&lt;/span&gt;&lt;span
class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;iter&lt;/span&gt;&lt;span
class="p"&gt;().&lt;/span&gt;&lt;span
class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span
class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="fm"&gt;format!&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="s"&gt;"{x:02x}"&lt;/span&gt;&lt;span
class="p"&gt;)).&lt;/span&gt;&lt;span
class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;bytes&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;join&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":"&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;to_uppercase&lt;/span&gt;&lt;span
class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;fingerprint&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;hash_der&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;key_der&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;ufrag&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;get_local_user_credentials&lt;/span&gt;&lt;span
class="p"&gt;().&lt;/span&gt;&lt;span
class="k"&gt;await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Then serialize them and send them over the
signaling server.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;My hash function is mostly
the same as &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/webrtc-rs/webrtc/blob/62f2550799efe2dd36cdc950ad3f334b120c75bb/webrtc/src/dtls_transport/mod.rs#L548"&gt;the
hash function in webrtc-rs&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now assume both A
and B have their own local SDP (&lt;code&gt;ufrag&lt;/code&gt;,
&lt;code&gt;pwd&lt;/code&gt;, and &lt;code&gt;fingerprint&lt;/code&gt;),
and received each other’s SDP. The next step is to exchange ICE
candidates.&lt;/p&gt;&lt;p&gt;To send out candidates, we register a
callback function on &lt;code&gt;agent&lt;/code&gt;, like so (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc/ice.rs#L202"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;on_candidate&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="nb"&gt;Box&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="k"&gt;move&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span
class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span
class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;marshal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;tokio&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;spawn&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Send out candidate
through the signaling server.&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; &lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="nb"&gt;Box&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="k"&gt;async&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span
class="p"&gt;}))&lt;/span&gt; &lt;span class="c1"&gt;// And start
gathering candidates, once the agent got a candidate,&lt;/span&gt;
&lt;span class="c1"&gt;// it’ll invoke the on_candidate callback and our
code will send&lt;/span&gt; &lt;span class="c1"&gt;// it
out.&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;gather_candidates&lt;/span&gt;&lt;span
class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span
class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;On the other side, we want
to receive ICE candidates from the signaling server and feed them into
&lt;code&gt;agent&lt;/code&gt; (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc/ice.rs#L230"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="nb"&gt;Some&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span
class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;receive&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;signaling&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;server&lt;/span&gt;&lt;span
class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;unmarshal_candidate&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span
class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span
class="p"&gt;;&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;Arc&lt;/span&gt;&lt;span
class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span
class="k"&gt;dyn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;Candidate&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="nb"&gt;Sync&lt;/span&gt;&lt;span
class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;Arc&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;add_remote_candidate&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span
class="n"&gt;candidate&lt;/span&gt;&lt;span
class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span
class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;While gathering and
exchanging candidate run in the background, we block on
&lt;code&gt;agent.accept()&lt;/code&gt; (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc/ice.rs#L67"&gt;source&lt;/a&gt;)
or &lt;code&gt;agent.dial()&lt;/code&gt; (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc/ice.rs#L110"&gt;source&lt;/a&gt;)
to get our connection:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="c1"&gt;// For p2p server A:&lt;/span&gt; &lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;ice_conn&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;accept&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;cancel_rx&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;ufrag&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// For p2p client B:&lt;/span&gt; &lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;ice_conn&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;agent&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;dial&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;cancel_rx&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;ufrag&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="DTLS"
class="section"&gt;DTLS&lt;/h2&gt;&lt;p&gt;&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/docs.rs/webrtc-dtls/latest/webrtc_dtls/index.html"&gt;webrtc_dtls
documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now we need to setup a DTLS
connection from the ICE connection, and verify the fingerprint.
&lt;br/&gt;To create a DTLS connection, we need to pass it the key we
used to generate the fingerprint earlier. Suppose variable
&lt;code&gt;key_der: u8[]&lt;/code&gt; contains the key in DER format, we
create the certificate that webrtc_dtls accepts (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/config_man.rs#L31"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;dtls_cert&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;webrtc_dtls&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;crypto&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Certificate&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;vec&lt;/span&gt;&lt;span
class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span
class="n"&gt;rustls&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Certificate&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;key_der&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;private_key&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;webrtc_dtls&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;crypto&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;CryptoPrivateKey&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;from_key_pair&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span
class="n"&gt;rcgen&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;KeyPair&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;from_der&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;key_der&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Then create the DTLS
connection. For &lt;span class="oldstyle-num"&gt;p2p&lt;/span&gt; server,
do this (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc.rs#L98"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;webrtc_dtls&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Config&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;vec&lt;/span&gt;&lt;span
class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span
class="n"&gt;dtls_cert&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;client_auth&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;webrtc_dtls&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;ClientAuthType&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;RequireAnyClientCert&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="c1"&gt;// We accept any certificate, and then verifies the
provided&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="c1"&gt;// certificate with the cert we got from signaling
server.&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;insecure_skip_verify&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="o"&gt;..&lt;/span&gt;&lt;span
class="nb"&gt;Default&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Pass
false for p2p server.&lt;/span&gt; &lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;dtls_conn&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;DTLSConn&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;ice_conn&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="kc"&gt;false&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nb"&gt;None&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="k"&gt;await&lt;/span&gt;&lt;span
class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;For &lt;span
class="oldstyle-num"&gt;p2p&lt;/span&gt; client, do this (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc.rs#L117"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;webrtc_dtls&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Config&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;certificates&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;vec&lt;/span&gt;&lt;span
class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span
class="n"&gt;dtls_cert&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// We accept
any certificate, and then verifies the provided&lt;/span&gt; &lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// certificate with the
cert we got from signaling server.&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;&lt;span
class="n"&gt;insecure_skip_verify&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="o"&gt;..&lt;/span&gt;&lt;span
class="nb"&gt;Default&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Pass true
for p2p client.&lt;/span&gt; &lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;dtls_conn&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;DTLSConn&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;ice_conn&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;config&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="kc"&gt;true&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nb"&gt;None&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="k"&gt;await&lt;/span&gt;&lt;span
class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Next, on both &lt;span
class="oldstyle-num"&gt;p2p&lt;/span&gt; server and &lt;span
class="oldstyle-num"&gt;p2p&lt;/span&gt; client, verify the peer
certificate of the DTLS connection matches the fingerprint we received
from the signaling server (we got it along with
&lt;code&gt;ufrag&lt;/code&gt; and &lt;code&gt;pwd&lt;/code&gt; in the
SDP) (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc.rs#L84"&gt;source&lt;/a&gt;).&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;certs&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;dtls_conn&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;connection_state&lt;/span&gt;&lt;span
class="p"&gt;().&lt;/span&gt;&lt;span
class="k"&gt;await&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;peer_certificates&lt;/span&gt;&lt;span
class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;certs&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;is_empty&lt;/span&gt;&lt;span
class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="c1"&gt;// Throw error.&lt;/span&gt; &lt;span
class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// hash_der is shown
in the previous section.&lt;/span&gt; &lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span
class="n"&gt;peer_cert_hash_from_dtls&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;hash_der&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span
class="n"&gt;certs&lt;/span&gt;&lt;span
class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span
class="p"&gt;]);;&lt;/span&gt; &lt;span
class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;peer_cert_hash_from_dtls&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span
class="n"&gt;cert_hash_from_signaling_server&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Throw
error.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="SCTP"
class="section"&gt;SCTP&lt;/h2&gt;&lt;p&gt;&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/docs.rs/webrtc-sctp/0.10.0/webrtc_sctp/association/index.html"&gt;webrtc_sctp
documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We’re getting there! The final
step is to setup SCTP connection (&lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/casouri/collab-mode/blob/e06588294bec25b0b1a6d22ee33cdf4c8c8fd252/src/webrpc.rs#L135"&gt;source&lt;/a&gt;):&lt;/p&gt;&lt;div
class="highlight"&gt;&lt;div
class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span
class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;webrtc_sctp&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;association&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;assoc_config&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;association&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Config&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;net_conn&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="nc"&gt;dtls_conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;name&lt;/span&gt;&lt;span
class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="s"&gt;"whatever"&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// For p2p
server:&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;assoc_server&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;association&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Association&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;server&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;assoc_config&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="k"&gt;await&lt;/span&gt;&lt;span
class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span
class="n"&gt;sctp_connection&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;accept_stream&lt;/span&gt;&lt;span
class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;
&lt;span class="c1"&gt;// For p2p client:&lt;/span&gt; &lt;span
class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;assoc_client&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span
class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;association&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Association&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;client&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span
class="n"&gt;assoc_config&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="k"&gt;await&lt;/span&gt;&lt;span
class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span
class="c1"&gt;// The stream identifier can be anything (here I used
1).&lt;/span&gt; &lt;span class="n"&gt;sctp_conn&lt;/span&gt;&lt;span
class="p"&gt;.&lt;/span&gt;&lt;span
class="n"&gt;open_stream&lt;/span&gt;&lt;span
class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span
class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span
class="n"&gt;PayloadProtocolIdentifier&lt;/span&gt;&lt;span
class="p"&gt;::&lt;/span&gt;&lt;span
class="n"&gt;Binary&lt;/span&gt;&lt;span
class="p"&gt;).&lt;/span&gt;&lt;span
class="k"&gt;await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id="Conclusion"
class="section"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;That’s it! Now we have a
binary stream between two peers. While setting everything up, it helps to
go one layer at a time, verify it works, and add the next layer. It also
helps to first set it up without authentication, then add the key
verification step.&lt;/p&gt;&lt;h2
id="Appendix%20A,%20a%20rcgen%20pitfall" class="section"&gt;Appendix A, a
rcgen pitfall&lt;/h2&gt;&lt;p&gt;Because I fell into this trap using
rcgen and spent two whole nights scratching my head, I want to call it
out so readers can avoid it.&lt;/p&gt;&lt;p&gt;Say that you want to
generate a certificate and pass it around your program. The intuitive way
is to create a &lt;code&gt;rcgen::Certificate&lt;/code&gt;, pass it
around, and call
&lt;code&gt;rcgen::Certificate::serialize_der&lt;/code&gt; every time you
need a DER, right? But actually, every time you call
&lt;code&gt;serialize_der&lt;/code&gt;, rather than just serializing the
certificate, it &lt;em&gt;generates&lt;/em&gt; a new certificate. Put it
another way, every time you call &lt;code&gt;serialize_der&lt;/code&gt;,
it returns a different value.&lt;/p&gt;&lt;p&gt;So the correct way to
generate a certificate and pass it around is to create a
&lt;code&gt;rcgen::Certificate&lt;/code&gt;, call
&lt;code&gt;serialize_der&lt;/code&gt; to get the DER, and pass the DER
around. If you need to use the certificate in another format, just parse
the DER.&lt;/p&gt;&lt;p&gt;Here’s an GitHub issue discussing it: &lt;a
href="https://archive.casouri.cc/note/2024/rust-webrtc/https:/github.com/rustls/rcgen/issues/62"&gt;Issue#62&lt;/a&gt;.&lt;/p&gt;</content>
</entry>
<entry>
<title>Classic Systems Papers: Notes for CSE 221</title>
<link href="https://archive.casouri.cc/note/2024/cse221" />
<id>urn:uuid:43cbedf8-ac05-11ed-b63d-1f5ec28d824a</id>
<updated>2024-01-05T19:45:00.00-05:00</updated>
<content type="html">&lt;p&gt;During my time at UCSD, I enjoyed their
systems courses greatly. It’d be a shame to let those wonderful things I
learnt fade away from my memory. So I compiled my notes into this
article. I hope this can be helpful to future me and entertaining for
others.&lt;/p&gt;&lt;p&gt;&lt;span class="oldstyle-num"&gt;CSE
221&lt;/span&gt; is the entry course, introducing students to reading
papers and the essential systems papers. The cast of papers is pretty
stable over the years. Here is a syllabus of a &lt;span
class="oldstyle-num"&gt;CSE 221&lt;/span&gt; similar to the one I took,
you can find links to the papers and extension reading there: &lt;a
href="https://archive.casouri.cc/note/2024/cse221/https:/cseweb.ucsd.edu/classes/wi21/cse221-a/readings.html"&gt;&lt;em&gt;CSE
221: Reading List and Schedule, Winter
2021&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="THE%20System"
class="section"&gt;THE System&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The Structure
of the “THE”-Multiprogramming System&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1968&lt;/span&gt;, by none other than Edsger W.
Dijkstra.&lt;/p&gt;&lt;p&gt;The main take away is “central abstraction in
a hierarchy”. The central abstraction is sequential process, and
hierarchy is basically “layers”. The benefit of layers is that it’s easy
to verify soundness and prove correctness for each individual layer,
which is essential to handle complexity.&lt;/p&gt;&lt;p&gt;To Dijkstra,
if a designer structures their system well, the possible test cases for
the system at each level would be so few such that it’s easy to cover
every possible case.&lt;/p&gt;&lt;p&gt;He then mentioned that “industrial
software makers” has mixed feelings of this methodology: they agree that
it’s the right thing to do, but doubt whether it’s applicable in the real
world, away from the shelter of academia. Dijkstra’s stance is that the
larger the project, the more essential the structuring. This stance is
apparent in &lt;a id="footref:ewd1041" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Aewd1041"&gt;his other writings&lt;sup
class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;&lt;div
id="footdef:ewd1041" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Aewd1041"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;&lt;a
href="https://archive.casouri.cc/note/2024/cse221/https:/www.cs.utexas.edu/users/EWD/transcriptions/EWD10xx/EWD1041.html"&gt;&lt;em&gt;EWD
1041&lt;/em&gt;&lt;/a&gt;. Now, I don’t think it is realistic to write
proofs for every system you design (and how do you ensure the proof is
correct?), but good structuring, and designing with testing in mind are
certainly essential.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The downside of
layering is, of course, the potential loss of efficiently, due to either
the overhead added by layering, or the lack of details hidden by lower
layers. For example, the graphic subsystem in win&lt;span
class="oldstyle-num"&gt;32&lt;/span&gt; was moved into the kernel in
&lt;span class="oldstyle-num"&gt;NT4&lt;/span&gt;, because there were too
many boundary crossing.&lt;/p&gt;&lt;p&gt;And sometimes it’s hard to
separate the system into layers at all, eg, due to circular dependency,
etc. For example, in Linux, memory used by the scheduler is pinned and
never page.&lt;/p&gt;&lt;p&gt;We also learned some interesting
terminology used at the time; “harmonious cooperation” means no deadlock,
and “deadly embrace” means deadlock.&lt;/p&gt;&lt;h2 id="Nucleus"
class="section"&gt;Nucleus&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The Nucleus of a
Multiprogramming System&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1970&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Basically
they want a “nucleus” (small kernal) that supports multiple simultaneous
operating system implementations. So the user can have their OS however
they want. (Another example of “mechanism instead of policy”, sort of.)
This school of thought would later reappear on exokernel and micro
kernel.&lt;/p&gt;&lt;p&gt;The nucleus provides a scheduler (for process
and I/O), communication (messages passing), and primitive for controlling
processes (create, start, stop, remove).&lt;/p&gt;&lt;p&gt;In their
design, the parent process is basically the OS of their child processes,
controlling allocation of resources for them: starting/stoping them,
allocating memory and storage to them, etc.&lt;/p&gt;&lt;p&gt;However,
the parent process doesn’t have full control over their children: it
doesn’t control scheduling for it’s children. Nucleus handles scheduling;
it divides computing time by round-robin scheduling among all active
processes.&lt;/p&gt;&lt;p&gt;A more “complete” abstraction would be
having nucleus schedule the top-level processes and let those processes
schedule their children themselves. Perhaps it would be too inconvenient
if you need to implement scheduler for every “OS” you want to
run.&lt;/p&gt;&lt;h2 id="HYDRA"
class="section"&gt;HYDRA&lt;/h2&gt;&lt;p&gt;&lt;em&gt;HYDRA: The Kernel
of a Multiprocessor Operating System&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1974&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;The authros
have several design goals for HYDRA: a) separation of mechanism and
policy; b) reject strict hierarchy layering for access control, because
they consider access control more of a mesh than layers; c) an emphasize
on protection—not only comprehensive protection, but also flexible
protection. They provide protection mechanism that can be used for not
only for regular things like I/O, etc, but also arbitrary things that a
higher-level program want to protect/control. It surely would be nice if
UNIX has something similar to offer.&lt;/p&gt;&lt;p&gt;HYDRA structures
protection around &lt;em&gt;capabilities&lt;/em&gt;. Capability is
basically the right to use some resource—a key to a door. Possessing the
capability means you have the right of using whatever resource it
references. For example, file descriptors in UNIX are capabilities: when
you open a file, the kernel checks if you are allowed to read/write that
file, and if the check passes, you get a file descriptor. Then you are
free to read/write to that file as long as you hold the file descriptor;
no need to go through access checks every time.&lt;/p&gt;&lt;p&gt;In
genreal, in an access-controlled OS, there are resources, like data or a
device; execution domains, like “execute as this user” or “execute as
this group”; and access control, controlling which domain can access
which resource.&lt;/p&gt;&lt;p&gt;In HYDRA, there is
&lt;em&gt;procedure&lt;/em&gt;, LNS, and &lt;em&gt;process&lt;/em&gt;.
Procedure is a executable program or a subroutine. LNS (local name space)
is the execution domain. Conceptually it is a collection of capabilities,
it determines what you can and cannot do. Each invocation of a procedure
has a LNS attached to it. To explain it in UNIX terms, when a user Alice
runs a program &lt;code&gt;ls&lt;/code&gt;, the capabilities Alice has is
the LNS, and &lt;code&gt;ls&lt;/code&gt; is the procedure. Finally, a
process is conceptually a (call) stack of procedures with their
accompanying LNS.&lt;/p&gt;&lt;p&gt;Since each invocation of procedures
have an accompanying LNS, the callee’s LNS could have more or different
capabilities from its caller, so HYDRA can support &lt;em&gt;right
amplification&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Right amplification is when
caller has more privilege/capabilities than the caller. For example, in
UNIX, when a program uses a syscall, that syscall executed by the kernel
has far more privilege than the caller. For another example, when Alice
runs &lt;code&gt;passwd&lt;/code&gt; to change her password, that program
can modify the password file which Alice has no access to, because
&lt;code&gt;passwd&lt;/code&gt; has a euid (effective user id) with
higher privilege.&lt;/p&gt;&lt;p&gt;Another concept often used in
security is ACL (access control list). It’s basically a table recording
who has access to what. ACL and capabilities each have their pros and
cons. To use an ACL, you need to know the user; with capabilities, anyone
with the capability can have access, you don’t need to know the
particular user. Capabilities is easier to check, and useful for
distributed systems or very large systems, where storing information of
all users/entities is not possible.&lt;/p&gt;&lt;p&gt;However,
capabilities are unforgettable, ie, you can’t take it back. Maybe you can
make them expire, but that’s more complexity. Capabilities can also be
duplicated and given away, which has it’s own virtues and
vices.&lt;/p&gt;&lt;p&gt;Since ACL is easy to store and manage, and
capability is easy to check, they are often used together. In UNIX,
opening a file warrens a check in the ACL, and the file descriptor
returned to you is a capability.&lt;/p&gt;&lt;p&gt;It’s interesting to
think of the access control systems used around us. Windows certainly has
a more sophisticated ACL than UNIX. What about Google Docs, eh? On top of
the regular features, they also support “accessible through links”, “can
comment but not edit”, etc.&lt;/p&gt;&lt;h2 id="TENEX"
class="section"&gt;TENEX&lt;/h2&gt;&lt;p&gt;&lt;em&gt;TENEX, a Paged Time
Sharing System for the PDP-10&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1972&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;TENEX is the
predecessor of MULTICS, which in turn is the predecessor of UNIX. It runs
on &lt;span class="oldstyle-num"&gt;PDP-10&lt;/span&gt;, a machine very
popular at the time: used by Harvard, MIT, CMU, to name a few. &lt;span
class="oldstyle-num"&gt;PDP-10&lt;/span&gt; was manufactured by BBN, a
military contractor at the time. It’s micro-coded, meaning its
instructions are programmable.&lt;/p&gt;&lt;p&gt;In BBN’s pager, each
page is &lt;span class="oldstyle-num"&gt;512&lt;/span&gt; words, the TLB
is called “associative register”. Their virtual memory supports &lt;span
class="oldstyle-num"&gt;256&lt;/span&gt;K words and copy-on-write. A
process in TENEX always have exactly one superior (parent) process and
any number of inferior (child) processes. Processes communicate through
a) sharing memory, b) direct control (parent to child only), and c)
pseudo (software simulated) interrupts. Theses are also the only ways of
IPC we have today in UNIX. Would be nice if we had message-passing
built-in to the OS. But maybe D-Bus is even better, since it can be
portable.&lt;/p&gt;&lt;p&gt;TENEX can run binary programs compiled for
&lt;span class="oldstyle-num"&gt;DEC 10/50&lt;/span&gt;, the vendor OS
for the &lt;span class="oldstyle-num"&gt;PDP-10&lt;/span&gt;. All the
TENEX syscalls “were implemented with the JSYS instruction, reserving all
old monitor [OS/kernel] calls for their previous use”. They also
implemented all of the &lt;span class="oldstyle-num"&gt;DEC
10/50&lt;/span&gt; syscalls as a compatibility package. The first time a
program calls a &lt;span class="oldstyle-num"&gt;DEC 10/50&lt;/span&gt;
syscall, that package is mapped “to a remote portion of the process
address space, an area not usually available on a &lt;span
class="oldstyle-num"&gt;10/50&lt;/span&gt;
system”.&lt;/p&gt;&lt;p&gt;TENEX uses balanced set scheduling to reduce
pagefaults. A balanced set is a set of highest priority processes whose
total working set fits in memory. And the working set of a process is the
set of pages this process reference.&lt;br/&gt;Guess what is an
“executive command language interpreter”? They descried it as “...which
provides direct access to a large variety of small, commonly used system
functions, and access to and control over all other subsystems and user
programs”. It’s a shell!&lt;/p&gt;&lt;p&gt;Some other interesting facts:
TENEX supports at most 5 levels in file paths; the paper mentions file
extensions; files in TENEX are versioned, a new version is created every
time you write to a file, old versions are automatically garbage
collected by the system over time; TENEX has five access rights:
directory listing, read, write, execute, and append; TENEX also has a
debugger residing in the core memory alongside the
kernel.&lt;/p&gt;&lt;p&gt;The file operations is the same as in UNIX,
opening a file gives you a file descriptor, called JFN (job file number),
and you can read or write the file. The effect of the write is seen
immediately by readers (so I guess no caching or buffering). They even
have “unthawed access”, meaning only one writer is allowed while multiple
reader can read from the file at the same time. UNIX really cut a lot of
corners, didn’t
it?&lt;/p&gt;&lt;p&gt;&lt;details&gt;&lt;p&gt;&lt;summary&gt;Their
conclusion section is also
interesting…&lt;/summary&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;One of
the most valuable results of our work was the knowledge we gained of how
to organize a hardware/software project of this size. Virtually all of
the work on TENEX from initial inception to a usable system was done over
a two year period. There were a total of six people principally involved
in the design and implementation. An &lt;span
class="oldstyle-num"&gt;18&lt;/span&gt; month part-time study, hardware
design and implementation culminated in a series of documents which
describe in considerable detail each of the important modules of the
system. These documents were carefully and closely followed during the
actual coding of the system. The first state of coding was completed in
&lt;span class="oldstyle-num"&gt;6&lt;/span&gt; months; at this point the
system was operating and capable of sustaining use by nonsystem users for
work on their individual projects. The key design document, the JSYS
Manual (extended machine code), was kept updated by a person who devoted
full time to insuring its consistency and coherence; and in retrospect,
it is out judgment that this contributed significantly to the overall
integrity of the system.&lt;/p&gt;&lt;p&gt;We felt it was extremely
important to optimize the size of the tasks and the number of people
working on the project. We felt that too many people working on a
particular task or too great an overlap of people on separate tasks would
result in serious inefficiency. Therefore, tasks given to each person
were as large as could reasonably be handled by that person, and insofar
as possible, tasks were independent or related in ways that were well
defined and documented. We believe that this procedure was a major factor
in the demonstrated integrity of the system as well as in the speed with
which it was
implemented.&lt;/p&gt;&lt;/blockquote&gt;&lt;/details&gt;&lt;/p&gt;&lt;h2
id="MULTICS"
class="section"&gt;MULTICS&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Protection and
the Control of Information Sharing in Multics&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1974&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;The almighty
MULTICS, running on the equally powerful Honeywell &lt;span
class="oldstyle-num"&gt;6180&lt;/span&gt;. There are multiple papers on
MULTIC, and this one is about its protection
system.&lt;/p&gt;&lt;p&gt;Their design principles
are&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Permission rather than exclusion (ie,
default is no permission)&lt;/li&gt;&lt;li&gt;&lt;a id="footref:selinux"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Aselinux"&gt;Check every access to every object&lt;sup
class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The
design is not secret (ie, security not by
obscurity)&lt;/li&gt;&lt;li&gt;Principle of least
privilege&lt;/li&gt;&lt;li&gt;Easy to use and understand (human
interface) is important to reduce human
mistakes&lt;/li&gt;&lt;/ol&gt;&lt;div id="footdef:selinux"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Aselinux"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Early-day Linux doesn’t do this, which led to
SELinux. It has merged into main Linux long
ago.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;MULTICS has a concept of
&lt;em&gt;descriptor segments&lt;/em&gt;. The virtual memory is made of
segments, and each segment has a descriptor, which contains
access-control information: access right, protection domain, etc. This
way, MULTICS can access-control memory. The access check are done by
hardware for performance. (Which means MULTICS depends on the hardware
and isn’t portable like UNIX).&lt;/p&gt;&lt;p&gt;MULTIC uses an regular
ACL for file-access-control. When opening a file, the kernel checks for
access rights, creates a segment descriptor, and maps the whole file into
virtual memory as a segment. In the paper, the ACL is described as the
first level access-control, and the hardware-based access-control the
second. Note that in MULTICS, you can’t read a file as a stream: the
whole file is mmaped into memory, essentially.&lt;/p&gt;&lt;p&gt;MULTICS
also has &lt;em&gt;protected subsystems&lt;/em&gt;. It’s a collection of
procedure and data that can only be used through designated entry points
called “gates” (think of an API). To me, it’s like modules
(public/private functions and variables) in programming languages, but in
an OS. All subsystems are put in a hierarchy: Every subsystem within a
process gets a number, lower-numbered subsystems can use descriptors
containing higher-numbered subsystems. And the protection is guaranteed
by the hardware. They call it “rings of
protection”.&lt;/p&gt;&lt;p&gt;Speaking of rings, &lt;span
class="oldstyle-num"&gt;x86&lt;/span&gt; supports four ring levels, this
is how kernel protects itself from userspace programs. Traditionally
userspace is on ring &lt;span class="oldstyle-num"&gt;3&lt;/span&gt; and
kernel is on ring &lt;span class="oldstyle-num"&gt;0&lt;/span&gt;.
Nowadays with virtual machines, the guest OS is put on ring
1.&lt;/p&gt;&lt;h2 id="Protection"
class="section"&gt;Protection&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Protection&lt;/em&gt;,
&lt;span
class="oldstyle-num"&gt;1974&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;This paper
by Butler Lampson gave an overview of protection in systems, and
introduces a couple useful concepts.&lt;/p&gt;&lt;p&gt;A
&lt;em&gt;protection domain&lt;/em&gt; is anything that has certain
rights to do something and has some protection from other things, eg,
kernel or userspace, a process, a user. A lot of words are used to
describe it: protection context, environment, state, sphere, capability
list, ring, domain. Then there are &lt;em&gt;objects&lt;/em&gt;, things
needs to be protected. Domains themselves can be
objects.&lt;/p&gt;&lt;p&gt;The relationship between domains and objects
form a matrix, the &lt;em&gt;access matrix&lt;/em&gt;. Each relationship
between a domain and an object can be a list of &lt;em&gt;access
attributes&lt;/em&gt;, like owner, control, call, read, write,
etc.&lt;/p&gt;&lt;p&gt;When implementing the access matrix, the system
might want to attach the list of accessible object of a domain to that
domain. Each element of this list is essentially a
capability.&lt;/p&gt;&lt;p&gt;Alternatively, the system can attach a list
of domains that can access an object to that object. An object would have
a procedure that takes a domain’s name as input and returns its access
rights to this object. The domain’s name shouldn’t be forge-able. One
idea is to use capability as the domain identifier: a domain would ask
the supervisor (kernel) for an identifier (so it can’t be forged), and
pass it to objects’ access-control procedure. An arbitrary procedure is
often an overkill, and an &lt;em&gt;access lock list&lt;/em&gt; is used
instead.&lt;/p&gt;&lt;p&gt;Many system use a hybrid implementation in
which a domain first access an object by access-key to obtain a
capability, which is used for subsequent access. (Eg, opening a file and
geting a file descriptor.)&lt;/p&gt;&lt;h2 id="UNIX"
class="section"&gt;UNIX&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The UNIX
Time-Sharing System&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1974&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;The good ol’
UNIX! This paper describe the “modern” UNIX written in C, running on
&lt;span
class="oldstyle-num"&gt;PDP-11&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Comparing
to systems like TENEX and MULTICS, UNIX has a simpler design and does not
require special hardware supports, since it has always been designed for
rather limited machines, and for its creators’ own use
only.&lt;/p&gt;&lt;p&gt;The paper spends major portions describing the
file system, something we tend to take for granted from an operating
system and &lt;a id="footref:filesystem" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Afilesystem"&gt;view as swappable nowadays&lt;sup
class="inline-footref"&gt;3&lt;/sup&gt;&lt;/a&gt;. We are all too
familiar with “everything as a file”. UNIX treats files as a linear
sequence of bytes, but that’s not the only possible way. IBM filesystems
has the notion of “records” &lt;a id="footref:fs-database"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Afs-database"&gt;like in a database&lt;sup
class="inline-footref"&gt;4&lt;/sup&gt;&lt;/a&gt;. And on MULTICS, as
we’ve seen, the whole file is &lt;a id="footref:fs-mmap"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Afs-mmap"&gt;mmaped to the memory&lt;sup
class="inline-footref"&gt;5&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;&lt;div
id="footdef:filesystem" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Afilesystem"&gt;3&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Because most filesystems we use expose the same
interface, namely the POSIX standard. They all have read, write, open,
close, seek, makedir, etc. I wish in the future we can plug in custom
filesystems to the OS and expose new interfaces for programs to use. For
example, a network filesystem that can tell the program “I’m downloading
this file from remote, the progress is xx%”. Right now network
filesystems can only choose between blocking and immediately error
out.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:fs-database"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Afs-database"&gt;4&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;As every idea in CS, this might be coming back in
another form. For example, Android uses (modified) SQLite for its
filesystem.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:fs-mmap"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Afs-mmap"&gt;5&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Again, this might be coming back, in the form of
persistent memory.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;UNIX uses mounting to
integrate multiple devices into a single namespace. On the other hand, MS
DOS uses filenames to represent devices.&lt;/p&gt;&lt;p&gt;This version
of UNIX only has seven protections bits, one of which switches
set-user-id, so there is no permission for “group”. set-user-id is
essentially effective user id (euid).&lt;/p&gt;&lt;p&gt;The paper talked
about the shell in detail, for example the &lt;code&gt;| &amp;lt;
&amp;gt; ; &amp;amp;&lt;/code&gt; operators. Judging from the example,
the &lt;code&gt;&amp;lt;&lt;/code&gt; and
&lt;code&gt;&amp;gt;&lt;/code&gt; are clearly intended to be prefixes
rather than operators (that was one of the mysteries for me before
reading this paper):&lt;/p&gt;&lt;pre class="code-block"&gt;ls
&amp;gt;temp1 pr -2 &amp;lt;temp1 &amp;gt;temp2 opr
&amp;lt;temp2&lt;/pre&gt;&lt;h2 id="Plan%209" class="section"&gt;Plan
9&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Plan 9 From Bell Labs&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1995&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;According to
the paper, by the mid &lt;span
class="oldstyle-num"&gt;1980&lt;/span&gt;’s, people have moved away from
centralized, powerful timesharing systems (on mainframes and
mini-computers) to small personal micro-computers. But a network of
machines have difficulty serving as seamlessly as the old timesharing
system. They want to build a system that feels like the old timesharing
system, but is made of a bunch of micro-computers. Instead of having a
single powerful computer that does everything, they will have individual
micro-computers for each task: a computing (CPU) server, a file server,
routers, terminals, etc.&lt;/p&gt;&lt;p&gt;The central idea is to expose
every service as files. Each user can compose their own private
namespace, mapping files, devices, and services (as files) into a single
hierarchy. Finally, all communication are made through a single protocol,
&lt;span class="oldstyle-num"&gt;9P&lt;/span&gt;. Compare that to what we
have now, where the interface is essentially C ABI plus web API, it
certainly sounds nice. But on the other hand, using text stream as the
sole interface for everything feels a bit shaky.&lt;/p&gt;&lt;p&gt;Their
file server has an interesting storage called WORM (write-once, read
many), it’s basically a time machine. Everyday at &lt;span
class="oldstyle-num"&gt;5&lt;/span&gt; AM, a snapshot of all the disks is
taken and put into the WORM storage. People can get back old versions of
their files by simply reading the WORM storage. Nowadays WORM snapshot is
often used to defend against ransom attacks. &lt;/p&gt;&lt;h2 id="Medusa"
class="section"&gt;Medusa&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Medusa: An
Experiment in Distributed Operating Systems Structure&lt;/em&gt;,
&lt;span class="oldstyle-num"&gt;1980&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;A
distributed system made at CMU, to closely match and maximally exploit
its hardware: the distributed-processor Cm* system (Computer
Modules).&lt;/p&gt;&lt;p&gt;On a distributed processor hardware, they can
place the kernel code in memory in three
ways:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Replicate the kernel on every
node&lt;/li&gt;&lt;li&gt;Kernel code on one node, other nodes’ processors
execute code remotely&lt;/li&gt;&lt;li&gt;Split the kernel onto multiple
nodes&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;They chose the third approach: divide
the kernel into &lt;em&gt;utilities&lt;/em&gt; (kernel module) and
distribute them among all the processors. When a running program needs to
invoke a certain utility (basically some syscall provided by some kernel
module), it migrates to the processor that has that utility. Different
processors can have the same utility, so programs don’t have to fight for
a single popular utility.&lt;/p&gt;&lt;p&gt;The design is primarily
influenced by efficiency given their particular hardware, not structural
purity, but some nice structure properties nonetheless arised. Boundaries
between utilities are rigidly enforced, since each utility can only send
messages to each other and can’t modify other’s memory. This improves
security and robustness. For example, error in one utility won’t affect
other utilities.&lt;/p&gt;&lt;p&gt;One problem that might occur when you
split the kernel into modules is circular dependency and deadlocks. If
the filesystem utility calls into the memory manager utility (eg, get a
buffer), and the memory manager utility calls into the filesystem utility
(eg, swap pages), you have a circular dependency. Mix in locks and you
might get a deadlock.&lt;/p&gt;&lt;p&gt;To be deadlock-free, Medusa
further divides each utility into &lt;em&gt;service classes&lt;/em&gt;
such that service classes don’t have circular dependencies between each
other. It also makes sure each utility use separate and statistically
allocated resources.&lt;/p&gt;&lt;p&gt;Programs written to run on Medusa
are mostly concurrent in nature. Instead of conventional processes,
program execution are carried out by &lt;em&gt;task forces&lt;/em&gt;,
which is a collection of &lt;em&gt;activities&lt;/em&gt;. Each activity
is like a thread but runs on different
processors.&lt;/p&gt;&lt;p&gt;Activities access kernel objects (resources
like memory page, pipe, file, etc) through descriptors. Each activity has
a &lt;em&gt;private descriptor list&lt;/em&gt; (PDL), and all activities
in a task force share a &lt;em&gt;shared descriptor list&lt;/em&gt;
(SDL). There are also &lt;em&gt;utility descriptor list&lt;/em&gt; (UDL)
for utility entry points (syscalls), and &lt;em&gt;external descriptor
list&lt;/em&gt; (XDL) referencing remote UDL and PDL. Both UDL and XDL
are processor-specific.&lt;/p&gt;&lt;p&gt;The task force notion is useful
for scheduling: Medusa schedules activities that are in the same task
force to run in the same time. It’s often referred to as &lt;em&gt;gang
scheduling&lt;/em&gt; or &lt;em&gt;coscheduling&lt;/em&gt;, where you
schedule inter-communicating processes to run together, just like working
sets in paging. In addition, Medusa does not schedule out an activity
immediately when it starts waiting, and instead spin-waits for a short
while (&lt;em&gt;pause time&lt;/em&gt;), in the hope that the wait is
short (shorter than context switch).&lt;/p&gt;&lt;p&gt;Utilities store
information for an activity alongside the activity, instead of storing it
on the utility’s processor. This way if an utilities fails, another
utility can come in, read the information, and carry on the work. The
utility &lt;em&gt;seals&lt;/em&gt; the information stored with the
activity, so user programs can’t muddle with it. Only other utilities can
unseal and use that information. Implementation wise, unsealing means
mapping the kernel object into the XDL of the processor running the
utility; sealing it means removing it from the
XDL.&lt;/p&gt;&lt;p&gt;Medusa’s kernel also provide some handy utilities
like the exception reporter and a debugger/tracer. When an exception
occurs, the kernel on the processor sends exception data to the reporter,
which sends that information to other activities (&lt;em&gt;buddy
activity&lt;/em&gt;) to handle. And you can use the debugger/tracer to
online-debug programs. &lt;a id="footref:common-lisp"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Acommon-lisp"&gt;Must be nice if the kernel drops you
into a debugger when your program segfaults, no?&lt;sup
class="inline-footref"&gt;6&lt;/sup&gt;&lt;/a&gt; I feel that Ken
Thompson being too good a programmer negatively impacted the capability
of computing devices we have today. If he wasn’t that good, perhaps they
would add a kernel debugger in UNIX ;-)&lt;/p&gt;&lt;div
id="footdef:common-lisp" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Acommon-lisp"&gt;6&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Common Lisp can do that, just
sayin.&lt;/div&gt;&lt;/div&gt;&lt;h2 id="Pilot"
class="section"&gt;Pilot&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Pilot: An Operating
System for a Personal Computer&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1980&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;A system
developed by Xerox PARC on their personal work stations. Since it is
intended for personal computing, they made some interesting design
choices. The kernel doesn’t worry about fairness in allocating resources,
and can take advices from userspace. For example, userspace programs can
mark some process as high priority for &lt;a
id="footref:pilot-scheduling" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote"
href="#footdef%3Apilot-scheduling"&gt;scheduling&lt;sup
class="inline-footref"&gt;7&lt;/sup&gt;&lt;/a&gt;, or pin some pages in
the memory so it’s never swapped out. (These are just examples, I don’t
know for sure if you can do these things in Pilot.)&lt;/p&gt;&lt;div
id="footdef:pilot-scheduling" class="footdef"&gt;&lt;div
class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to
main text"
href="#footref%3Apilot-scheduling"&gt;7&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Recently we start to see big/small cores in Apple
M1 and Intel 12th gen, and “quality of service” in
macOS.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Pilot uses the same language,
Mesa, for operating system and user programs. In result, the OS and user
programs are tightly coupled.&lt;/p&gt;&lt;p&gt;Pilot provides defense
(against errors) but not &lt;a id="footref:absolute-protection"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Aabsolute-protection"&gt;absolute protection&lt;sup
class="inline-footref"&gt;8&lt;/sup&gt;&lt;/a&gt;. And protection is
language-based, provided by (and only by) type-checking in
Mesa.&lt;/p&gt;&lt;div id="footdef:absolute-protection"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Aabsolute-protection"&gt;8&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;This is before Internet, and malicious program
isn’t a thing yet, I think?&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Lastly, Pilot
has integrated support for networks. It is designed to be used in a
network (of Pilots). In fact, the first distributed email system is
created on Pilot.&lt;/p&gt;&lt;p&gt;The device on which Pilot runs is
also worth noting. ’Twas a powerful machine, with high-resolution bitmap
display, keyboard, and a “pointing device”. Xerox PARC basically invented
personal computer, plus GUI and mouse.&lt;/p&gt;&lt;p&gt;The filesystem
is flat (no directory hierarchy), though higher level software are free
to implement additional structure. Files are accessed through mapping its
pages (blocks) into virtual memory. Files and volumes (devices) are named
by a 64-bit unique id (uid), which means files created anywhere anytime
can be uniquely identified across different machines (and thus across the
network). They used a classic trick, unique serial number plus real-time
clock, to guarantee uniqueness.&lt;/p&gt;&lt;p&gt;A file can be marked
immutable. An immutable file can’t be modified ever again, and can be
shared across machines without changing its uid. This is useful for, eg,
sharing programs.&lt;/p&gt;&lt;h2 id="Monitor"
class="section"&gt;Monitor&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Monitors: An
Operating System Structuring Concept&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1974&lt;/span&gt;, by C. A. R.
Hoare.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Experience with Processes and Monitors
in Mesa&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1980&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Monitor&lt;/em&gt;
is a synchronization concept. Think of it as a class that manages some
resource and synchronizes automatically. In C, you would manually create
a mutex and lock/unlock it; in Java, you just add some keyword in front
of a variable and the runtime creates and manages the lock for you—that’s
a monitor.&lt;/p&gt;&lt;p&gt;The Hoare paper introduced the concept and
gave a bunch of examples. The Mesa paper describes how did they implement
and use monitors in Mesa. If you recall, Mesa is the system and
application language for Pilot.&lt;/p&gt;&lt;p&gt;Pilot uses monitors
provided by Mesa to implement synchronization in the kernel, another
example of the tight coupling of Pilot and Mesa.&lt;/p&gt;&lt;p&gt;I have
some notes on the differences between Mesa’s monitors and Hoare’s
monitors, but they aren’t very interesting. Basically Mesa folks needed
to figure out a lot of details for using monitors for Pilot, like nested
wait, creating monitor, handling exceptions in monitor, scheduling, class
level vs instance level, etc.&lt;/p&gt;&lt;p&gt;Pilot didn’t use mutual
monitors between devices. If two devices with orders of magnitude
difference in processing speed shares a monitor, the fast device could be
slowed down by waiting for the slower device to finish its critical
section.&lt;/p&gt;&lt;h2 id="V%20Kernel" class="section"&gt;V
Kernel&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The Distributed V Kernel and its
Performance for Diskless Workstations&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1983&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Back in the
day, professors and their grad students work together to build an awesome
and cutting-edge system, and journals invite them to write down their
thoughts and experiences. Papers we’ve read up to this point are mostly
describing the system the authors built, and sharing their experiences
and lessons learned.&lt;/p&gt;&lt;p&gt;This paper is a bit different—it
presents performance measurements and use it to argue a claim. You see,
the conventional approach to build a distributed workstation is to use a
small local disk for caching, and these systems usually use specialized
protocols. This papar tries to build a distributed workstation without
local disks (diskless) and only use generic message-based IPC. The
authors argue that the overhead added by this two decisions are
ok.&lt;/p&gt;&lt;p&gt;The paper introduced V message. It’s synchronous
(request and response), has a small message size (&lt;span
class="oldstyle-num"&gt;32&lt;/span&gt; bytes), and has separate control
data messages. Though they also have a “control+data message”
(&lt;code&gt;ReplyWithSegment&lt;/code&gt;), presumably to squeeze out
some performance.&lt;/p&gt;&lt;p&gt;They used various measures to reduce
the overhead. They put everything into the kernel, including the file
server. They didn’t use TCP but used Ethernet frames directly. There is
no separate ACK message, instead ACK is implied by a
response.&lt;/p&gt;&lt;p&gt;The paper analyzed what network penalty
consists of. When you send a message from one host to another, it goes
from RAM to the network interface, then it’s transferred on wire to the
destination interface, then it’s copied into RAM. Their argument is that
message layer doesn’t add much overhead comparing to the base network
penalty—copying between RAM and network interface, and waiting in the
interface before going onto the wire. They also argued that remote file
access adds little overhead comparing to already-slow disk
access.&lt;/p&gt;&lt;p&gt;Overall, their argument do have some cracks.
For example, they argue that there is no need for specialized message
protocol, but their protocol ends up specializing. They also argued that
no streaming is needed, but large data packet are effectively
streaming.&lt;/p&gt;&lt;h2 id="Sprite"
class="section"&gt;Sprite&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The Sprite Network
Operating System&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1988&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Sprite is
another distributed system. It tries to use large memory cache to improve
file access; and do it transparently, giving the user the illusion of a
local system. It also has a very cool process migration feature. Sadly,
process migration never caught up in the
industry.&lt;/p&gt;&lt;p&gt;Several trends at the time influenced
Sprite’s design. Distributed system was popular (at least in academia);
memories are getting larger and larger; and more and more systems are
featuring multiple processors.&lt;/p&gt;&lt;p&gt;To present the illusion
of a local file system, Sprite uses &lt;em&gt;prefix tables&lt;/em&gt;.
Here, prefix means path prefix. When the userspace access a file, the
kernel looks for a prefix of the path that’s in the prefix table. In the
prefix table, the prefix can either point to the local filesystem or a
remote filesystem. If it points to a remote filesystem, the kernel makes
RPC calls to the remote host, which then access the local filesystem of
that remote host.&lt;/p&gt;&lt;p&gt;Prefix table isn’t only useful for
distributed system. In general, OS that uses file paths usually cache the
file paths it reads in a prefix table, because resolving a file path is
very slow. When the OS resolves a file path, it needs to read each
directory in the path to find the next directory.&lt;/p&gt;&lt;p&gt;With
cache, the biggest issue is consistency: if two clients get a file and
stored it in their cache, and both write to their cache, you have a
problem. Sprite’s solution is to allow only one writer at a time and
track the current writer of every file. When a client needs to read a
file, it finds the current writer and requests the file from it. This is
&lt;em&gt;sequential write-sharing&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;If
multiple clients needs to write the same file (&lt;em&gt;concurrent
write-sharing&lt;/em&gt;), Sprite just turns off caching. This is rare
enough to not worth complicating the system. (And you probably need a
substantially more complicated system to handle this.)&lt;/p&gt;&lt;h2
id="Grapevine"
class="section"&gt;Grapevine&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Experience with
Grapevine: The Growth of a Distributed System&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1984&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;A classic
paper in distributed systems, even considered the MULTICS of distributed
systems by some. Grapevine is a distributed email delivery and management
system; it provides message delivery, naming, authentication, resource
location, access control—you name it.&lt;/p&gt;&lt;p&gt;The main takeaway
is the experience they got from running Grapevine. To support scaling,
the cost of any computation/operation should not grow as the size of the
system grows. But on the other hand, sometimes you can afford to have
complete information—maybe that information can never get too large,
regardless of how large the system grows.&lt;/p&gt;&lt;p&gt;Grapevine
generally tries to hide the distributed nature of the system, but that
caused some problem. First of all, they can’t really hide everything:
update in the sytem takes time to propagate, and sometimes users get
duplicated messages, all of which are confusing for someone accustomed to
the mail service on time-sharing systems.&lt;/p&gt;&lt;p&gt;More
importantly, user sometimes needs to know more information of the
underlying system to understand what’s going on: when stuff doesn’t work,
people want to know why. For example, removing an inbox is an expensive
operation and removing a lot of them in the same time could overload the
system. System administrators needs to understand this, and to understand
this they need to understand roughly how the system works under the
hood.&lt;/p&gt;&lt;p&gt;The lesson is, complete transparency is usually
not possible, and often not what you want anyway. When you design a
system, it is important to decide what to make transparent and what not
to.&lt;/p&gt;&lt;p&gt;Finally, the paper mentioned some considerations
about managing the system. Maintaining a geographically dispersed system
involves on-site operators and system experts. On-site operators carry
out operations on-site, but has little to no understanding of the
underlying system. System experts has deep understanding of the system,
but are in short supply and are almost always remote from the servers
they need to work on. Grapevine has remote monitoring and debugging
features to help an expert to diagnose and repair a server
remotely.&lt;/p&gt;&lt;figure&gt;&lt;img alt="The system structure of
Grapevine."
src="https://archive.casouri.cc/note/2024/cse221/grapevine.jpg"/&gt;
&lt;figcaption&gt;The system structure of
Grapevine.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 id="Global%20memory"
class="section"&gt;Global
memory&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Implementing Global Memory Management
in a Workstation Cluster&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1995&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;This paper
is purely academic, but pretty cool nonetheless. They built a cluster
that shares physical memory at a very low level, below VM, paging,
file-mapping, etc. This allows the system to utilize the physical memory
much better and allows more file-caching. More file caches is nice
because CPU was becoming much faster than the
disk.&lt;/p&gt;&lt;p&gt;Each node in the cluster divides their memory
into local memory and global memory. Local memory stores pages requested
by local processes; global memory stores pages in behave of other nodes
in the cluster.&lt;/p&gt;&lt;p&gt;When a fault occurs on a node P, one of
four things could happen.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;If the requested
page is in the global memory of another node Q, P uses a random page in
its global memory to trade the desired page with Q. (See illustration 1.)
&lt;/li&gt;&lt;li&gt;If the requested page is in the global memory of
another node Q, but P doesn’t have any page in its global memory, P use
the least-recently used (LRU) local page to trade with
Q.&lt;/li&gt;&lt;li&gt;If the requested page is on local disk, P reads it
into its local memory, and evict the oldest page in the &lt;em&gt;entire
cluster&lt;/em&gt; to make room for the new page. If the oldest page is
on P, evict that; if the oldest page is on a node Q, evict the page on Q,
and send a page of P to Q. This page is either a random global page on P,
or the LRU local page of P if P has no global pages. (See illustration
2.)&lt;/li&gt;&lt;li&gt;If the requested page is a local page of another
node Q, duplicate that page into the local memory of P, and evict the
oldest page in the entire cluster. Again, if the oldest page is on
another node R, send one of P’s global pages or P’s LRU page to trade
with R.&lt;/li&gt;&lt;/ol&gt;&lt;figure&gt;&lt;img alt="Illustration of
page exchange in case 1."
src="https://archive.casouri.cc/note/2024/cse221/global-memory-1.jpg"/&gt;
&lt;figcaption&gt;Illustration 1: Page exchange in case
1.&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img
alt="Illustration of page exchange in case 3."
src="https://archive.casouri.cc/note/2024/cse221/global-memory-2.jpg"/&gt;
&lt;figcaption&gt;Illustartion 2: Page exchange in case
3.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;This whole dance can improve
performance of memory-intensive tasks because fetching a page from remote
memory is about two to ten times faster than disk access. However, local
hit is over three magnitudes faster than fetching remote memory, so the
algorithm has to be very careful not to evict the wrong
page.&lt;/p&gt;&lt;p&gt;The description above omits a crucial problem:
how does memory management code running on each node know which page is
the oldest page in the entire cluster?&lt;/p&gt;&lt;p&gt;Consider the
naive solution, where the system is managed by a single entity, a central
controller. The controller keeps track of every single page’s age and
tells each node which node to evict. Of course, this is impossible
because that’s way too slow, the controller has to be running at a much
faster speed than the other nodes and the communication speed between
nodes must be very fast.&lt;/p&gt;&lt;p&gt;Instead, each node must make
local independent decisions that combines to achieve a global goal (evict
the oldest page). The difficulty is that local nodes usually don’t have
complete, up-to-date information.&lt;/p&gt;&lt;p&gt;A beautiful approach
to this kind of problem is probability-based algorithm. We don’t aim to
make the optimal decision for every single case, but use probability to
approximate the optimal outcome.&lt;/p&gt;&lt;p&gt;We divide time into
epochs, in each epoch, the cluster expects to replace
&lt;em&gt;m&lt;/em&gt; oldest pages. (&lt;em&gt;m&lt;/em&gt; is predicted
from date from previous epochs.) At the beginning of each epoch, every
node sends a summary of its pages and their age to an &lt;em&gt;initiator
node&lt;/em&gt; (central controller). The initiator node sorts all the
pages by their age, and finds the set of &lt;em&gt;m&lt;/em&gt; oldest
pages in the cluster (call it &lt;em&gt;W&lt;/em&gt;). Then, it assigns
each node &lt;em&gt;i&lt;/em&gt; a weight
&lt;em&gt;w&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;, where
&lt;em&gt;w&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;
is&lt;/p&gt;&lt;p&gt;&lt;img alt="A math expression: the number of old
pages in W that are in node i, divided by W."
src="https://archive.casouri.cc/note/2024/cse221/global-memory-frac.png"/&gt;&lt;/p&gt;&lt;p&gt;Basically,
&lt;em&gt;w&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; means “among the
&lt;em&gt;M&lt;/em&gt; oldest pages in the cluster, how many of them are
in node &lt;em&gt;i&lt;/em&gt;”.&lt;/p&gt;&lt;p&gt;The initiator node
tells each node of every node’s weight, and when a node P encounters case
3 or 4 and wants to evict “the oldest page in the cluster”, it randomly
picks a node by each node’s weight, and tells that node to evict its
oldest page.&lt;/p&gt;&lt;p&gt;That takes care of finding which node to
evict pages from, but tracking page age isn’t easy either. For one, in a
mmaped file, memory access bypasses pagefault handler and goes straight
to the TLB. More importantly, the OS uses FIFO second-chance page caching
and hides many page request/eviction from their memory manager, because
the memory manager runs at a lower level (presumably in pagefault
handlers).&lt;/p&gt;&lt;p&gt;The authors resorted to hacking the TLB
handler of the machine with PALcode (microcode). This would’ve been
impossible on x86—it’s TLB is handled purely in
hardware.&lt;/p&gt;&lt;p&gt;Probability-based algorithms sometimes feels
outright magical—they seem to just bypass trade-offs. In reality, they
usually just add a new dimension to the trade-off. We’ll see this again
later in lottery scheduling.&lt;/p&gt;&lt;h2 id="%CE%BC-kernel"
class="section"&gt;μ-kernel&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The Performance
of μ-Kernel-Based Systems&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1997&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;This paper
is another measurement paper. It uses benchmarks to argue that a) micro
kernel can deliver comparable performance, and b) the performance doesn’t
depend on a particular hardware architecture.&lt;/p&gt;&lt;p&gt;The
authors built a micro kernel L4, and ported Linux to run on it (called
L⁴Linux). Then they ported L4 itself from Pentium to both Alpha and MIPS
architecture—to show that L4 is architecture-independent. They also
conducted some experiment to show L4’s extensibility and
performance.&lt;/p&gt;&lt;p&gt;The paper considers micro kernels like
Mach and Chrous to be first-generation, evolved out of earlier monolithic
kernels. It considers later kernels like L4 and QNX to be
second-generation, for that they are designed more rigorously from
scratch, ie, more “pure”.&lt;/p&gt;&lt;p&gt;L4 allows user programs to
control memory allocation like nucleus did: kernel manages top-level
tasks’ memory, top-level tasks manages their children’s memory. And
scheduling? Hard priorities with round-robin scheduling per priority, not
unlike nucleus.&lt;/p&gt;&lt;p&gt;L⁴Linux only modifies the
architecture-dependent part of Linux, meaning they didn’t have to modify
Linux. The authors also restricted themselves to not make any
Linux-specific change to L4, as a test for the design of L4. The result
is not bad: in micro benchmarks, L⁴Linux is ×&lt;span
class="oldstyle-num"&gt;2.4&lt;/span&gt; times slower than native Linux;
in macro benchmarks, L⁴Linux is about &lt;span
class="oldstyle-num"&gt;5–10%&lt;/span&gt; slower than native Linux. More
over, L⁴Linux is much faster than running Linux on top of other micro
kernels, like MkLinux (Linux + Mach 3.0).&lt;/p&gt;&lt;p&gt;The paper
also mentions supporting tagged TLBs. Normal TLB needs to be flashed on
context switch, which is a big reason why context switch is expensive.
But if you tag each entry in the TLB with a tag to associate that entry
with a specific process, you wouldn’t need to flush TLB anymore. The
downside is that, tagged TLB needs some form of software-managed TLB, so
not all architecture can support it. For example, x86 doesn’t support
software-managed TLB.&lt;/p&gt;&lt;p&gt;The benefit of micro kernels is
of course the extensibility. For example, when a page is swapped out,
instead of writing to disk, we can swap to a remote machine, or encrypt
the page and write to disk, or compress the page and write to page. A
database program could bypass the filesystem and file cache, and control
the layout of data on physical disk for optimization; it can control
caching and keep pages in memory and not swapped
out.&lt;/p&gt;&lt;p&gt;All of these are very nice perks, and the
performance doesn’t seem too bad, then why micro kernels never caught on?
Here’s our professor’s take: big companies can just hire kernel
developers to &lt;a id="footref:mu-kernel-linux" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Amu-kernel-linux"&gt;modify Linux to their need&lt;sup
class="inline-footref"&gt;9&lt;/sup&gt;&lt;/a&gt;; smaller companies
don’t have special requirements and can just use Linux. That leaves only
the companies in the middle: have special requirements, but don’t want to
modify Linux. (Professor’s take ends here.) However, extending micro
kernel is still work, it might be easier than modifying Linux, but how
much easier? Plus, if there are a lot of Linux kernel developers, perhaps
modifying Linux is more easier afterall.&lt;/p&gt;&lt;div
id="footdef:mu-kernel-linux" class="footdef"&gt;&lt;div
class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to
main text"
href="#footref%3Amu-kernel-linux"&gt;9&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;And they did. Since the paper has been written,
Linux has gained many features of L4 described in the
paper.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;If we look at “we need a custom
OS” scenario today, Nintendo Switch and Playstation use modified BSD,
Steam Deck is built on top of Linux. And I’m sure most data centers run
some form of Linux.&lt;/p&gt;&lt;p&gt;Beyond monolithic and microkernel,
there are many other kernel designs: hybrid, exokernel, even virtual
machines. Hybrid kernels include Windows NT, NetWave, BeOS, etc. Hybrid
kernel leaves some modules in the kernel, like IPC, driver, VM,
scheduling, and put others in the userspace, like
filesystem.&lt;/p&gt;&lt;h2 id="Exokernel"
class="section"&gt;Exokernel&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Exokernel: An
Operating System Architecture for Application-Level Resource
Management&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1997&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;The idea is
to go one step further than microkernels and turn the kernel into a
library. Kernel exposes hardware resources, provide multiplexing and
protection, but leaves management to the application. The motivation is
that traditional kernel abstraction hides key information and obstructs
application-specific optimizations.&lt;/p&gt;&lt;p&gt;This idea can be
nicely applied to single-purpose applicants, when the whole purpose of a
machine is to run a single application, eg, a database, a web server, or
an embedded program. In this case, things that a traditional kernel
provides like users, permissions, fairness, are all unnecessary overhead.
(&lt;a
href="https://archive.casouri.cc/note/2024/cse221/https:/dl.acm.org/doi/10.1145/2490301.2451167"&gt;Unikernel&lt;/a&gt;
explored exactly this use-case.)&lt;/p&gt;&lt;p&gt;Exokernel exports
hardware resources and protection, and leaves management to the
(untrusted) application. Applications can request for resources and
handle events. Each application cooperatively share the limited resources
by participating in a &lt;em&gt;resource revocation&lt;/em&gt; protocol.
Eg, the exokernel might tell an application to release some resources for
others to use. Finally, the exokernel can forcibly retract resources held
by uncooperative applications by the &lt;em&gt;abort
protocol&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Exokenel doesn’t provide many of
the traditional abstractions, like VM or IPC, those are left for the
application to implement.&lt;/p&gt;&lt;p&gt;The protection provided by an
exokernel is inevitably weaker: an application error could corrupt
on-disk data; and because the kernel and application runs in the same VM,
application error could corrupt kernel memory!&lt;/p&gt;&lt;p&gt;The
existence of abort protocol kind of breaks the “no management”
principle—retracting resources from an application
&lt;em&gt;is&lt;/em&gt; management.&lt;/p&gt;&lt;p&gt;Finally, their
benchmark isn’t very convincing: there are only micro benchmarks and no
macro benchmark; they only benchmarked mechanism (context switch,
exception handler, etc) and has no benchmark for
application.&lt;/p&gt;&lt;h2 id="Xen"
class="section"&gt;Xen&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Xen and the Art of
Virtualization&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;2003&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Xen is a
virtual machine monitor (VMM), also called hypervisor—the thing that sits
between an OS and the hardware. The goal of Xen is to be able to run
hundreds of guest OS’s in the same time.&lt;/p&gt;&lt;p&gt;Xen provides a
virtual machine abstraction (&lt;em&gt;paravirtualization&lt;/em&gt;)
rather than a full virtual hardware (&lt;em&gt;full
virtualization&lt;/em&gt;). Paravirtualization has better performance and
gives the VMM more control, but requires modification to the guest OS. On
the other hand, full virtualization VMM, for example VMWare, can work
with unmodified guest OS.&lt;/p&gt;&lt;p&gt;Nowadays there are a plethora
of virtual machine solutions, like VMWare, Hyper-V, VirtualBox, KVM, Xen.
On top of that, there are containers like LXC, docker, etc. The whole
stack contains OS, VMM/container engine, guest OS, and guest app. These
solutions all have different configurations: The VMM can sit on the host
OS or directly on the hardware; you can run one guest OS per app, or run
a single guest OS for multiple apps; on the old IBM and VMS systems, the
VMM supports both a batch processing OS and an interactive
OS.&lt;/p&gt;&lt;p&gt;Let’s look at how does Xen virtualize and how does
it compare to VMWare.&lt;/p&gt;&lt;p&gt;Scheduling virtualization: Xen
uses the Borrowed Virtual Time (BVT) algorithm. This algorithm allows a
guest OS to borrow future execution time to respond to latency-critical
tasks.&lt;/p&gt;&lt;p&gt;Instructions virtualization: Boring instructions
like &lt;code&gt;add&lt;/code&gt; can just pass-through to the hardware,
but privileged instructions (like memory access) needs intervention from
the monitor.&lt;/p&gt;&lt;p&gt;In Xen, the guest OS is modified so that
it is aware of the VMM, and instead of doing privileged task by itself,
the guest OS delegates the work to the VMM by
&lt;em&gt;hypercalls&lt;/em&gt;. In VMWare, since they can’t modify the
guest OS, privileged instructions simply trap into VMM. If you remember,
we talked about rings in the MULTICS section. On &lt;span
class="oldstyle-num"&gt;x86&lt;/span&gt;, The CPU will trap if it’s asked
to execute a privileged instruction when in a low ring
level.&lt;/p&gt;&lt;p&gt;Memory virtualization: The guest OS isn’t
managing physical memory anymore, though we still call it physical
memory. VMM has real access to the phyiscal memory, often called machine
memory.&lt;/p&gt;&lt;p&gt;Then, how is the virtual memory address in the
guest OS translated into machine memory address?&lt;/p&gt;&lt;p&gt;In
Xen, the guest OS is aware of the virtualization. It’s page table can map
directly from virtual address to machine address, and MMU can just read
off of guest OS’s page table. The VMM just need to verify writes to the
page table to enforce protection.&lt;/p&gt;&lt;p&gt;In VMWare, however,
the guest OS is unaware of the VMM, and its page table maps from virtual
address to physical address. Also, the guest OS writes to its page table
without bothering to notify anyone. VMM maintains a shadow page table
that maps virtual address to actual machine address. It also uses dirty
bits to make sure whenever the guest OS writs to the page table, it is
notified and can update its shadow page table accordingly. (I forgot
exactly how.) And MMU reads off the shadow page table. (Presumably by
trapping to VMM when the guest OS tries to modify the &lt;span
class="oldstyle-num"&gt;CR3&lt;/span&gt; register, and let VMM override
&lt;span class="oldstyle-num"&gt;CR3&lt;/span&gt; to its shadow page
table?)&lt;/p&gt;&lt;figure&gt;&lt;img alt="Diagram illustrating Xen and
VMWare’s memory remapping approach."
src="https://archive.casouri.cc/note/2024/cse221/xen.jpg"/&gt;
&lt;figcaption&gt;Illustration of Xen and VMWare’s memory
virtualization.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Note that
VMWare needs all these complication only because &lt;span
class="oldstyle-num"&gt;x86&lt;/span&gt;’s memory management is
completely hardware-based—the kernel can only point the MMU to the page
table and has no other control over the MMU. Other “higher-end”
architectures usually support software-managed and tagged
TLB.&lt;/p&gt;&lt;p&gt;A clever trick that Xen uses is &lt;em&gt;balloon
driver&lt;/em&gt;. It’s a drive whose whole purpose is to take up memory.
When the VMM wants to retract memory from the guest OS, it enlarges the
“balloon”, so the guest OS relinquishes memory to the
host.&lt;/p&gt;&lt;h2 id="VMS"
class="section"&gt;VMS&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Virtual Memory
Management in VAX/VMS&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1982&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;This paper
mainly concerns of the implementation of the virtual memory for VMS. VMS
has to run on a variety of low-end hardware with small memory and slow
CPU; it also needs to support drastically different use-cases: real time,
timeshared, and batch. These requirements all affected the design of
VMS.&lt;/p&gt;&lt;p&gt;VMS’s virtual memory has three regions: program
region, control region and system region. The highest two bits of an
address indicates the region, after that are the regular stuff: &lt;span
class="oldstyle-num"&gt;20&lt;/span&gt; bits of virtual page number and
&lt;span class="oldstyle-num"&gt;8&lt;/span&gt; bits of byte offset. The
system region (think of it as kernel stack) is shared by all processes;
program and control region are process-specific.&lt;/p&gt;&lt;p&gt;The
paper mentions a trick they used: they mark the first page in the VM as
no access, so that an uninitialized pointer (pointing to
&lt;code&gt;0x0&lt;/code&gt;) causes an exception. I think Linux does the
same.&lt;/p&gt;&lt;p&gt;VMS uses a process-local page replacement policy.
When a process requests for memory that needs to be paged in, kernel
swaps out a page from this process’s resident set—the set of pages
currently used by that process. This way a heavily paging process can
only slow down itself.&lt;/p&gt;&lt;p&gt;When a page is removed from the
resident set, it doesn’t go out of the memory immediately; instead, it’s
appended to one of two lists. It goes to the free page list if it hasn’t
been modified; otherwise it goes to the modified page list. When kernel
needs a fresh page to swap data in, it takes a page from the head of the
free list. When kernel decides to write pages back to paging file (swap
file), it takes the page from the head of the modified
list.&lt;/p&gt;&lt;p&gt;So a page is appended to the end of the list, and
gradually moves to the head, until it’s consumed. But if the page is
requested again by the process while still in the list, it is pulled out
and put back into the the process’s resident set. This is basically
second chance caching: we keep the page in the memory for a while before
really discarding it, in case it is used again
soon.&lt;/p&gt;&lt;p&gt;Because VMS uses a relatively small &lt;a
id="footref:vms-page" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Avms-page"&gt;&lt;span
class="oldstyle-num"&gt;512&lt;/span&gt; byte page size&lt;sup
class="inline-footref"&gt;10&lt;/sup&gt;&lt;/a&gt;, pages causes a lot of
I/O, which is obviously not good. To reduce the number of disk
operations, they try to read and write several pages at once (they call
this clustering).&lt;/p&gt;&lt;div id="footdef:vms-page"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Avms-page"&gt;10&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;To be compatible with &lt;span
class="oldstyle-num"&gt;PDP-11&lt;/span&gt; and because of the promise of
low-latency semiconductor disk technologies (which obviously didn’t
materialize on time).&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The paper also
mentions some other nice features, like on-demand zeroed page, and
copy-on-reference page. On-demand zeroed page are only allocated and
zeroed when it’s actually referenced. Similarly, copy-on-reference pages
are only copied when it’s actually referenced. I wonder why didn’t they
make it copy-on-write though, they say it’s used for sharing executable
files.&lt;/p&gt;&lt;p&gt;Quiz time: does kernel know about every memory
access?&lt;/p&gt;&lt;p&gt;…The answer is no. Kernel only get to know
about memory use when there’s a pagefault, which runs the pagefault
handler provided by the kernel. If there’s no pagefault, memory access is
handled silently by the MMU.&lt;/p&gt;&lt;h2 id="Mach"
class="section"&gt;Mach&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Machine-Independent
Virtual Memory Management for Paged Uniprocessor and Multiprocessor
Architectures&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1987&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Mach was a
popular research OS. In fact, our professor, Dr. Zhou, did her PhD on
Mach’s virtual memory. Mach actually influenced both Windows and Mac: one
of the prominent Mach researcher went to Microsoft and worked on Windows
NT, and Mac OSX was Mach plus BSD plus NextStep.&lt;/p&gt;&lt;p&gt;The
main topic of this paper is machine-independent VM. The idea is to treat
hardware information (machine-dependent, like TLB) as a cache of
machine-independent information.&lt;/p&gt;&lt;p&gt;Mach’s page table is a
sorted doubly linked list of &lt;em&gt;virtual regions&lt;/em&gt;. Each
virtual region stores some machine-independent info like address range,
inheritance, protection, and some cache for the machine-dependent info.
The machine-dependent part is a cache because it can be re-constructed
from the machine-independent info. Also, since Mach uses doubly linked
list, it can support sparse addresses (VMS can’t).&lt;/p&gt;&lt;p&gt;Each
virtual region maps a virtual address range to a range in a
&lt;em&gt;memory object&lt;/em&gt;. A memory object is an abstraction
over some data; it can be a piece of memory, secondary storage, and even
remote data, I think?&lt;/p&gt;&lt;p&gt;A memory object is associated
with a pager, which handles pagefault and page-out requests. This pager
is outside of the kernel and is customizable. And we can make it do
interesting things like encrypting memory, remote memory,
etc.&lt;/p&gt;&lt;p&gt;When performing a copy-on-write, Mac creates a
shadow memory object which only contains pages that have been modified.
Access to the unmodified page will be redirected to the original memory
object. Since shadow memory objects themselves can be shadowed,
sometimes, large chains of shadow objects will manifest. Mach has to
garbage collect intermediate shadow objects when the chain gets long.
Reading the paper, this seems to be tricky to implement and was quite an
annoyance to the designers.&lt;/p&gt;&lt;p&gt;When a task inherits memory
from its parent task, the parent can set the inheritance flag of any page
to either &lt;em&gt;shared&lt;/em&gt; (read-write),
&lt;em&gt;copy&lt;/em&gt; (copy-on-write), or &lt;em&gt;none&lt;/em&gt;
(no access). To me, this would be very helpful for
sandboxing.&lt;/p&gt;&lt;h2 id="FFS"
class="section"&gt;FFS&lt;/h2&gt;&lt;p&gt;&lt;em&gt;A Fast File System
for UNIX&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1984&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;This paper
literally describes a faster file system they implemented for UNIX. It
was widely adopted.&lt;/p&gt;&lt;p&gt;The author identifies a series of
shortcomings of the default file system of UNIX:&lt;/p&gt;&lt;p&gt;The
free list (a linked list of all free blocks) starts out ordered, but over
time becomes random, so when the file system allocates blocks for files,
those block are not physically continuous but rather scatter
around.&lt;/p&gt;&lt;p&gt;The inodes are stored in one place, and the
data (blocks) another. File operations (list directory, open, read,
write) involve editing meta information interleaved with writing data,
causing long seeks between the inodes and the
blocks.&lt;/p&gt;&lt;p&gt;The default block size of 512 bytes is too
small and creates indirection and fragmentation. Smaller block size also
means it takes more disk transactions to transfer the same amount of
data.&lt;/p&gt;&lt;p&gt;With all these combined, the default file system
can only produce &lt;span class="oldstyle-num"&gt;2%&lt;/span&gt; of the
full bandwidth.&lt;/p&gt;&lt;p&gt;FFS improves performance by creating
locality as much as possible. It divides a disk partition into
&lt;em&gt;cylinder groups&lt;/em&gt;. Each cylinder group has its own
copy of the superblock, its own inodes, and a free list implemented with
a bitmap. This way inodes and data blocks are reasonably close to each
other. Each cylinder has a fixed number of inodes.&lt;/p&gt;&lt;p&gt;FFS
uses a smart allocation policy for allocating blocks for files and
directories. It tries to place inodes of files in the same directory in
the same cylinder group; it places new directories in a cylinder group
that has more free inocdes and less existing directories; it tries to
place all the data blocks of a file in the same cylinder group.
Basically, anthing that improves locality.&lt;/p&gt;&lt;p&gt;FFS uses a
larger block size since 512 bytes is too small. But larger block size
wastes space—most UNIX systems are composed of many small files that
would be smaller than a larger block size. FFS allows a block to be
splitted into &lt;em&gt;fragments&lt;/em&gt;. A block can be broken into
2, 4, or 8 fragments. At the end, the author claims that FFS with
4096-byte blocks and 512-byte fragments has about the same disk
utilization as the old 512-byte block file system.&lt;/p&gt;&lt;p&gt;FFS
requires some percent of free space to maintain it’s performance. When
the disk is too full, it’s hard for FFS to keep the blocks of a file
localized. FFS performs best when there are around &lt;span
class="oldstyle-num"&gt;10%&lt;/span&gt; of free space. This applies to
most modern filesystems too.&lt;/p&gt;&lt;p&gt;To maximally optimize the
file system, FFS is parameterized so it can be tuned according to the
physical property of the disk (number of blocks on a track, spin speed),
processor speed (speed of interrupt and disk transfer),
etc.&lt;/p&gt;&lt;p&gt;Here’s one example of how these information could
improve performance. Two physically consecutive blocks on the disk can’t
be read consecutively, because it takes some time for the processor to
process the data after reading a block. FFS can calculate the number of
blocks to skip according to the processor speed and spin speed, such that
when the OS finished reading one block, the next block of the file comes
into position right under the disk head.&lt;/p&gt;&lt;h2 id="LFS"
class="section"&gt;LFS&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The Design and
Implementation of a Log-Structured File System&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1991&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;When this
paper came out, it stirred quote some controversy on LFS vs extent-based
FFS. Comparing to FFS, LFS has much faster writes, but it has slower read
and needs garbage collection.&lt;/p&gt;&lt;p&gt;The main idea is this:
since now machines have large RAMs, file cache should ensure read is
fast; so the filesystem should optimize for write speed. To optimize
write speed, we can buffer writes in the file cache and write them all at
once sequentially.&lt;/p&gt;&lt;p&gt;This approach solves several
shortcoming of FFS. In FFS, even though inodes are close to the data,
they are still separate and requires seeking when writing. And the same
goes for directories and files. The typical work load of the filesystem
alternates between writing metadata and data, producing a lot of separate
small writes. Further, most of the files are small, so most writes are
really writing metadata. Writing metadata is much slower than writing
files, because the filesystem has to do synchronous write for metadata,
to ensure consistency in case of unexpected failure (power outage,
etc).&lt;/p&gt;&lt;p&gt;On the other hand, LFS treats the whole disk as
an append-only log. When writing a file, the filssytem just appends what
it wants to write to the end of the log, followed by the new inodes
pointing to the newly written blocks, followed by the new inode map
pointing to the newly written inodes. The inode map is additionally
copied in the memory for fast access.&lt;/p&gt;&lt;p&gt;To read, LFS
looks into the inode map (always at the end of the log), finds the
inodes, reads the inode to find the blocks, and pieces together the parts
it wants to read.&lt;/p&gt;&lt;p&gt;When LFS has used the entire disk up,
how does it keep appending new blocks? LFS divides the disk into
&lt;em&gt;segments&lt;/em&gt;, each consisting of a number of blocks.
Some of the blocks are still being referenced (live blocks), some are
free to be reused (free blocks). LFS will regularly perform garbage
collection and create segments that only contains free blocks—during
garbage collection, LFS copies all the live blocks in a segment to the
end of the log, then this segment becomes a free segment. Finally, when
LFS needs to write new logs, it writes them in free
segments.&lt;/p&gt;&lt;p&gt;The challenge of garbage collection is to
choose the best segment to clean. The authors first tried to clean least
utilized segment first, ie, clean the segment with the least amount of
live data. This didn’t go well, because segments don’t get cleaned until
they cross the threshold, and a lot of segments lingers around the
threshold, don’t get cleaned, and hold up a lot of
space.&lt;/p&gt;&lt;p&gt;The authors found that it’s best to categorize
segments into hot and cold segments. Hot segments are the ones that are
actively updated, where blocks are actively marked free. Cleaning hot
segments isn’t very valuable, because even if we don’t clean it, more and
more of its blocks will become free by themselves. On the other hand,
cold segments are valuable to clean, since it’s unlikely/slow to free up
blocks by itself.&lt;/p&gt;&lt;p&gt;The authors also mentioned some crash
recovery and checkpoint mechanism in the paper.&lt;/p&gt;&lt;h2
id="Soft%20update" class="section"&gt;Soft
update&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Soft Updates: A Solution to the
Metadata Update Problem in File Systems&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;2000&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;In LFS we
mentioned that metadata edit requires synchronize writes. That’s because
you want to ensure the data on disk (or any persistent storage) is always
consistent. If the system writes only a partial of the data it wishes to
write, then crashed, the disk should be in a consistent or at least
recoverable state. For example, when adding a file to a directory, adding
the new inode must happen before adding the file entry to the
directory.&lt;/p&gt;&lt;p&gt;Folks has long sought to improve the
performance of updating metadata, this paper lists several existing
solutions.&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;Nonvolatile RAM
(NVRAM)&lt;/dt&gt;&lt;dd&gt;Use NVRAM to store metadata. Updating
metadata is as fast as accessing RAM, and it
persists.&lt;/dd&gt;&lt;dt&gt;Write-ahead logging&lt;/dt&gt;&lt;dd&gt;Ie,
journaling. The filesystem first log the operation it’s about to perform,
and performs it. If a crash happens, the filesystem can recover using the
log.&lt;/dd&gt;&lt;dt&gt;Scheduler-enforced
ordering&lt;/dt&gt;&lt;dd&gt;Modify disk request scheduler to enforce
synchronous edit of metadata. Meanwhile, the filesystem is free to edit
metadata asynchronously (since the disk request scheduler will take care
of it)&lt;/dd&gt;&lt;dt&gt;Interbuffer
dependencies&lt;/dt&gt;&lt;dd&gt;Use write cache, and let the cache
write-back code enforce metadata
ordering.&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;Soft update is similar to
“interbuffer dependencies”. It maintains a log of metadata updates, and
tracks dependencies at a fine granularity (per field or pointer), and can
move the order of operations around to avoid circular dependencies. Then
it can group some updates together and make less writes.&lt;/p&gt;&lt;h2
id="Rio" class="section"&gt;Rio&lt;/h2&gt;&lt;p&gt;&lt;em&gt;The Rio File
Cache: Surviving Operating System Crashes&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1996&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;The main
point of Rio (RAM/IO) is to make memory survive crashes; then the OS
doesn’t have to consistently write the cache to persistent
storage.&lt;/p&gt;&lt;p&gt;Power outages can be solved by power supply
with battery and dumping memory to persistent storage when power outage
occurs. Alternatively, we can just use persistent memory. Then, during
reboot, the OS goes through the dumped memory file to recover data (file
cache). The authors call this “warm reboot”.&lt;/p&gt;&lt;p&gt;System
crash is the main challenge, because kernel crash can corrupt the memory.
The authors argue that the reason why people consider persistent storage
to be reliable and memory to be unreliable is because of their interface:
writing to disk needs drivers and explicit procedures, etc, while writing
to memory only takes a &lt;code&gt;mov&lt;/code&gt;
instruction.&lt;/p&gt;&lt;p&gt;Then, protecting the file cache is just a
matter of write-protecting the memory. And there are a myriad of
techniques for that already. For example, you can use the protection that
virtual memory already provides. Just turn off the write-permission bits
in the page table for file cache pages. However, some systems allow
kernel to bypass virtual memory protection. The authors resorted to
disabling processor’s ability to bypass TLB. This is of course
architecture-dependent.&lt;/p&gt;&lt;p&gt;Another way is to install
checks for every kernel memory access, but that’s a heavy penalty on the
performance.&lt;/p&gt;&lt;p&gt;What’s more interesting is perhaps the
effect of having a reliable memory on the filesystem. First, you can turn
off reliable sync writes (this is the motivation for this paper in the
first place). But also, since memory is now permanent, metadata updates
must be ordered, so that a crash in the middle of an operation doesn’t
create an inconsistent state.&lt;/p&gt;&lt;p&gt;Nowadays, persistent
memory is getting larger and cheaper to the point that it seems possible
to use it to improve IO performance in datacenters. Problem is, every
update has to be ordered, and you can’t control L1/2/3 cache. They can
decide to write to memory at different orders than you
intended.&lt;/p&gt;&lt;p&gt;Currently there are two approaches: treat the
persistent memory as a super fast SSD, and slap a filesystem on it, the
filesystem will take care of the dirty work. Others don’t want to pay for
the overhead of a filesystem, and want to use it as a memory. To go this
route, the programmer have to deal with the complications of
consistency/ordering.&lt;/p&gt;&lt;h2 id="Scheduler%20activation"
class="section"&gt;Scheduler
activation&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Scheduler Activations: Effective
Kernel Support for the User-level Management of Parallelism&lt;/em&gt;,
&lt;span
class="oldstyle-num"&gt;1991&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Threading
can be implemented in either kernel or userspace. However, both have
their problems. If implemented in userspace, it has bad integration with
kernel schedular—userspace thread scheduler has no way to know when a
thread is going to run, and for how long. If implemented in kernel,
thread management now requires a context-switch into kernel, which is
very slow. Plus, like anthing else that goes into kernel, there won’t be
much customizability.&lt;/p&gt;&lt;p&gt;The authors present a new
abstraction as the solution—scheduler activation. The idea is to allow
more cooperation between kernel and userspace. Kernel allocates
processors, and notifies the userspace when it gives processors or takes
processors away. The userspace decides what to run on the provided
processors. Finally, the userspace can request or relinquish
processors.&lt;/p&gt;&lt;p&gt;This way we get the best of both worlds:
userspace thread scheduler has more information to make decisions,
meanwhile userspace can do their own scheduling, requiring less
context-switches.&lt;/p&gt;&lt;p&gt;When kernel notifies userspace of a
change, it “activates” the userspace thread scheduler (that’s where the
name “scheduler activation” comes from). A scheduler activation is like
an empty kernel thread. When kernel wants to notify userspace of
something, it creates a “scheduler activation”, assigns it a processor,
and runs userspace scheduler in this “scheduler activation”. The
userspace scheduler makes decisions by the information given in the
scheduler activation by the kernel, then proceeds to run some thread on
this scheduler activation.&lt;/p&gt;&lt;p&gt;The difference between a
scheduler activation and normal kernel thread is that, when the kernel
stops a scheduler activation, (maybe due to I/O), the kernel will create
another scheduler activation to notify the userspace that the other
scheduler activation has stopped; then the userspace scheduler can decide
which thread to run on this scheduler activation. When the original
scheduler activation is to be resumed (I/O completes), kernel blocks a
running scheduler activation and creates a new scheduler activation, and
let userspace scheduler decide which to run on this new scheduler
activation.&lt;/p&gt;&lt;p&gt;For normal kernel threads, the kernel stops
and resumes the thread without noticing userspace, and the kernel selects
what to run.&lt;/p&gt;&lt;p&gt;Critical sections (where the executing
program holds some locks) is a bit tricky in scheduler activation. When
the thread is in critical section when it is blocked or preempted,
performance might take a hit (no one else can run), or a deadlock might
even appear. The solution is to let the thread run a little bit until it
exits the critical section.&lt;/p&gt;&lt;p&gt;Scheduler activation is
basically the N:M thread we’re taught in undergrad OS classes.
Evidentally it isn’t very widely used, maybe because the performance
improvement isn’t worth the complexity.&lt;/p&gt;&lt;h2
id="Lottery%20scheduling" class="section"&gt;Lottery
scheduling&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Lottery Scheduling: Flexible
Proportional-Share Resource Management&lt;/em&gt;, &lt;span
class="oldstyle-num"&gt;1994&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Lottery
scheduling is another probability-based algorithm, it uses a simple
algorithm to solve a otherwise difficult problem. &lt;a
id="footref:google-random" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Agoogle-random"&gt;I really
like probability-based algorithms in general.&lt;sup
class="inline-footref"&gt;11&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;div
id="footdef:google-random" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Agoogle-random"&gt;11&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Another great example is Google’s HyperLogLog:
&lt;a
href="https://archive.casouri.cc/note/2024/cse221/https:/www.youtube.com/watch?v=lJYufx0bfpw"&gt;&lt;em&gt;A
problem so hard even Google relies on Random
Chance&lt;/em&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Scheduling is
hard. There are so many requirements to consider: fairness, overhead,
starvation, priority, &lt;a id="footref:priority-inversion"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Apriority-inversion"&gt;priority inversion&lt;sup
class="inline-footref"&gt;12&lt;/sup&gt;&lt;/a&gt;. However, lottery
scheduling seemingly can have its cake and eat it too, solving all of the
above simultaneously (with a catch, of course). Even better, lottery
scheduling allows flexible distribution of resources, while normal
priority-based scheduler only has corase control over processes: &lt;a
id="footref:fair-share" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Afair-share"&gt;higher
priority always wins&lt;sup
class="inline-footref"&gt;13&lt;/sup&gt;&lt;/a&gt;. It’s also general
enough to apply to sharing other resources, like network bandwith or
memory.&lt;/p&gt;&lt;div id="footdef:priority-inversion"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Apriority-inversion"&gt;12&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Priority inversion is when a preempted
lower-priority process/thread holds a lock which the higher priority
process/thread needs to acquire in order to progress. In this case, the
lower-priority process is blocking the higher priority process,
effectively inverting the priority.&lt;/div&gt;&lt;/div&gt;&lt;div
id="footdef:fair-share" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Afair-share"&gt;13&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Some schduler has static priorities, some
scheduler allows dynamically adjusting priorities. And fair-share
schedulers need to monitor CPU usage over time and adjust priorities
accordingly.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Here’s how it works. Suppose
we have some processes and want to allocate some proportion of execution
time to each. We create &lt;span class="oldstyle-num"&gt;100&lt;/span&gt;
tickets, and assign each process tickets based on their allocated
proportion. Eg, if we want alloacte &lt;span
class="oldstyle-num"&gt;30%&lt;/span&gt; of the execution time to process
A, we assign it &lt;span class="oldstyle-num"&gt;30&lt;/span&gt;
tickets.&lt;/p&gt;&lt;p&gt;Then, we divide time into epochs. At the start
of each epoch, we randomly draw a ticket out of the &lt;span
class="oldstyle-num"&gt;100&lt;/span&gt;, and run the process that owns
this ticket. Over a period of time, the total execution time of each
process should match the assigned proportion.&lt;/p&gt;&lt;p&gt;Lottery
scheduling is probabilistically fair. The shorter the epoch, and the
longer the measured duration, the more accurate and fair is the
scheduling. To ensure fairness, when a process wins lottery and executes
in an epoch, only to be blocked by I/O midway, the scheduler would give
it more ticket in the next epoch to compensate.&lt;/p&gt;&lt;p&gt;Lottery
scheduling doesn’t have starvation. As long as a process has some ticket,
the probability of it getting executed is not
zero.&lt;/p&gt;&lt;p&gt;Lottery scheduling is very responsive to changes
in configuration, because any change in the allocation proportion is
immediately reflected in the next epoch. Some scheduler, like the
fair-use scheduler mentioned earlier, might take longer to adjust
priorities.&lt;/p&gt;&lt;p&gt;Lottery scheduling has very low overhead.
It just need to generate a random number and find the process that owns
it. It takes &lt;span class="oldstyle-num"&gt;~1000&lt;/span&gt;
instructions to run scheduling; it takes &lt;span
class="oldstyle-num"&gt;~10&lt;/span&gt; for generating a random number,
and the rest for finding the process. The processes are stored in a
linked list, ordered by the number of tickets
held.&lt;/p&gt;&lt;p&gt;Lottery scheduling handles priority inversion by
allowing processes to transfer tickets to other process. Traditional
schedulers would use priority inheritance: the higher priority process
elevates the lower priority process temporarily to execute and release
the lock that the higher priority process needs. It’s the same principle,
but instead of elevating priority, a process lends its
tickets.&lt;/p&gt;&lt;p&gt;Of course, there’s always a catch. Lottery
scheduling isn’t very good at immediate, strict control over resources.
Eg, in a real-time system, a very high priority task has to be executed
immediately when it comes up. Lottery scheduling can’t run it immediately
(epoch), and it can’t guarantee to run it
(randomized).&lt;/p&gt;&lt;p&gt;Also, the simple lottery scheduling can’t
express response time (maybe something needs to run immediately but won’t
take a lot of CPU time). We can add another parameter to represent
response time, in addition to CPU time allocation. Not exactly sure how
that works though.&lt;/p&gt;&lt;p&gt;Nowadays, lottery scheduling isn’t
used so much for CPU scheduling, but widely used in
networking.&lt;/p&gt;&lt;h2 id="Epilogue"
class="section"&gt;Epilogue&lt;/h2&gt;&lt;p&gt;That was the last classic
paper. For the rest of the course, we went through some more recent
literature like Android, GFS, MapReduce, Haystack. Those are no less
filled with interesting ideas, but this article is already so long and I
want to stop here.&lt;/p&gt;&lt;p&gt;Incidentally, as I’m writing this,
there’s only two days left in &lt;span
class="oldstyle-num"&gt;2023&lt;/span&gt;. Judging from the tags, I
started this article in February &lt;span
class="oldstyle-num"&gt;15&lt;/span&gt; this year. Back then I didn’t
know it’ll take a whole year to finish; during half way I thought I’ll
never finish this. But look where we are now! Persistence really do get
things done eventually.&lt;/p&gt;&lt;p&gt;I also started a programming
project at around the same time, and that project (after much
head-scratches and typing late at night) is also coming to fruition
around this time. Looking back, I can’t believe that I actually pulled
both of these off in &lt;span class="oldstyle-num"&gt;2023&lt;/span&gt;,
oh my!&lt;/p&gt;</content>
</entry>
<entry>
<title>Remap modifiers in Linux Desktop and Alacritty</title>
<link href="https://archive.casouri.cc/note/2023/alacritty-modifier" />
<id>urn:uuid:19af9006-b4d9-11ed-aec6-9fe7ebf47538</id>
<updated>2023-02-24T22:53:00.00-05:00</updated>
<content type="html">&lt;p&gt;I’m used to macOS’s key binding, that means
for a desktop environment, I want three
things:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Caps lock act as
Control&lt;/li&gt;&lt;li&gt;System bindings are on the Command key (ie,
the Windows key), specifically, Command+C/V for
copy/paste&lt;/li&gt;&lt;li&gt;In the terminal emulator, Command+C/V
works as usual, and Ctrl+C/V sends respective control codes, as
usual&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I’m a simple man, and this is all I
want, but Thy Voice From Above hath spoken: &lt;em&gt;“lol no think
again”&lt;/em&gt;&lt;/p&gt;&lt;h2
id="Command+C/V%20for%20copy%20and%20paste"
class="section"&gt;Command+C/V for copy and
paste&lt;/h2&gt;&lt;p&gt;Remapping Caps lock to Control is easy and there
are plenty tutorials online for it. However, there is
&lt;em&gt;absolutely no way&lt;/em&gt; to change the default bindings of
copy/paste on a Linux desktop reliably. Because there is simply no
unified configuration for the keybinding of copy &amp;amp; paste. Qt
supports rebinding copy &amp;amp; paste and Gtk straight up &lt;a
id="footref:gtk" class="footref-anchor obviously-a-link" aria-label="Jump
to footnote" href="#footdef%3Agtk"&gt;doesn’t support it&lt;sup
class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;. On top of that,
applications bind their own keys and completely disregard the toolkit’s
setting, except in some toolkit widgets they use, then you have different
bindings within the same application.&lt;/p&gt;&lt;div id="footdef:gtk"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Agtk"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Gtk 3 seems to support it through CSS themes,
which is removed in Gtk 4. Anyway, I never got it to
work.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The whole situation is pretty
laughable, but live must go on. There are things like &lt;a
id="footref:xkeysnail" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote"
href="#footdef%3Axkeysnail"&gt;xkeysnail&lt;sup
class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt; that literally
intercepts every keystroke you type and translate them into other keys
depending on the application currently in focus. It requires some
nontrivial configuration and may or may not work reliably on X11, &lt;a
id="footref:wayland" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Awayland"&gt;definitely
doesn’t work on Wayland&lt;sup
class="inline-footref"&gt;3&lt;/sup&gt;&lt;/a&gt;, and I don’t know how
do I feel about a Python program running as root, intercepting and
translating every key I type. There are Rust alternatives, but I didn’t
have much luck with those either.&lt;/p&gt;&lt;div id="footdef:xkeysnail"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Axkeysnail"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;&lt;a
href="https://archive.casouri.cc/note/2023/alacritty-modifier/https:/github.com/mooz/xkeysnail"&gt;xkeysnail&lt;/a&gt;.
There are also projects like &lt;a
href="https://archive.casouri.cc/note/2023/alacritty-modifier/https:/github.com/rbreaves/kinto"&gt;kinto.sh&lt;/a&gt;
that pre-configures it for you on both Linux and Windows. (On Windows it
uses AutoHotkey.)&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:wayland"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Awayland"&gt;3&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;These type of program use X11 protocol, and
Wayland just doesn’t support program intercepting and translating other
program’s input.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The real way, the only
good way, to do it is to just swap Control with Super (ie, Command) at
X11 level. (Wayland picks it up so it works on Wayland too, or so I’m
told). Since we also want to swap Caps lock and Control, we actually do a
three-way swap:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Super →
Control&lt;/li&gt;&lt;li&gt;Control → Caps lock&lt;/li&gt;&lt;li&gt;Caps
lock → Super&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So now when you press
Command+C, the application gets Control+C.&lt;/p&gt;&lt;p&gt;To actually
swap the modifiers, we edit&lt;/p&gt;&lt;p&gt;&lt;span
class="mono"&gt;/usr/share/X11/xkb/keycodes/evdev&lt;/span&gt;&lt;/p&gt;&lt;p&gt;and
reboot—no adding command to X init or some config file or some other
crap. You edit the file, reboot, and it works, and keeps working. I
learned this from a &lt;a
href="https://archive.casouri.cc/note/2023/alacritty-modifier/https:/askubuntu.com/questions/929744/how-to-remap-key-in-ubuntu-17-10-wayland-up-key-to-shift"&gt;StackExchange
question&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Below are the exact edit you need
to make in that file, and their effect:&lt;/p&gt;&lt;p&gt;To map Left
Control (keycode 37) to Caps lock:&lt;br/&gt;Change
&lt;code&gt;&amp;lt;CAPS&amp;gt; = 66&lt;/code&gt; to
&lt;code&gt;&amp;lt;CAPS&amp;gt; = 37&lt;/code&gt;&lt;/p&gt;&lt;p&gt;To
map Left Super (keycode 133) to Control:&lt;br/&gt;Change
&lt;code&gt;&amp;lt;LCTL&amp;gt; = 37&lt;/code&gt; to
&lt;code&gt;&amp;lt;LCTL&amp;gt; 133&lt;/code&gt;&lt;/p&gt;&lt;p&gt;To
map Caps lock (keycode 66) to Left Super:&lt;br/&gt;Change
&lt;code&gt;&amp;lt;LWIN&amp;gt; = 133&lt;/code&gt; to
&lt;code&gt;&amp;lt;LWIN&amp;gt; = 66&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If
you use Emacs, you need to swap Super and Control back. Add this to your
&lt;span class="mono"&gt;init.el&lt;/span&gt;:&lt;/p&gt;&lt;pre
class="code-block"&gt;(setq x-super-keysym 'ctrl) (setq x-ctrl-keysym
'super)&lt;/pre&gt;&lt;h2 id="Command+C/V%20in%20terminal"
class="section"&gt;Command+C/V in terminal&lt;/h2&gt;&lt;p&gt;Now
Command+C/V works in normal applications, but in terminal, Caps lock+C/V
(appears as Super+C/V) will not send control keys and Command+C/V
(appears as Control+C/V) will not do what you want—again, you need to
swap Super and Control back, as we did for Emacs.&lt;/p&gt;&lt;p&gt;I
looked at every terminal emulator on Linux, and &lt;a
href="https://archive.casouri.cc/note/2023/alacritty-modifier/https:/github.com/alacritty/alacritty"&gt;Alacritty&lt;/a&gt;
is the only one that allows remapping modifier keys, has sane
configuration so that I can actually configure the remap, and has sane
dependencies.&lt;/p&gt;&lt;p&gt;You want to remap all
Control+&lt;em&gt;x&lt;/em&gt; keys to simply &lt;em&gt;x&lt;/em&gt;,
except for Control+C/V/F, etc, which are bind to actions like Copy,
Paste, SearchForward. And you want to remap all
Super+&lt;em&gt;x&lt;/em&gt; keys to Control+&lt;em&gt;x&lt;/em&gt;. In
effect, you have:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Command+C/V → Control+C/V
→ Copy/Paste&lt;/li&gt;&lt;li&gt;Caps lock+C/V → Super+C/V →
Control+C/V&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To do that, add this to the
beginning of &lt;span
class="mono"&gt;~/.config/alacritty/alacritty.yml&lt;/span&gt;:&lt;/p&gt;&lt;pre
class="code-block"&gt;key_bindings: - { key: At, mods: Control, chars:
"@" } - { key: A, mods: Control, chars: "a" } - { key: B, mods: Control,
chars: "b" } - { key: C, mods: Control, action: Copy } - { key: D, mods:
Control, chars: "d" } - { key: E, mods: Control, chars: "e" } - { key: F,
mods: Control, action: SearchForward } - { key: F, mods: Control, mode:
~Search, action: SearchForward } - { key: F, mods: Control|Shift, action:
SearchBackward } - { key: F, mods: Control|Shift, mode: ~Search, action:
SearchBackward } - { key: G, mods: Control, chars: "g" } - { key: H,
mods: Control, chars: "h" } - { key: I, mods: Control, chars: "i" } - {
key: J, mods: Control, chars: "j" } - { key: K, mods: Control, chars: "k"
} - { key: L, mods: Control, chars: "l" } - { key: M, mods: Control,
chars: "m" } - { key: N, mods: Control, action: CreateNewWindow } - {
key: O, mods: Control, chars: "o" } - { key: P, mods: Control, chars: "p"
} - { key: Q, mods: Control, action: Quit } - { key: R, mods: Control,
chars: "r" } - { key: S, mods: Control, chars: "s" } - { key: T, mods:
Control, chars: "t" } - { key: U, mods: Control, chars: "u" } - { key: V,
mods: Control, action: Paste } - { key: W, mods: Control, action: Quit }
- { key: X, mods: Control, chars: Cut } - { key: Y, mods: Control, chars:
"y" } - { key: Z, mods: Control, chars: "z" } - { key: LBracket, mods:
Control, chars: "[" } - { key: Backslash, mods: Control, chars: "\\" } -
{ key: RBracket, mods: Control, chars: "]" } - { key: Grave, mods:
Control, chars: "^" } - { key: Underline, mods: Control, chars: "_" } - {
key: At, mods: Super, chars: "\x00" } - { key: A, mods: Super, chars:
"\x01" } - { key: B, mods: Super, chars: "\x02" } - { key: C, mods:
Super, chars: "\x03" } - { key: D, mods: Super, chars: "\x04" } - { key:
E, mods: Super, chars: "\x05" } - { key: F, mods: Super, chars: "\x06" }
- { key: G, mods: Super, chars: "\x07" } - { key: H, mods: Super, chars:
"\x08" } - { key: I, mods: Super, chars: "\x09" } - { key: J, mods:
Super, chars: "\x0a" } - { key: K, mods: Super, chars: "\x0b" } - { key:
L, mods: Super, chars: "\x0c" } - { key: M, mods: Super, chars: "\x0d" }
- { key: N, mods: Super, chars: "\x0e" } - { key: O, mods: Super, chars:
"\x0f" } - { key: P, mods: Super, chars: "\x10" } - { key: Q, mods:
Super, chars: "\x11" } - { key: R, mods: Super, chars: "\x12" } - { key:
S, mods: Super, chars: "\x13" } - { key: T, mods: Super, chars: "\x14" }
- { key: U, mods: Super, chars: "\x15" } - { key: V, mods: Super, chars:
"\x16" } - { key: W, mods: Super, chars: "\x17" } - { key: X, mods:
Super, chars: "\x18" } - { key: Y, mods: Super, chars: "\x19" } - { key:
Z, mods: Super, chars: "\x1a" } - { key: LBracket, mods: Super, chars:
"\x1b" } - { key: Backslash, mods: Super, chars: "\x1c" } - { key:
RBracket, mods: Super, chars: "\x1d" } - { key: Grave, mods: Super,
chars: "\x1e" } - { key: Underline, mods: Super, chars: "\x1f"
}&lt;/pre&gt;&lt;p&gt;This configuration remaps &lt;a id="footref:ascii"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Aascii"&gt;all possible modifier keybindings available in
a terminal environment&lt;sup
class="inline-footref"&gt;4&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;&lt;div
id="footdef:ascii" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Aascii"&gt;4&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;See this &lt;a
href="https://archive.casouri.cc/note/2023/alacritty-modifier/https:/www.physics.udel.edu/~watson/scen103/ascii.html"&gt;ASCII
table&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;h2 id="Conclusion"
class="section"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;At this point you should
be able to copy &amp;amp; paste with Command+C/V in every application and
terminal, and use Caps lock as Control in Emacs and terminal,
&lt;em&gt;as it should be&lt;/em&gt;.&lt;/p&gt;</content>
</entry>
<entry>
<title>Bonjour Crash Course</title>
<link href="https://archive.casouri.cc/note/2023/bonjour" />
<id>urn:uuid:4a6f4716-b355-11ed-8033-5f84d0436494</id>
<updated>2023-02-23T00:37:00.00-05:00</updated>
<content type="html">&lt;p&gt;Bonjour is Apple’s implementation of
zeroconf networking. With Bonjour, you can plug in a printer into the
local network and expect it to show up on computers in the network,
without manually configuring anything. Linux’s implementation is
Avahi.&lt;/p&gt;&lt;p&gt;I recently needed to use Bonjour for some
project and read some documentation. This is an article summarizing some
concepts one needs to know in order to use a Bonjour library. This
article assumes some basic network knowledge (TPC/IP, DHCP, DNS,
multicast, unicast, network layers, etc).&lt;/p&gt;&lt;p&gt;Everything in
this article is based on Apple’s documentation at &lt;a
href="https://archive.casouri.cc/note/2023/bonjour/https:/developer.apple.com/library/archive/documentation/Cocoa/Conceptual/NetServices/Introduction.html#%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP40002445-SW1"&gt;&lt;em&gt;Bonjour
Overview&lt;/em&gt;&lt;/a&gt;. (If you want to read it, I recommend
starting with the “Bonjour Operations”
section.)&lt;/p&gt;&lt;p&gt;Bonjour operates in the link-local network
and provides three operations:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Registering
services&lt;/li&gt;&lt;li&gt;Discovering available
services&lt;/li&gt;&lt;li&gt;Resolving a service instance name to an
address and port&lt;/li&gt;&lt;/ol&gt;&lt;h2
id="Registering%20a%20service" class="section"&gt;Registering a
service&lt;/h2&gt;&lt;p&gt;When registering/publishing a service, you (or
rather the library) creates a mDNS (multicast DNS) responder with three
records: a service (SRV) record, a pointer (PTR) record, and a text (TXT)
record. The text record is for providing additional information and is
usually empty.&lt;/p&gt;&lt;h3 id="Service%20records"
class="subsection"&gt;Service records&lt;/h3&gt;&lt;p&gt;A service record
maps the service name to the host name and the port of the service. It
uses host name rather than an IP address so that the service can be on
multiple IP addresses at the same time (eg, on both IPv4 and
IPv6).&lt;/p&gt;&lt;p&gt;The full name of a service is made of three
parts, the &lt;em&gt;service instance name&lt;/em&gt;, the
&lt;em&gt;service type&lt;/em&gt;, and the &lt;em&gt;domain&lt;/em&gt;,
in the form of:&lt;/p&gt;&lt;pre class="code-block"&gt;&amp;lt;service
instance name&amp;gt;.&amp;lt;service
type&amp;gt;.&amp;lt;domain&amp;gt;&lt;/pre&gt;&lt;p&gt;The
&lt;em&gt;service instance name&lt;/em&gt; is a human-readable string
showed to end-users, encoded in &lt;span
class="oldstyle-num"&gt;utf-8&lt;/span&gt;, and can be up to &lt;span
class="oldstyle-num"&gt;63&lt;/span&gt; bytes long.&lt;/p&gt;&lt;p&gt;The
&lt;em&gt;service type&lt;/em&gt; is made of the &lt;em&gt;service
type&lt;/em&gt; and the &lt;em&gt;transport protocol&lt;/em&gt;, in the
form of &lt;code&gt;_type._protocol.&lt;/code&gt;. Eg,
&lt;code&gt;_ftp._tcp.&lt;/code&gt;. The underscore prefix is to
distinguish from domain names. Bonjour basically uses the format
described in &lt;a
href="https://archive.casouri.cc/note/2023/bonjour/https:/www.ietf.org/rfc/rfc2782.txt"&gt;&lt;span
class="oldstyle-num"&gt;RFC
2782&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Technically, both the type
and the protocol are standardized. If you want to add a service type, you
need to register it with &lt;a
href="https://archive.casouri.cc/note/2023/bonjour/https:/www.iana.org/form/ports-services"&gt;IANA&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The
&lt;em&gt;domain name&lt;/em&gt; is just like an Internet domain name,
eg, &lt;code&gt;www.apple.com.&lt;/code&gt;. In addition, there is a
pseudo domain, &lt;code&gt;local.&lt;/code&gt;, which refers to the
link-local network. (So you have Bonjour to thank when you ssh to LAN
hosts with
&lt;code&gt;&amp;lt;host&amp;gt;.local&lt;/code&gt;.)&lt;/p&gt;&lt;p&gt;Service
instance name, service type, and domain name together make up the full
name of a service instance. For example,&lt;/p&gt;&lt;pre
class="code-block"&gt;Alice’s Music
library._music._tcp.local.&lt;/pre&gt;&lt;h3 id="Pointer%20records"
class="subsection"&gt;Pointer records&lt;/h3&gt;&lt;p&gt;A pointer record
basically maps service types to full service names. Ie, it
maps&lt;/p&gt;&lt;pre class="code-block"&gt;&amp;lt;service
type&amp;gt;.&amp;lt;domain&amp;gt;&lt;/pre&gt;&lt;p&gt;to&lt;/p&gt;&lt;pre
class="code-block"&gt;&amp;lt;service instance
name&amp;gt;.&amp;lt;service
type&amp;gt;.&amp;lt;domain&amp;gt;&lt;/pre&gt;&lt;p&gt;This way you can
search for a type of service and get a list of available service
instances.&lt;/p&gt;&lt;h3 id="Publishing%20(advertising)"
class="subsection"&gt;Publishing (advertising)&lt;/h3&gt;&lt;p&gt;When
publishing a service, a host will first make sure the intended service
instance name is not taken by someone else, by broadcasting request to
that service instance name: if there is a response, the name is taken. If
someone else has taken it, the host will append a number to the service
instance name and increment the number until it gets a name that no one
is using.&lt;/p&gt;&lt;p&gt;If you use a library, this part is taken care
for you. But it’s good to know how does Bonjour avoid name
conflicts.&lt;/p&gt;&lt;h2 id="Discovering%20services"
class="section"&gt;Discovering services&lt;/h2&gt;&lt;p&gt;To discover
service instances, you first request PTR records by mDNS, and get back a
list of service instance names. …And that’s it. The host will save those
names, and resolve a service name into actual address and port every time
it needs to use the service.&lt;/p&gt;&lt;h2
id="Resolving%20service%20names" class="section"&gt;Resolving service
names&lt;/h2&gt;&lt;p&gt;By the discovery step, we collected some service
instance names that are available for us in the local network. The next
step is to pick one, resolve it into an actual address and connect to
it.&lt;/p&gt;&lt;p&gt;The host will send out a mDNS request for the
service instance name, and get back a host name and a port. It then sends
out a mDNS request for the host name and get an IP address. Now it can
connect to the address on the port and start using the
service.&lt;/p&gt;</content>
</entry>
<entry>
<title>Tree-sitter Starter Guide</title>
<link href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide" />
<id>urn:uuid:afb76ba2-8a39-11ed-998c-8f06c8e638dc</id>
<updated>2023-01-15T00:00:00.00-05:00</updated>
<content type="html">&lt;p&gt;This guide gives you a starting point on
writing a tree-sitter major mode. Remember, don’t panic and check your
manuals!&lt;/p&gt;&lt;h2 id="Build%20Emacs%20with%20tree-sitter"
class="section"&gt;Build Emacs with tree-sitter&lt;/h2&gt;&lt;p&gt;You
can either install tree-sitter by your package manager, or
from&lt;br/&gt;source:&lt;/p&gt;&lt;pre class="code-block"&gt;git clone
https://github.com/tree-sitter/tree-sitter.git cd tree-sitter make make
install&lt;/pre&gt;&lt;p&gt;To build and run Emacs 29:&lt;/p&gt;&lt;pre
class="code-block"&gt;git clone
https://git.savannah.gnu.org/git/emacs.git -b emacs-29 cd emacs
./autogen.sh ./configure make src/emacs&lt;/pre&gt;&lt;p&gt;Require the
tree-sitter package with &lt;code&gt;(require 'treesit)&lt;/code&gt;.
Note that tree-sitter always appear as &lt;code&gt;treesit&lt;/code&gt;
in symbols. Now check if Emacs is successfully built with tree-sitter
library by evaluating
&lt;code&gt;(treesit-available-p)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Tree-sitter
stuff in Emacs can be categorized into two parts: the tree-sitter API
itself, and integration with fontification, indentation, Imenu, etc. You
can use shortdoc to glance over all the tree-sitter API functions by
typing &lt;code&gt;M-x shortdoc RET treesit RET&lt;/code&gt;. The
integration are described in the rest of the post.&lt;/p&gt;&lt;h2
id="Install%20language%20definitions" class="section"&gt;Install language
definitions&lt;/h2&gt;&lt;p&gt;Tree-sitter by itself doesn’t know how to
parse any particular language. It needs the language grammar (a dynamic
library) for a language to be able to parse it.&lt;/p&gt;&lt;p&gt;First,
find the repository for the language grammar, eg, &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/https:/github.com/tree-sitter/tree-sitter-python"&gt;tree-sitter-python&lt;/a&gt;.
Take note of the Git clone URL of it, eg,
&lt;code&gt;https://github.com/tree-sitter/tree-sitter-python.git&lt;/code&gt;.
Now check where is the parser.c file in that repository, usually it’s in
&lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Make sure you have Git, C
and C++ compiler, and run the
&lt;code&gt;treesit-install-grammar&lt;/code&gt; command, it will prompt
for the URL and the directory of parser.c, leave other prompts at default
unless you know what you are doing.&lt;/p&gt;&lt;p&gt;You can also
manually clone the repository and compile it, and put the dynamic library
at a standard library location. Emacs will be able to find it. If you
wish to put it somewhere else, set
&lt;code&gt;treesit-extra-load-path&lt;/code&gt; so Emacs can find
it.&lt;/p&gt;&lt;h2 id="Tree-sitter%20major%20modes"
class="section"&gt;Tree-sitter major modes&lt;/h2&gt;&lt;p&gt;Tree-sitter
modes should be separate major modes, usually named
&lt;code&gt;xxx-ts-mode&lt;/code&gt;. I know I said tree-sitter always
appear as &lt;code&gt;treesit&lt;/code&gt; in symbols, this is the only
exception.&lt;/p&gt;&lt;p&gt;If the tree-sitter mode and the “native”
mode could share some setup code, you can create a “base mode”, which
only contains the common setup. For example, there is python-base-mode
(shared), and both python-mode (native), and python-ts-mode (tree-sitter)
derives from it.&lt;/p&gt;&lt;p&gt;In the tree-sitter mode, check if we
can use tree-sitter with &lt;code&gt;treesit-ready-p&lt;/code&gt;, it
will emit a warning if tree-sitter is not ready (tree-sitter not built
with Emacs, can’t find the language grammar, buffer too large,
etc).&lt;/p&gt;&lt;h2 id="Fontification"
class="section"&gt;Fontification&lt;/h2&gt;&lt;p&gt;Tree-sitter works
like this: It parses the buffer and produces a &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/https:/en.wikipedia.org/wiki/Parse_tree"&gt;&lt;em&gt;parse
tree&lt;/em&gt;&lt;/a&gt;. You provide a query made of patterns and
capture names, tree-sitter finds the nodes that match these patterns, tag
the corresponding capture names onto the nodes and return them to you.
The query function returns a list of &lt;code&gt;(capture-name .
node)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For fontification, we simply use
face names as capture names. And the captured node will be fontified in
their capture name (the face).&lt;/p&gt;&lt;p&gt;The capture name could
also be a function, in which case &lt;code&gt;(NODE OVERRIDE START
END)&lt;/code&gt; is passed to the function for fontification.
&lt;code&gt;START&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; are the
start and end of the region to be fontified. The function should only
fontify within that region. The function should also allow more optional
arguments with &lt;code&gt;&amp;amp;rest _&lt;/code&gt;, for future
extensibility. For &lt;code&gt;OVERRIDE&lt;/code&gt; check out the
docstring of
&lt;code&gt;treesit-font-lock-rules&lt;/code&gt;.&lt;/p&gt;&lt;h3
id="Query%20syntax" class="subsection"&gt;Query
syntax&lt;/h3&gt;&lt;p&gt;There are two types of nodes: “named nodes”,
like &lt;code&gt;(identifier)&lt;/code&gt;,
&lt;code&gt;(function_definition)&lt;/code&gt;, and “anonymous nodes”,
like &lt;code&gt;"return"&lt;/code&gt;, &lt;code&gt;"def"&lt;/code&gt;,
&lt;code&gt;"("&lt;/code&gt;, &lt;code&gt;";"&lt;/code&gt;. Parent-child
relationship is expressed as&lt;/p&gt;&lt;pre
class="code-block"&gt;(parent (child) (child) (child
(grand_child)))&lt;/pre&gt;&lt;p&gt;Eg, an argument list &lt;code&gt;(1,
"3", 1)&lt;/code&gt; would be:&lt;/p&gt;&lt;pre
class="code-block"&gt;(argument_list "(" (number) (string) (number)
")")&lt;/pre&gt;&lt;p&gt;Children could have field
names:&lt;/p&gt;&lt;pre class="code-block"&gt;(function_definition name:
(identifier) type: (identifier))&lt;/pre&gt;&lt;p&gt;To match any one in
the list:&lt;/p&gt;&lt;pre class="code-block"&gt;["true" "false"
"none"]&lt;/pre&gt;&lt;p&gt;Capture names can come after any node in the
pattern:&lt;/p&gt;&lt;pre class="code-block"&gt;(parent (child) @child)
@parent&lt;/pre&gt;&lt;p&gt;The query above captures both the parent and
the child.&lt;/p&gt;&lt;p&gt;The query below captures all the keywords
with capture
name&lt;br/&gt;&lt;code&gt;"keyword"&lt;/code&gt;:&lt;/p&gt;&lt;pre
class="code-block"&gt;["return" "continue" "break"]
@keyword&lt;/pre&gt;&lt;p&gt;These are the common syntax, check out the
full syntax in the manual: &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/html-manual/Pattern-Matching.html"&gt;Pattern
Matching&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="Query%20references"
class="subsection"&gt;Query references&lt;/h3&gt;&lt;p&gt;But how do one
come up with the queries? Take python for an example, open any python
source file, type &lt;code&gt;M-x treesit-explore-mode RET&lt;/code&gt;.
You should see the parse tree in a separate window, automatically updated
as you select text or edit the buffer. Besides this, you can consult the
grammar of the language definition. For example, Python’s grammar file is
at&lt;/p&gt;&lt;p&gt;&lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/https:/github.com/tree-sitter/tree-sitter-python/blob/master/grammar.js"&gt;https://github.com/tree-sitter/tree-sitter-python/blob/master/grammar.js&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Neovim
also has a bunch of &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/https:/github.com/nvim-treesitter/nvim-treesitter/tree/master/queries"&gt;queries
to reference from&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The manual explains how to
read grammar files in the bottom of &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/html-manual/Language-Grammar.html"&gt;Language
Grammar&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="Debugging%20queries"
class="subsection"&gt;Debugging queries&lt;/h3&gt;&lt;p&gt;If your query
has problems, use &lt;code&gt;treesit-query-validate&lt;/code&gt; to
debug the query. It will pop a buffer containing the query (in text
format) and mark the offending part in red. Set
&lt;code&gt;treesit--font-lock-verbose&lt;/code&gt; to
&lt;code&gt;t&lt;/code&gt; if you want the font-lock function to report
what it’s doing.&lt;/p&gt;&lt;h3 id="Set%20up%20font-lock"
class="subsection"&gt;Set up font-lock&lt;/h3&gt;&lt;p&gt;To enable
tree-sitter font-lock, set
&lt;code&gt;treesit-font-lock-settings&lt;/code&gt; and
&lt;code&gt;treesit-font-lock-feature-list&lt;/code&gt; buffer-locally
and call &lt;code&gt;treesit-major-mode-setup&lt;/code&gt;. For example,
see &lt;code&gt;python--treesit-settings&lt;/code&gt; in python.el. Below
is a snippet of it.&lt;/p&gt;&lt;p&gt;Note that like the current
font-lock system, if the to-be-fontified region already has a face (ie,
an earlier match fontified part/all of the region), the new face is
discarded rather than applied. If you want later matches always override
earlier matches, use the &lt;code&gt;:override&lt;/code&gt;
keyword.&lt;/p&gt;&lt;p&gt;Each rule should have a
&lt;code&gt;:feature&lt;/code&gt;, like
&lt;code&gt;function-name&lt;/code&gt;,
&lt;code&gt;string-interpolation&lt;/code&gt;,
&lt;code&gt;builtin&lt;/code&gt;, etc. This way users can enable/disable
each feature individually.&lt;/p&gt;&lt;p&gt;Read the manual section
&lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/html-manual/Parser_002dbased-Font-Lock.html"&gt;Parser-based
Font-Lock&lt;/a&gt; for more detail.&lt;/p&gt;&lt;p&gt;Example from
python.el:&lt;/p&gt;&lt;pre class="code-block"&gt;(defvar
python--treesit-settings (treesit-font-lock-rules :feature 'comment
:language 'python '((comment) @font-lock-comment-face) :feature 'string
:language 'python '((string) @python--treesit-fontify-string) :feature
'string-interpolation :language 'python :override t '((interpolation
(identifier) @font-lock-variable-name-face)) ...))&lt;/pre&gt;&lt;p&gt;In
&lt;code&gt;python-ts-mode&lt;/code&gt;:&lt;/p&gt;&lt;pre
class="code-block"&gt;(treesit-parser-create 'python) (setq-local
treesit-font-lock-settings python--treesit-settings) (setq-local
treesit-font-lock-feature-list '(( comment definition) ( keyword string
type) ( assignment builtin constant decorator escape-sequence number
property string-interpolation ) ( bracket delimiter function operator
variable))) ...
(treesit-major-mode-setup)&lt;/pre&gt;&lt;p&gt;Concretely, something like
this:&lt;/p&gt;&lt;pre class="code-block"&gt;(define-derived-mode
python-ts-mode python-base-mode "Python" "Major mode for editing Python
files, using tree-sitter library. \\{python-ts-mode-map}" :syntax-table
python-mode-syntax-table (when (treesit-ready-p 'python)
(treesit-parser-create 'python) (setq-local
treesit-font-lock-feature-list '(( comment definition) ( keyword string
type) ( assignment builtin constant decorator escape-sequence number
property string-interpolation ) ( bracket delimiter function operator
variable))) (setq-local treesit-font-lock-settings
python--treesit-settings) (setq-local imenu-create-index-function
#'python-imenu-treesit-create-index) (setq-local
treesit-defun-type-regexp (rx (or "function" "class") "_definition"))
(setq-local treesit-defun-name-function #'python--treesit-defun-name)
(treesit-major-mode-setup) (when python-indent-guess-indent-offset
(python-indent-guess-indent-offset))))&lt;/pre&gt;&lt;h2 id="Indentation"
class="section"&gt;Indentation&lt;/h2&gt;&lt;p&gt;Indentation works like
this: We have a bunch of rules that look like&lt;/p&gt;&lt;pre
class="code-block"&gt;(MATCHER ANCHOR OFFSET)&lt;/pre&gt;&lt;p&gt;When
the indenting a line, let &lt;code&gt;NODE&lt;/code&gt; be the node at
the beginning of the current line, we pass this node to the
&lt;code&gt;MATCHER&lt;/code&gt; of each rule, one of them will match the
node (eg, “this node is a closing bracket!”). Then we pass the node to
the &lt;code&gt;ANCHOR&lt;/code&gt;, which returns a point (eg, the
beginning of &lt;code&gt;NODE&lt;/code&gt;’s parent). We find the column
number of that point (eg, 4), add &lt;code&gt;OFFSET&lt;/code&gt; to it
(eg, 0), and that is the column we want to indent the current line to (4
+ 0 = 4).&lt;/p&gt;&lt;p&gt;Matchers and anchors are functions that takes
&lt;code&gt;(NODE PARENT BOL &amp;amp;rest _)&lt;/code&gt;. Matches
return nil/non-nil for no match/match, and anchors return the anchor
point. An Offset is usually a number or a variable, but it can also be a
function. Below are some convenient builtin matchers and
anchors.&lt;/p&gt;&lt;p&gt;For &lt;code&gt;MATHCER&lt;/code&gt; we
have&lt;/p&gt;&lt;pre class="code-block"&gt;(parent-is TYPE) =&amp;gt;
matches if PARENT’s type matches TYPE as regexp (node-is TYPE) =&amp;gt;
matches NODE’s type (query QUERY) =&amp;gt; matches if querying PARENT
with QUERY captures NODE. (match NODE-TYPE PARENT-TYPE NODE-FIELD
NODE-INDEX-MIN NODE-INDEX-MAX) =&amp;gt; checks everything. If an
argument is nil, don’t match that. Eg, (match nil TYPE) is the same as
(parent-is TYPE)&lt;/pre&gt;&lt;p&gt;For &lt;code&gt;ANCHOR&lt;/code&gt;
we have&lt;/p&gt;&lt;pre class="code-block"&gt;first-sibling =&amp;gt;
start of the first sibling parent =&amp;gt; start of parent parent-bol
=&amp;gt; BOL of the line parent is on. prev-sibling =&amp;gt; start of
previous sibling no-indent =&amp;gt; current position (don’t indent)
prev-line =&amp;gt; start of previous line&lt;/pre&gt;&lt;p&gt;There is
also a manual section for indent: &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/html-manual/Parser_002dbased-Indentation.html"&gt;Parser-based
Indentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;When writing indent rules, you
can use &lt;code&gt;treesit-check-indent&lt;/code&gt; to&lt;br/&gt;check
if your indentation is correct. To debug what went wrong,
set&lt;br/&gt;&lt;code&gt;treesit--indent-verbose&lt;/code&gt; to
&lt;code&gt;t&lt;/code&gt;. Then when you indent, Emacs&lt;br/&gt;tells
you which rule is applied in the echo area.&lt;/p&gt;&lt;p&gt;Here is an
example:&lt;/p&gt;&lt;pre class="code-block"&gt;(defvar
typescript-mode-indent-rules (let ((offset 'typescript-indent-offset))
`((typescript ;; This rule matches if node at point is ")", ANCHOR is the
;; parent node’s BOL, and offset is 0. ((node-is ")") parent-bol 0)
((node-is "]") parent-bol 0) ((node-is "&amp;gt;") parent-bol 0)
((node-is "\\.") parent-bol ,offset) ((parent-is "ternary_expression")
parent-bol ,offset) ((parent-is "named_imports") parent-bol ,offset)
((parent-is "statement_block") parent-bol ,offset) ((parent-is
"type_arguments") parent-bol ,offset) ((parent-is "variable_declarator")
parent-bol ,offset) ((parent-is "arguments") parent-bol ,offset)
((parent-is "array") parent-bol ,offset) ((parent-is "formal_parameters")
parent-bol ,offset) ((parent-is "template_substitution") parent-bol
,offset) ((parent-is "object_pattern") parent-bol ,offset) ((parent-is
"object") parent-bol ,offset) ((parent-is "object_type") parent-bol
,offset) ((parent-is "enum_body") parent-bol ,offset) ((parent-is
"arrow_function") parent-bol ,offset) ((parent-is
"parenthesized_expression") parent-bol ,offset)
...))))&lt;/pre&gt;&lt;p&gt;Then you set
&lt;code&gt;treesit-simple-indent-rules&lt;/code&gt; to your rules, and
call &lt;code&gt;treesit-major-mode-setup&lt;/code&gt;.&lt;/p&gt;&lt;h2
id="Imenu" class="section"&gt;Imenu&lt;/h2&gt;&lt;p&gt;Set
&lt;code&gt;treesit-simple-imenu-settings&lt;/code&gt; and call
&lt;code&gt;treesit-major-mode-setup&lt;/code&gt;.&lt;/p&gt;&lt;h2
id="Navigation" class="section"&gt;Navigation&lt;/h2&gt;&lt;p&gt;Set
&lt;code&gt;treesit-defun-type-regexp&lt;/code&gt;,
&lt;code&gt;treesit-defun-name-function&lt;/code&gt;, and call
&lt;code&gt;treesit-major-mode-setup&lt;/code&gt;.&lt;/p&gt;&lt;h2
id="C-like%20languages" class="section"&gt;C-like
languages&lt;/h2&gt;&lt;p&gt;[Update: Common functions described in this
section have been moved from c-ts-mode.el to c-ts-common.el. I also made
some changes to the functions and variables
themselves.]&lt;/p&gt;&lt;p&gt;c-ts-common.el has some goodies for
handling indenting and filling block comments.&lt;/p&gt;&lt;p&gt;These
two rules should take care of indenting block comments.&lt;/p&gt;&lt;pre
class="code-block"&gt;((and (parent-is "comment")
c-ts-common-looking-at-star) c-ts-common-comment-start-after-first-star
-1) ((parent-is "comment") prev-adaptive-prefix
0)&lt;/pre&gt;&lt;p&gt;&lt;code&gt;standalone-parent&lt;/code&gt; should
be enough for most of the cases where you want to "indent one level
further", for example, a statement inside a block. Normally
&lt;code&gt;standalone-parent&lt;/code&gt; returns the parent’s start
position as the anchor, but if the parent doesn’t start on its own line,
it returns the parent’s parent instead, and so on and so forth. This
works pretty well in practice. For example, indentation rules for
statements and brackets would look like:&lt;/p&gt;&lt;pre
class="code-block"&gt;;; Statements in {} block. ((parent-is
"compound_statement") standalone-parent x-mode-indent-offset) ;; Closing
bracket. ((node-is "}") standalone-parent x-mode-indent-offset) ;;
Opening bracket. ((node-is "compound_statement") standalone-parent
x-mode-indent-offset)&lt;/pre&gt;&lt;p&gt;You’ll need additional rules
for “brackless” if/for/while statements, eg&lt;/p&gt;&lt;pre
class="code-block"&gt;if (true) return 0; else return
1;&lt;/pre&gt;&lt;p&gt;You need rules like these:&lt;/p&gt;&lt;pre
class="code-block"&gt;((parent-is "if_statement") standalone-parent
x-mode-indent-offset)&lt;/pre&gt;&lt;p&gt;Finally,
&lt;code&gt;c-ts-common-comment-setup&lt;/code&gt; will set up comment
and filling for you.&lt;/p&gt;&lt;h2 id="Multi-language%20modes"
class="section"&gt;Multi-language modes&lt;/h2&gt;&lt;p&gt;Refer to the
manual: &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/html-manual/Multiple-Languages.html"&gt;Multiple
Languages&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="Common%20Tasks"
class="section"&gt;Common Tasks&lt;/h2&gt;&lt;p&gt;&lt;code&gt;M-x
shortdoc RET treesit RET&lt;/code&gt; will give you a complete
list.&lt;/p&gt;&lt;p&gt;How to...&lt;/p&gt;&lt;p&gt;&lt;b&gt;Get the
buffer text corresponding to a node?&lt;/b&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;(treesit-node-text node)&lt;/pre&gt;&lt;p&gt;Don’t
confuse this with
&lt;code&gt;treesit-node-string&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Scan
the whole tree for stuff?&lt;/b&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;(treesit-search-subtree) (treesit-search-forward)
(treesit-induce-sparse-tree)&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Find/move to to
next node that...?&lt;/b&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;(treesit-search-forward node ...)
(treesit-search-forward-goto node ...)&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Get
the root node?&lt;/b&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;(treesit-buffer-root-node)&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Get
the node at point?&lt;/b&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;(treesit-node-at (point))&lt;/pre&gt;</content>
</entry>
<entry>
<title>Tree-sitter in Emacs 29 and Beyond</title>
<link href="https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29" />
<id>urn:uuid:fac62c4a-8599-11ed-a0db-5f97535421d3</id>
<updated>2023-01-15T00:00:00.00-05:00</updated>
<content type="html">&lt;p&gt;Emacs’ release branch is now on complete
feature freeze, meaning absolutely only bug fixes can happen on it. Now
is a good time to talk about the state of &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/https:/tree-sitter.github.io/tree-sitter"&gt;tree-sitter&lt;/a&gt;
in Emacs: what do you get in Emacs 29, what you don’t, and what would
happen going forward.&lt;/p&gt;&lt;h2
id="What%E2%80%99s%20in%20Emacs%2029" class="section"&gt;What’s in Emacs
29&lt;/h2&gt;&lt;p&gt;From a pure user’s perspective, Emacs 29 just adds
some new built-in major modes which look more-or-less identical to the
old ones. There aren’t any flashy cool features either. That sounds
disappointing, but there are a lot of new stuff under the hood, a solid
base upon which exciting things can emerge.&lt;/p&gt;&lt;p&gt;If Emacs 29
is built with the tree-sitter library, you have access to most of the
functions in its C API, including creating parsers, parsing text,
retrieving nodes from the parse tree, finding the parent/child/sibling
node, pattern matching nodes with a DSL, etc. You also get a bunch of
convenient functions built upon the primitive functions, like searching
for a particular node in the parse tree, cherry picking nodes and
building a sparse tree out of the parse tree, getting the node at point,
etc. You can type &lt;code&gt;M-x shortdoc RET treesit RET&lt;/code&gt;
to view a list of tree-sitter functions. And because it’s Emacs, there is
comprehensive manual coverage for everything you need to know. It’s in
“Section 37, Parsing Program Source” of Emacs Lisp Reference
Manual.&lt;/p&gt;&lt;p&gt;Emacs 29 has built-in tree-sitter major modes
for C, C++, C#, Java, Rust, Go, Python, Javascript, Typescript, JSON,
YAML, TOML, CSS, Bash, Dockerfile, CMake file. We tried to extend
existing modes with tree-sitter at first but it didn’t work out too well,
so now tree-sitter lives in separate major modes. The tree-sitter modes
are usually called &lt;code&gt;xxx-ts-mode&lt;/code&gt;, like
&lt;code&gt;c-ts-mode&lt;/code&gt; and
&lt;code&gt;python-ts-mode&lt;/code&gt;. The simplest way to enable them
is to use &lt;code&gt;major-mode-remap-alist&lt;/code&gt;. For
example,&lt;/p&gt;&lt;pre class="code-block"&gt;(add-to-list
'major-mode-remap-alist '(c-mode . c-ts-mode))&lt;/pre&gt;&lt;p&gt;The
built-in tree-sitter major modes have support for font-lock (syntax
highlight), indentation, Imenu, which-func, and defun
navigation.&lt;/p&gt;&lt;p&gt;For major mode developers, Emacs 29
includes integration for these features for tree-sitter, so major modes
only need to supply language-specific information, and Emacs takes care
of plugging tree-sitter into font-lock, indent, Imenu,
etc.&lt;/p&gt;&lt;h3 id="Fontification"
class="subsection"&gt;Fontification&lt;/h3&gt;&lt;p&gt;In tree-sitter
major modes, fontification is categorized into “features”, like
“builtin”, “function”, “variable”, “operator”, etc. You can choose what
“features” to enable for a mode. If you are feeling adventurous, it is
also possible to add your own fontification rules.&lt;/p&gt;&lt;p&gt;To
add/remove features for a major mode, use
&lt;code&gt;treesit-font-lock-recompute-features&lt;/code&gt; in its mode
hook. For example,&lt;/p&gt;&lt;pre class="code-block"&gt;(defun
c-ts-mode-setup () (treesit-font-lock-recompute-features '(function
variable) '(definition))) (add-hook 'c-ts-mode-hook
#'c-ts-mode-setup)&lt;/pre&gt;&lt;p&gt;Features are grouped into
decoration levels, right now there are 4 levels and the default level is
3. If you want to program in skittles, set
&lt;code&gt;treesit-font-lock-level&lt;/code&gt; to 4 ;-)&lt;/p&gt;&lt;h3
id="Language%20grammars" class="subsection"&gt;Language
grammars&lt;/h3&gt;&lt;p&gt;Tree-sitter major modes need corresponding
langauge grammar to work. These grammars come in the form of dynamic
libraries. Ideally the package manager will build them when building
Emacs, like with any other dynamic libraries. But they can’t cover every
language grammar out there, so you probably need to build them yourself
from time to time. Emacs has a command for it:
&lt;code&gt;treesit-install-language-grammar&lt;/code&gt;. It asks you
for the Git repository and other stuff and builds the dynamic library.
Third-party major modes can instruct their users to add the recipe for
building a language grammar like this:&lt;/p&gt;&lt;pre
class="code-block"&gt;(add-to-list 'treesit-language-source-alist
'(python
"https://github.com/tree-sitter/tree-sitter-python.git"))&lt;/pre&gt;&lt;p&gt;Then
typing &lt;code&gt;M-x treesit-install-language-grammar RET
python&lt;/code&gt; builds the language grammar without
user-input.&lt;/p&gt;&lt;h3 id="Other%20features"
class="subsection"&gt;Other features&lt;/h3&gt;&lt;p&gt;Things like
indentation, Imenu, navigation, etc, should just
work.&lt;/p&gt;&lt;p&gt;There is no code-folding, selection expansion,
and structural navigation (except for defun) in Emacs 29. Folding and
expansion should be trivial to implement in existing third-party
packages. Structural navigation needs careful design and nontrivial
changes to existing commands (ie, more work). So not in 29,
unfortunately.&lt;/p&gt;&lt;h2 id="Future%20plans"
class="section"&gt;Future plans&lt;/h2&gt;&lt;h3 id="Navigation"
class="subsection"&gt;Navigation&lt;/h3&gt;&lt;p&gt;The tree-sitter
integration is far from complete. As mentioned earlier, structural
navigation is still in the works. Right now Emacs allows you to define a
“thing” by a regexp that matches node types, plus optionally a filter
function that filters out nodes that matches the regexp but isn’t really
the “thing”. Given the definition of a “thing”, Emacs has functions for
finding the “things” around point
(&lt;code&gt;treesit--things-around&lt;/code&gt;), finding the “thing” at
point (&lt;code&gt;treesit--thing-at-point&lt;/code&gt;), and navigating
around “things” (&lt;code&gt;treesit--navigate-thing&lt;/code&gt;).
Besides moving around, these functions should be also useful for other
things like folding blocks. Beware that, as the double dash suggests,
these functions are experimental and could change.&lt;/p&gt;&lt;p&gt;I
also have an idea for “abstract list elements”. Basically an abstract
list element is anything repeatable in a grammar: defun, statement,
arguments in argument list, etc. These things appear at every level of
the grammar and seems like a very good unit for
navigation.&lt;/p&gt;&lt;h3 id="Context%20extraction"
class="subsection"&gt;Context extraction&lt;/h3&gt;&lt;p&gt;There is also
potential for language-agnostic “context extraction” (for the lack of a
better term) with tree-sitter. Right now we can get the name and span of
the defun at point, but it doesn’t have to stop there, we can also get
the parameter list, the type of the return value, the class/trait of the
function, etc. Because it’s language agnostic, any tool using this
feature will work on many languages all at once.&lt;/p&gt;&lt;p&gt;In
fact, you can already extract useful things, to some degree, with the
fontification queries written by major modes: using the query intended
for the &lt;code&gt;variable&lt;/code&gt; query, I can get all the
variable nodes in a given range.&lt;/p&gt;&lt;p&gt;There are some
unanswered questions though: (1) What would be the best function
interface and data structure for such a feature? Should it use a plist
like &lt;code&gt;(:name ... :params ...)&lt;/code&gt;, or a cl-struct?
(2) If a language is different enough from the “common pattern”, how
useful does this feature remains? For example, there isn’t a clear
parameter list in Haskell, and there could be several defun bodies that
defines the same function. (3) Is this feature genuinely useful, or is it
just something that looks cool? Only time and experiments can tell, I’m
looking forward to see what people will do with tree-sitter in the wild
:-)&lt;/p&gt;&lt;h3 id="Major%20mode%20fallback"
class="subsection"&gt;Major mode fallback&lt;/h3&gt;&lt;p&gt;Right now
there is no automatic falling back from tree-sitter major modes to
“native” major modes when the tree-sitter library or language grammar is
missing. Doing it right requires some change to the auto-mode facility.
Hopefully we’ll see a good solution for it in Emacs 30. Right now, if you
need automatic fallback, try something like this:&lt;/p&gt;&lt;pre
class="code-block"&gt;(define-derived-mode python-auto-mode prog-mode
"Python Auto" "Automatically decide which Python mode to use." (if
(treesit-ready-p 'python t) (python-ts-mode)
(python-mode)))&lt;/pre&gt;&lt;h3 id="Other%20plans"
class="subsection"&gt;Other plans&lt;/h3&gt;&lt;p&gt;Existing tree-sitter
major modes are pretty basic and doesn’t have many bells and whistles,
and I’m sure there are rough corners here and there. Of course, these
things will improve over time.&lt;/p&gt;&lt;p&gt;Tree-sitter is very
different and very new, and touches many parts of Emacs, so no one has
experience with it and no one knows exactly how should it look like.
Emacs 29 will give us valuable experience and feedback, and we can make
it better and better in the future.&lt;/p&gt;&lt;p&gt;If you are
interested, get involved! Read &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/note/2020/contributing-to-emacs/index.html"&gt;Contributing
to Emacs&lt;/a&gt; for some tips in getting involved with the Emacs
development. Read &lt;a
href="https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/note/2023/tree-sitter-starter-guide/index.html"&gt;Tree-sitter
Starter Guide&lt;/a&gt; if you want to write a major mode using
tree-sitter. And of course, docstrings and the manual is always your
friend. If you have questions, you can ask on Reddit, or comment in this
post’s public inbox (see the footer).&lt;/p&gt;</content>
</entry>
<entry>
<title>This Site is Changing its Domain</title>
<link href="https://archive.casouri.cc/note/2022/domain-change" />
<id>urn:uuid:ff14d65c-6726-11ed-b927-c76ea0aa4499</id>
<updated>2022-11-18T00:00:00.00-05:00</updated>
<content type="html">&lt;p&gt;Right now this site resides on &lt;a
href="https://archive.casouri.cc/note/2022/domain-change/https:/archive.casouri.cat"&gt;archive.casouri.cat&lt;/a&gt;,
I really love the .cat TLD. Alas, .cat was never meant for generic use
and my site doesn't comply to its requirements, which is to use and
promote Catalan language and culture. I don’t want to wake up one day
recieving a take down notice, however slim the possibility is. Plus, the
longer this site uses this domain, the more backlinks to it, the harder
to move on.&lt;/p&gt;&lt;p&gt;Moving forward, this site will be on &lt;a
href="https://archive.casouri.cc/note/2022/domain-change/https:/archive.casouri.cc"&gt;archive.casouri.cc&lt;/a&gt;.
I'll keep the .cat domain around for a few years. In the meantime the
.cat domain will redirect to the .cc domain by 301 redirect. The whole
site is archived on the Wayback Machine. Hopefully someone in the future
clicking on my .cat link knows about Wayback Machine and can view the
page.&lt;/p&gt;&lt;p&gt;If you have a link to the .cat domain, you might
want to edit the link to point to the new domain. Sorry for the
incovenience! Fortunately there are so few links to my site
:-)&lt;/p&gt;</content>
</entry>
<entry>
<title>NAT traversal: STUN, TURN, ICE, what do they actually do?</title>
<link href="https://archive.casouri.cc/note/2022/nat-what-do-they-do" />
<id>urn:uuid:84e3d816-a8c6-11ec-bcbd-af8069bc8361</id>
<updated>2022-03-20T20:26:00.00-05:00</updated>
<content type="html">&lt;p&gt;When searching for NAT traversal I found
all these protocols but no one can tell me what do they essentially do to
traverse NAT, surely not by magic? Turns out it’s conceptually very
simple.&lt;/p&gt;&lt;p&gt;What NAT traversal does is not really “punching
holes” on the NAT, or delivering message through some tunnel, or some
demotic portals, but to simply find the public address:port that can can
reach &lt;em&gt;me&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;If I’m behind a NAT or
even multiple NAT’s, my packets are relayed by these NAT’s and they
appear on the public Internet at the out-most NAT’s address and port. And
reply packets going to that address:port are relayed back to me. So, in
some sense, I still got a public address:port that can reach me on the
public Internet. The purpose of NAT traversal is to find that public
address:port.&lt;/p&gt;&lt;p&gt;That’s basically what the initial/classic
STUN (&lt;a
href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc3489"&gt;&lt;span
class="oldstyle-num"&gt;RFC 3489&lt;/span&gt;&lt;/a&gt;) does. You send a
STUN server a message, the STUN server looks at the source IP address and
port of the IP packet, and reply that back to you. Voilà, you know you
public &lt;code&gt;address:port&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;Sometimes
having that address:port isn’t enough, because many NAT poses &lt;a
id="footref:extra" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Aextra"&gt;extra
restrictions&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;.
Then we have to resort to having a public-visible relay server in the
middle, which is what TURN (&lt;a
href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc5766"&gt;&lt;span
class="oldstyle-num"&gt;RFC 5766&lt;/span&gt;&lt;/a&gt;)
does.&lt;/p&gt;&lt;div id="footdef:extra" class="footdef"&gt;&lt;div
class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to
main text" href="#footref%3Aextra"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Some NAT wouldn’t let a packet from an external
host through if the host inside never sent a packet to that external host
before. There are many ways a NAT could make your life difficult, check
out “full cone”, “restricted cone”, “symmetric NAT”,
etc.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As time goes by, STUN and TURN turns
out to be still not enough. For one, one can usually find multiple
address that could possibly work, but then which one to use? Eg, maybe a
host has an IP assigned by a VPN, if the other host is also in the VPN,
we should use this IP over the others; similarly, if the other host is in
the same LAN, we should use the local IP; even over NAT, there could be
multiple IP’s that can reach us.&lt;/p&gt;&lt;p&gt;ICE fills that gap. It
gathers a bunch of &lt;code&gt;address:port&lt;/code&gt;’s that possibly
works (through STUN messages with STUN servers), sorts them by
preference, and &lt;a id="footref:trickle" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Atrickle"&gt;tries them one-by-one according to some
algorithm&lt;sup class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt;, and
reports to you the best one. If none works, it tries to establish a relay
through TURN.&lt;/p&gt;&lt;div id="footdef:trickle"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Atrickle"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Or even gather candidates and try them out in the
same time, instead of waiting for full candidates list before trying each
out. This speeds up establishing connections and is called trickle
ICE.&lt;/div&gt;&lt;/div&gt;&lt;p&gt;And here is where the new STUN comes
in. People threw away the algorithm for finding
&lt;code&gt;address:port&lt;/code&gt; in classic STUN, and kept and
extended the STUN message format. Now ICE runs a more thorough algorithm
that uses STUN messages to communicate with STUN servers. And the new
STUN (&lt;a
href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc5389"&gt;&lt;span
class="oldstyle-num"&gt;RFC 5389&lt;/span&gt;&lt;/a&gt;) just defines the
STUN message format. There is a even newer version (&lt;a
href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc8489"&gt;&lt;span
class="oldstyle-num"&gt;RFC 8489&lt;/span&gt;&lt;/a&gt;) that updated
&lt;span class="oldstyle-num"&gt;RFC 5389&lt;/span&gt; slightly, but with
no fundamental changes.&lt;/p&gt;&lt;p&gt;Similarly, TURN is updated in
&lt;a
href="https://archive.casouri.cc/note/2022/nat-what-do-they-do/https:/datatracker.ietf.org/doc/html/rfc8656"&gt;&lt;span
class="oldstyle-num"&gt;RFC 8656&lt;/span&gt;&lt;/a&gt; and now is a
message protocol used by ICE rather than a standalone
solution.&lt;/p&gt;</content>
</entry>
<entry>
<title>Using Fontsets in Emacs</title>
<link href="https://archive.casouri.cc/note/2021/fontset" />
<id>urn:uuid:336b8c2c-4d8b-11ec-967b-17e83717b0eb</id>
<updated>2021-11-24T17:01:00.00-05:00</updated>
<content type="html">&lt;h2 id="Fontset"
class="section"&gt;Fontset?&lt;/h2&gt;&lt;p&gt;Fontset is a feature of
Emacs that allows you to bundle together multiple fonts and use them as a
single font, such that it covers more characters than a single font could
have. For example, you can combine a Latin font, a Greek font and a
Chinese font together.&lt;/p&gt;&lt;p&gt;With fontsets, we can use
different Unicode fonts for different faces. For example, serif Latin and
Chinese font for a “serif” face, and sans serif Latin and Chinese font
for a “sans” face. Without fontsets, we can only set different Latin
fonts to faces and use a single fall-back Chinese
font.&lt;/p&gt;&lt;p&gt;&lt;img class="half" alt="A graph showing
different fonts with different faces"
src="https://archive.casouri.cc/note/2021/fontset/fonts%20&amp;amp;%20faces.svg"/&gt;&lt;/p&gt;&lt;h2
id="Create%20a%20fontset" class="section"&gt;Create a
fontset&lt;/h2&gt;&lt;p&gt;A fontset is recognized by its name. Each
fontset has two names, one short and one long. The short name looks like
&lt;code&gt;fontset-xxx&lt;/code&gt;. The long name is a &lt;a
href="https://archive.casouri.cc/note/2021/fontset/https:/wiki.archlinux.org/title/X_Logical_Font_Description"&gt;X
Logical Font Description&lt;/a&gt; with last two fields being
&lt;code&gt;fontset&lt;/code&gt; and &lt;code&gt;xxx&lt;/code&gt;. For
example,&lt;/p&gt;&lt;pre class="code-block"&gt;-*-ibm plex
mono-medium-*-*-*-13-*-*-*-*-*-fontset-my
fontset&lt;/pre&gt;&lt;p&gt;Emacs come with three fontsets by default:
&lt;code&gt;fontset-startup&lt;/code&gt;,
&lt;code&gt;fontset-standard&lt;/code&gt; and
&lt;code&gt;fontset-default&lt;/code&gt;. We only care about
&lt;code&gt;fontset-default&lt;/code&gt;; it is the ultimate fall-back
when Emacs cannot find a font to display a character. But more on that
later.&lt;/p&gt;&lt;p&gt;To create a fontset, you can use
&lt;code&gt;create-fontset-from-fontset-spec&lt;/code&gt; and pass it a
bunch of X Logical Font Descriptions, each for a font you want to
include. I find that tedious. Instead, I like to create a fontset with a
single ASCII font and use &lt;code&gt;set-fontset-font&lt;/code&gt; to
add other fonts later, like this:&lt;/p&gt;&lt;pre
class="code-block"&gt;(create-fontset-from-fontset-spec (font-xlfd-name
(font-spec :family "IBM Plex Mono" :size 13 :registry "fontset-my
fontset")))&lt;/pre&gt;&lt;p&gt;Make sure you put the short fontset name
under the &lt;code&gt;:registry&lt;/code&gt; spec. The code above creates
the fontset, and returns its long name,&lt;/p&gt;&lt;pre
class="code-block"&gt;-*-ibm plex mono-*-*-*-*-13-*-*-*-*-*-fontset-my
fontset&lt;/pre&gt;&lt;p&gt;Now we can add a Chinese font and a Greek
font:&lt;/p&gt;&lt;pre class="code-block"&gt;(set-fontset-font
"fontset-my fontset" 'han (font-spec :family "Source Han Serif" :size
12)) (set-fontset-font "fontset-my fontset" 'greek (font-spec :family
"Academica"))&lt;/pre&gt;&lt;p&gt;If you are not familiar with
&lt;code&gt;set-fontset-font&lt;/code&gt;, &lt;a
href="https://archive.casouri.cc/note/2021/fontset/http:/idiocy.org/emacs-fonts-and-fontsets.html"&gt;&lt;em&gt;Emacs,
fonts and fontsets&lt;/em&gt;&lt;/a&gt; is a good read.&lt;/p&gt;&lt;h2
id="Apply%20a%20fonset" class="section"&gt;Apply a
fonset&lt;/h2&gt;&lt;p&gt;Although the manual says we can use a fontset
wherever a font is appropriate, it is not entirely true. If you pass your
fontset through the &lt;code&gt;:font&lt;/code&gt; attribute in
&lt;code&gt;set-face-attribute&lt;/code&gt;, &lt;a
id="footref:takes-ascii" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Atakes-ascii"&gt;Emacs
takes the ASCII font from the fontset and only uses the ASCII font for
the face&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;. The
real way to do it is to use the undocumented
&lt;code&gt;:fontset&lt;/code&gt; attribute:&lt;/p&gt;&lt;pre
class="code-block"&gt;(set-face-attribute 'some-face nil :fontset
"fontset-my fontset")&lt;/pre&gt;&lt;p&gt;That’s not all. While the above
code works for most faces, setting &lt;code&gt;:fontset&lt;/code&gt; for
&lt;code&gt;default&lt;/code&gt; will not work as you expected, because
Emacs again &lt;a id="footref:default" class="footref-anchor
obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Adefault"&gt;only takes the ASCII font, even if you use
the &lt;code&gt;fontset&lt;/code&gt; attribute&lt;sup
class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt;. So don’t set the
fontset for the &lt;code&gt;default&lt;/code&gt; face; instead, just
modify &lt;code&gt;fontset-default&lt;/code&gt; (it’s the ultimate
fall-back fontset we mentioned earlier) for Unicode fonts, and use
whatever method you like for ASCII font. If you read &lt;a
href="https://archive.casouri.cc/note/2021/fontset/http:/idiocy.org/emacs-fonts-and-fontsets.html"&gt;&lt;em&gt;Emacs,
fonts and fontsets&lt;/em&gt;&lt;/a&gt;, you’ll know we can modify
&lt;code&gt;fontset-default&lt;/code&gt; by either&lt;/p&gt;&lt;pre
class="code-block"&gt;(set-fontset-font "fontset-default"
...)&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&lt;pre
class="code-block"&gt;(set-fontset-font t
...)&lt;/pre&gt;&lt;p&gt;Technically you could set the
&lt;code&gt;font&lt;/code&gt; attribute of a frame to a fontset by
&lt;code&gt;set-frame-font&lt;/code&gt; and it works fine. But as soon as
you change any font-related attributes in
&lt;code&gt;default&lt;/code&gt; face, like font size, your fontset in
the frame attribute will be overwritten by the font derived from
&lt;code&gt;default&lt;/code&gt; face. So the best way is still to just
modify &lt;code&gt;fontset-default&lt;/code&gt;.&lt;/p&gt;&lt;div
id="footdef:takes-ascii" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Atakes-ascii"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;According to &lt;a
href="https://archive.casouri.cc/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3391"&gt;the
source&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:default"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Adefault"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Basically, if the face is
&lt;code&gt;default&lt;/code&gt;,
&lt;code&gt;set-face-attribute&lt;/code&gt; calls
&lt;code&gt;set_font_frame_param&lt;/code&gt; (&lt;a
href="https://archive.casouri.cc/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3514"&gt;source&lt;/a&gt;),
which only looks at the &lt;code&gt;:font&lt;/code&gt; attribute (&lt;a
href="https://archive.casouri.cc/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3685"&gt;source&lt;/a&gt;).&lt;/div&gt;&lt;/div&gt;&lt;h2
id="Further%20reading" class="section"&gt;Further
reading&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Command
&lt;code&gt;list-fontsets&lt;/code&gt; lists all the defined
fontsets.&lt;/li&gt;&lt;li&gt;Command
&lt;code&gt;describe-fontset&lt;/code&gt; shows which font is each
character assigned to in a fontset.&lt;/li&gt;&lt;li&gt;Manual page:
&lt;a
href="https://archive.casouri.cc/note/2021/fontset/https:/www.gnu.org/software/emacs/manual/html_node/emacs/Fontsets.html"&gt;&lt;em&gt;Fontsets,
Emacs User Manual&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Another manual
page: &lt;a
href="https://archive.casouri.cc/note/2021/fontset/https:/www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html"&gt;&lt;em&gt;Fontsets,
Emacs Lisp Manual&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content>
</entry>
<entry>
<title>Code Page 437</title>
<link href="https://archive.casouri.cc/note/2021/code-page-437" />
<id>urn:uuid:97279de0-28c5-11ec-b9e1-e3d1f57bb295</id>
<updated>2021-10-23T00:11:00.00-05:00</updated>
<content type="html">&lt;p&gt;So I was installing a new OS on my desktop
machine, and for some technical reasons I need to install the OS
manually. That means typing in a console. I couldn’t help but wonder:
what the font is it showing?&lt;/p&gt;&lt;figure&gt;&lt;img
alt="Screenshot of the console"
src="https://archive.casouri.cc/note/2021/code-page-437/console.jpeg"/&gt;
&lt;figcaption&gt;I was typing in
this&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Turns out the typeface
isn’t even a typeface. It is a encoding that extends ASCII. It maps 8-bit
patterns to characters. For example, &lt;code&gt;10000110&lt;/code&gt;
corresponds to “å”. According to Wikipedia, It is the“standard character
set of the original IBM PC”, and it “remains the primary set in the core
of any EGA and VGA-compatible graphic cards”. Basically this is the most
basic font on a personal computer, stored directly in
hardware.&lt;/p&gt;&lt;p&gt;This character set is supposed to contain
many characters including fancy ones like “⌠”, “☺”, “§”, etc. But my
graphic card is missing most of the non-basic characters. (How
disappointing!)&lt;/p&gt;&lt;figure&gt;&lt;img alt="A screenshot
specimen"
src="https://archive.casouri.cc/note/2021/code-page-437/specimen.jpeg"/&gt;
&lt;figcaption&gt;Many characters are
missing&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I don’t think this font
is pretty or anything. What makes it so interesting to me is that it is
such ubiquitous yet most people never notice it. Next time &lt;a
id="footref:PC" class="footref-anchor obviously-a-link" aria-label="Jump
to footnote" href="#footdef%3APC"&gt;when your PC starts up or
crashes&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;, see if
you can spot any message printed in this font.&lt;/p&gt;&lt;p&gt;You can
even download the font file for this font: &lt;a
href="https://archive.casouri.cc/note/2021/code-page-437/https:/cp437.github.io"&gt;&lt;em&gt;Code
Page 437&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;PS. this makes me wonder
if Mac has something similar, and sure enough, there is. &lt;a
href="https://archive.casouri.cc/note/2021/code-page-437/https:/apple.stackexchange.com/questions/157038/what-font-is-used-during-verbose-boot-mode"&gt;Someone
asked about it on StackExchange&lt;/a&gt;. I bet even less people know
about this one. I for one have never seen it despite using a MacBook for
years (That’s probably a good thing, as one only see it when something
goes hopelessly wrong.)&lt;/p&gt;&lt;p&gt;PPS. On Linux, you can drop
yourself into a console by typing Ctrl+Alt+F1/F2/etc. Usually that screen
is printed in &lt;a
href="https://archive.casouri.cc/note/2021/code-page-437/http:/terminus-font.sourceforge.net"&gt;Terminus&lt;/a&gt;.&lt;/p&gt;&lt;div
id="footdef:PC" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3APC"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;You still use a PC, do
you?&lt;/div&gt;&lt;/div&gt;</content>
</entry>
<entry>
<title>Dutch 801 Headline</title>
<link href="https://archive.casouri.cc/note/2021/dutch-801" />
<id>urn:uuid:78a32c96-227f-11ec-9fc2-63ecfe829692</id>
<updated>2021-09-30T23:18:00.00-05:00</updated>
<content type="html">&lt;p&gt;Today’s typeface isn’t really interesting
in itself, but in the way I came across it. It’s a long story, are you
ready? Ok, so I was reading assigned papers for my OS class, and I
started on this one:&lt;/p&gt;&lt;p&gt;&lt;img alt="A clip of the paper"
src="https://archive.casouri.cc/note/2021/dutch-801/hydra.jpeg"/&gt;&lt;/p&gt;&lt;p&gt;The
title immediately caught my attention: it’s a elegant, graceful font. So
I clipped an image and searched on myfont.com, and it turns out to be ...
Dutch 801 Headline.&lt;/p&gt;&lt;p&gt;The end.&lt;/p&gt;&lt;p&gt;I don’t
know about you, but isn’t it a rather strange name for a typeface? Why
Dutch? Why 801? I still don’t know the answer. Anyway, I think its a cool
name. Maybe the one who named it thought the
same.&lt;/p&gt;&lt;p&gt;Despite its interesting name, information about
this typeface is quite scarce. I only know it is Bitstream’s version of
Times New Roman (ie, clone). I was kind of surprised when I found out,
because I never associated Times New Roman with elegance. Maybe enlarging
a font naturally releases it from its humble form, and brings out its
gracefulness.&lt;/p&gt;&lt;figure&gt;&lt;img alt="A larger clip of the
title"
src="https://archive.casouri.cc/note/2021/dutch-801/hydra-large.jpeg"/&gt;
&lt;figcaption&gt;The title in its full
glory&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt="Clip
for another title"
src="https://archive.casouri.cc/note/2021/dutch-801/tenex.jpeg"/&gt;
&lt;figcaption&gt;Another article
title&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As for the body text, I
can only assume it to be Dutch 801 Text. I didn’t bother to check
though.&lt;/p&gt;&lt;p&gt;&lt;img alt="A clip of the body text"
src="https://archive.casouri.cc/note/2021/dutch-801/body.jpeg"/&gt;&lt;/p&gt;</content>
</entry>
<entry>
<title>Academica</title>
<link href="https://archive.casouri.cc/note/2021/academica" />
<id>urn:uuid:8a5678de-2181-11ec-9b77-8b26fea6a693</id>
<updated>2021-09-29T17:01:00.00-05:00</updated>
<content type="html">&lt;p&gt;&lt;a
href="https://archive.casouri.cc/note/2021/academica/https:/www.stormtype.com/families/academica"&gt;Academica&lt;/a&gt;
is a typeface I found out when reading &lt;a
href="https://archive.casouri.cc/note/2021/academica/https:/aeon.co"&gt;&lt;em&gt;aeon&lt;/em&gt;&lt;/a&gt;
(a digital magazine in Science and Humanities). Academica is designed by
Josef Týfa for scientific texts. The original design was cut and cast in
metal in 1968, and in 2003, Týfa and František Štorm worked together to
rework it for digital printing.&lt;/p&gt;&lt;p&gt;Academica shares some
similarities with Charter in tall x‑height and emphasize on legibility,
but the similarity pretty much ends there. Comparing to Charter,
Academica is considerably blacker. And comparing to Charter’s &lt;a
id="footref:stoic" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Astoic"&gt;stoic stint on
curves&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;,
Academica is lavishly rounded, tapered, bent, squished and stretched. In
fact, I don’t even know why am I comparing it to Charter, Academica
reminds me more of another typeface (that I dig), &lt;a
href="https://archive.casouri.cc/note/2021/academica/https:/en.wikipedia.org/wiki/Cooper_Black"&gt;Cooper
Black&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img alt="A specimen for some
lower-case Latin letters"
src="https://archive.casouri.cc/note/2021/academica/specimen1.png"/&gt;&lt;/p&gt;&lt;p&gt;The
alien-looking 0 is perhaps the most salient character (pun intended) in
Academica. Instead of simply narrowing 0 to distinguish it from capital
O, Academica “flipped” it such that the horizontal stroke is thicker than
the vertical. The 0 is really the culmination of the overall vibe of
Academica—little roundish goofiness here and there, slightly throwing the
reader off; but when you zoom away, you see a legible, realistic academic
typeface.&lt;/p&gt;&lt;p&gt;&lt;img alt="A specimen for text “2001”"
src="https://archive.casouri.cc/note/2021/academica/specimen2.png"/&gt;&lt;/p&gt;&lt;p&gt;I
love the color of Academica, it’s thiccc ;-) Use it for body text, and
the dense, full color is beautiful. Looking at a block of Academica, you
can almost feel the energy of live imbued in every corner. Also, the tall
x-height means you can pack more lines into a page, increasing the
information density.&lt;/p&gt;&lt;p&gt;Overall, Academica feels humane to
me. It is a practical typeface for serious scientific publications, but
in the same time has its very own quirky character. I’m very fond of it.
It isn’t that expensive either. If you buy it on &lt;a
href="https://archive.casouri.cc/note/2021/academica/https:/www.myfonts.com"&gt;myfonts.com&lt;/a&gt;,
each font costs $44 (at the time of writing). &lt;a id="footref:need"
class="footref-anchor obviously-a-link" aria-label="Jump to footnote"
href="#footdef%3Aneed"&gt;So regular, italic and bold&lt;sup
class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt; combined costs $132.
That’s more than a cup of coffee, but still less than 20 cups (I
think?)&lt;/p&gt;&lt;p&gt;Some more
specimen:&lt;/p&gt;&lt;figure&gt;&lt;img alt="A specimen for body text"
src="https://archive.casouri.cc/note/2021/academica/specimen3.png"/&gt;
&lt;figcaption&gt;Academica Text (Regular) in body
text&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt="A
specimen for Light/Book weight"
src="https://archive.casouri.cc/note/2021/academica/specimen4.png"/&gt;
&lt;figcaption&gt;Academica Book (Light) in slightly larger
size&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Further
reading:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a
href="https://archive.casouri.cc/note/2021/academica/https:/fontsinuse.com/typefaces/13032/academica"&gt;&lt;em&gt;Fonts
in Use: Academica&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The &lt;a
href="https://archive.casouri.cc/note/2021/academica/StormType-AcademicaSpecimenA4.pdf"&gt;Official
specimen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id="footdef:stoic"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Astoic"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Of course, there is nothing bad about stoic
outlines. Matthew Carter designed Charter for low-resolution laser
printers (which will muddle any delicate detail on the character), and
aimed for economic use of curves to accommodate low-memory computers and
printers. More over, the crisp, direct, clean outline is actually one of
Charter’s virtues. (Edit: Actually, economic use of curves turns out to
be a premature optimization, but Carter liked the style anyway and kept
the design.)&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:need"
class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a
aria-label="Jump back to main text"
href="#footref%3Aneed"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;Regular, italic and bold are really all you need,
sometimes you don’t even need bold. If you want to use Academica in a
larger size (larger than 13pt), then Light, Light italic and Regular is
also a good combination.&lt;/div&gt;&lt;/div&gt;</content>
</entry>
<entry>
<title>RFC: Emacs tree-sitter integration</title>
<link href="https://archive.casouri.cc/note/2021/emacs-tree-sitter" />
<id>urn:uuid:484e573e-207f-11ec-bd91-975a51a5f3f1</id>
<updated>2021-09-28T10:12:00.00-05:00</updated>
<content type="html">&lt;p&gt;&lt;a
href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/tree-sitter.github.io/tree-sitter"&gt;Tree-sitter&lt;/a&gt;
is a incremental parser that can provide a concrete syntax tree for the
source code and is fast enough to parse on each key press. It has
supported a wide range of languages, and support for more languages is on
the way.&lt;/p&gt;&lt;p&gt;I’ve been working on a integration of
tree-sitter library into Emacs’ core. The integration consists of two
parts, first the direct translate of tree-sitter’s API, second the
integration with Emacs’ font-lock and indent system. The first part is
completed and is rather uncontentious. I’d appreciate comments on the
second: Is the interface easy to understand? Is it easy to use? Is it
flexible enough for every language?&lt;/p&gt;&lt;p&gt;Whether you are a
major mode author or just a interested Emacs user, I invite you to try
hacking with this tree-sitter integration—recreate existing major mode
features (font-lock, indent), create new features (structured editing,
etc)—and tell me how well it works. Better yet, provide some suggestions
on improving the interface.&lt;/p&gt;&lt;h2
id="Building%20Emacs%20with%20tree-sitter%20support"
class="section"&gt;Building Emacs with tree-sitter
support&lt;/h2&gt;&lt;h3 id="Install%20tree-sittter"
class="subsection"&gt;Install tree-sittter&lt;/h3&gt;&lt;p&gt;First,
install libtree-sitter, either by a package manager, or from
source:&lt;/p&gt;&lt;pre class="code-block"&gt;git clone
https://github.com/tree-sitter/tree-sitter.git cd tree-sitter make make
install&lt;/pre&gt;&lt;p&gt;This should install libtree-sitter in
standard location.&lt;/p&gt;&lt;h3 id="Build%20Emacs"
class="subsection"&gt;Build Emacs&lt;/h3&gt;&lt;p&gt;Then, build Emacs
from my GitHub repository. Make sure you clone the
&lt;code&gt;ts&lt;/code&gt; branch.&lt;/p&gt;&lt;pre
class="code-block"&gt;git clone https://github.com/casouri/emacs.git
--branch ts ./autogen.sh ./configure make&lt;/pre&gt;&lt;p&gt;No need for
special configure flags, tree-sitter is enabled automatically if
libtree-sitter is present on the system. Now Emacs can be started
by&lt;/p&gt;&lt;pre class="code-block"&gt;src/emacs&lt;/pre&gt;&lt;h3
id="Get%20language%20definitions" class="subsection"&gt;Get language
definitions&lt;/h3&gt;&lt;p&gt;To use tree-sitter features in any
meaningful way, we also need the language definition, eg,
libtree-sitter-c for C. I wrote a script for automatically retrieving and
compiling some of the libraries. The following commands&lt;/p&gt;&lt;pre
class="code-block"&gt;git clone
https://github.com/casouri/tree-sitter-module.git cd tree-sitter-module
./batch-new.sh&lt;/pre&gt;&lt;p&gt;should produce libraries for C, JSON,
Go, HTML, JavaScript, CSS and Python and store them in
&lt;code&gt;dist&lt;/code&gt; directory. From there you can copy these
libraries to a standard path, or add that directory to
&lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can also
find pre-built libraries in the release page: &lt;a
href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/github.com/casouri/tree-sitter-module/releases/tag/v2,0"&gt;&lt;em&gt;tree-sitter-module
release v2.0&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2
id="Basic%20tree-sitter%20features" class="section"&gt;Basic tree-sitter
features&lt;/h2&gt;&lt;p&gt;I suggest reading the tree-sitter node in the
manual first, it covers how to create a parser, how to retrieve a node,
how to pattern match nodes, and more. You can access the manual by
typing&lt;/p&gt;&lt;pre class="code-block"&gt;C-h i m elisp RET g Parsing
Program Source RET&lt;/pre&gt;&lt;p&gt;The command(s) above opens the
Info reader, goes to &lt;em&gt;Elisp Reference Manual&lt;/em&gt;, and
opens the “Parsing Program Source” node, which contains manual for
tree-sitter. Alternatively, you can read &lt;a
href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/Parsing-Program-Source.html"&gt;the
tree-sitter node&lt;/a&gt; that I clipped from the HTML
manuel.&lt;/p&gt;&lt;p&gt;Once you’ve read the manual, you can
&lt;code&gt;(require 'tree-sitter)&lt;/code&gt; and hack
away!&lt;/p&gt;&lt;p&gt;The manual only documents basic features of
tree-sitter, leaving out font-lock and indent integration, because I
expect the latter to change. They are instead documented
below.&lt;/p&gt;&lt;h2 id="Font-lock%20interface"
class="section"&gt;Font-lock interface&lt;/h2&gt;&lt;p&gt;(From now on, I
assume you have read the manual and I will use concepts introduced in the
manual without explanation.)&lt;/p&gt;&lt;p&gt;If you are familiar with
font-lock in Emacs, you know it is primarily configured by
&lt;code&gt;font-lock-defaults&lt;/code&gt;: major mode sets this
variable with language-specific configuration, font-lock takes that
variable and populate &lt;code&gt;font-lock-keywords&lt;/code&gt;, which
directly defines the pattern to fontify.&lt;/p&gt;&lt;h3
id="tree-sitter-font-lock-settings"
class="subsection"&gt;&lt;code&gt;tree-sitter-font-lock-settings&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;a
id="footref:ts-name" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote"
href="#footdef%3Ats-name"&gt;Tree-sitter&lt;sup
class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt; provides two analogues
variables, &lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt; and
&lt;code&gt;tree-sitter-font-lock-settings&lt;/code&gt;.
&lt;code&gt;tree-sitter-font-lock-settings&lt;/code&gt; is a list of
&lt;code&gt;SETTING&lt;/code&gt;s where each
&lt;code&gt;SETTING&lt;/code&gt; looks like&lt;/p&gt;&lt;pre
class="code-block"&gt;(LANGUAGE
QUERY)&lt;/pre&gt;&lt;p&gt;&lt;code&gt;LANGUAGE&lt;/code&gt; is the
language this setting should use, and &lt;code&gt;QUERY&lt;/code&gt; is
either a string or a sexp query. Each capture name in
&lt;code&gt;QUERY&lt;/code&gt; is either a face name, in which case the
captured node is fontified in that face, or a function name, in which
case the captured node is passed to the function for fontification.
Specifically, the function is passed three arguments &lt;code&gt;(BEG END
NODE)&lt;/code&gt;, where &lt;code&gt;BEG&lt;/code&gt; and
&lt;code&gt;END&lt;/code&gt; is the beginning and end position of the
node in the buffer, for convenience.&lt;/p&gt;&lt;p&gt;An example
&lt;code&gt;SETTING&lt;/code&gt; for C is&lt;/p&gt;&lt;pre
class="code-block"&gt;(tree-sitter-c ; LANGUAGE ((null)
@font-lock-constant-face (true) @font-lock-constant-face (false)
@font-lock-constant-face)) ; QUERY&lt;/pre&gt;&lt;div
id="footdef:ts-name" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Ats-name"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;From now on, “tree-sitter” refers to the Emacs
integration of tree-sitter.&lt;/div&gt;&lt;/div&gt;&lt;h3
id="tree-sitter-font-lock-defaults"
class="subsection"&gt;&lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Tree-sitter
font-lock, like font-lock, support fontification at different levels of
decoration (controlled by
&lt;code&gt;font-lock-maximum-decoration&lt;/code&gt;). And this is the
primary purpose of
&lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt;. Its value is a
list of&lt;/p&gt;&lt;pre class="code-block"&gt;(DEFAULT :KEYWORD
VALUE...)&lt;/pre&gt;&lt;p&gt;Where each &lt;code&gt;DEFAULT&lt;/code&gt;
may be a symbol or a list of symbols. The symbol should be either a
variable containing &lt;code&gt;(LANGUAGE QUERY)&lt;/code&gt;, or a
function that returns that. If &lt;code&gt;DEFAULT&lt;/code&gt; is a
list, each symbol corresponds to a decoration level. For example, if I
want to implement three levels of decoration for C, I would populate
&lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt;
with&lt;/p&gt;&lt;pre class="code-block"&gt;(((c-font-lock-settings-1
c-font-lock-settings-2 c-font-lock-settings-3) :KEYWORD
VALUE...))&lt;/pre&gt;&lt;p&gt;where
&lt;code&gt;c-font-lock-settings-1&lt;/code&gt; would contain,
say,&lt;/p&gt;&lt;pre class="code-block"&gt;(tree-sitter-c ((null)
@font-lock-constant-face (true) @font-lock-constant-face (false)
@font-lock-constant-face))&lt;/pre&gt;&lt;p&gt;for those who need no
more. And the other two levels could be for the rest mortals. As for
&lt;code&gt;:KEYWORD&lt;/code&gt; and &lt;code&gt;VALUE&lt;/code&gt;,
they are analogues to that in
&lt;code&gt;font-lock-defaults&lt;/code&gt;, used for specifying other
configurations. Currently they are not used for tree-sitter
font-lock.&lt;/p&gt;&lt;p&gt;To enable tree-sitter font-lock, a major
mode should first assign
&lt;code&gt;tree-sitter-font-lock-defaults&lt;/code&gt;, then call
&lt;code&gt;tree-sitter-font-lock-enable&lt;/code&gt;. For
example,&lt;/p&gt;&lt;pre class="code-block"&gt;(define-derived-mode
ts-c-mode prog-mode "tree-sitter C" (setq-local
tree-sitter-font-lock-defaults '((ts-c-tree-sitter-settings-1)))
(tree-sitter-enable-font-lock))&lt;/pre&gt;&lt;h2 id="Indentation"
class="section"&gt;Indentation&lt;/h2&gt;&lt;p&gt;In Emacs, indentation
is provided by &lt;code&gt;indent-line-function&lt;/code&gt;. Tree-sitter
provides a convenient system,
&lt;em&gt;tree-sitter-simple-indent&lt;/em&gt;, to simplify the
implementation of a indenting function. To use it, bind
&lt;code&gt;indent-line-function&lt;/code&gt; to
&lt;code&gt;tree-sitter-indent&lt;/code&gt;, and fill in indentation
configurations in
&lt;code&gt;tree-sitter-simple-indent-rules&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;tree-sitter-simple-indent-rules&lt;/code&gt;
is a list of rules, and each rule looks like&lt;/p&gt;&lt;pre
class="code-block"&gt;(MATCHER ANCHOR OFFSET)&lt;/pre&gt;&lt;p&gt;When
indenting, &lt;em&gt;tree-sitter-simple-indent&lt;/em&gt; finds the
largest node that starts at the beginning of the current line, and
matches it against each &lt;code&gt;MATCHER&lt;/code&gt; in
&lt;code&gt;tree-sitter-simple-indent-rules&lt;/code&gt;. If
&lt;code&gt;MATCHER&lt;/code&gt; matches that node,
&lt;code&gt;ANCHOR&lt;/code&gt; and &lt;code&gt;OFFSET&lt;/code&gt;
determines how to indent—find the column of
&lt;code&gt;ANCHOR&lt;/code&gt; (which represents a point), and add
&lt;code&gt;OFFSET&lt;/code&gt; to it.&lt;/p&gt;&lt;p&gt;By now you must
be wondering what the heck is &lt;code&gt;MATCHER&lt;/code&gt;. It is a
function that takes &lt;code&gt;(NODE PARENT BOL &amp;amp;rest
_)&lt;/code&gt; as arguments, if the rule should apply to
&lt;code&gt;NODE&lt;/code&gt;, it returns non-nil.
&lt;code&gt;PARENT&lt;/code&gt; and &lt;code&gt;BOL&lt;/code&gt;
(position of beginning of line) are provided just for convenience. The
“&lt;code&gt;&amp;amp;rest _&lt;/code&gt;” part is required to allow the
possibility to extend the interface in the future.&lt;/p&gt;&lt;p&gt;This
function can do anything: check the type of that node, check the type of
its parent, check whether this node is the first child node of its
parent, etc. &lt;code&gt;ANCHOR&lt;/code&gt; is also a function that
takes theses arguments, but it returns a point, the “anchor”. If the rule
determines that the node should be indented two columns inward comparing
to its parent, &lt;code&gt;ANCHOR&lt;/code&gt; should return the start of
the parent node, and &lt;code&gt;OFFSET&lt;/code&gt; should be
2.&lt;/p&gt;&lt;p&gt;For example, the following rule matches any line
that starts with the &lt;code&gt;null&lt;/code&gt; keyword, and indents
the line inwards by two columns against the
&lt;code&gt;null&lt;/code&gt;’s parent node.&lt;/p&gt;&lt;pre
class="code-block"&gt;((lambda (n p bol &amp;amp;rest _) (equal
(tree-sitter-node-type n) "null")) ; MATCHER (lambda (n p bol
&amp;amp;rest _) (tree-sitter-node-start (tree-sitter-node-parent n))) ;
ANCHOR 2) ; OFFSET&lt;/pre&gt;&lt;p&gt;Of course, it is terribly tedious
to write out every &lt;code&gt;MATCHER&lt;/code&gt; and
&lt;code&gt;ANCHOR&lt;/code&gt; explicitly.
&lt;em&gt;tree-sitter-simple-indent&lt;/em&gt; provides some predefined
&lt;code&gt;MATCHER&lt;/code&gt; and &lt;code&gt;ANCHOR&lt;/code&gt;
functions. Most of them are higher-order functions: they takes an
argument and returns a
function.&lt;/p&gt;&lt;p&gt;&lt;code&gt;MATCHER&lt;/code&gt;
presets:&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;(parent-is
TYPE)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Check that the parent has type
&lt;code&gt;TYPE&lt;/code&gt;.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;(node-is
TYPE)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Check that node has type
&lt;code&gt;TYPE&lt;/code&gt;.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;(match
NODE-TYPE PARENT-TYPE NODE-FIELD NODE-INDEX-MIN
NODE-INDEX-MAX)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;&lt;code&gt;NODE-TYPE&lt;/code&gt;
checks for node’s type, &lt;code&gt;PARENT-TYPE&lt;/code&gt; checks for
parent’s type, &lt;code&gt;NODE-FIELD&lt;/code&gt; checks for the field
name for node int the parent, &lt;code&gt;NODE-INDEX-MIN&lt;/code&gt; and
&lt;code&gt;NODE-INDEX-MAX&lt;/code&gt; limits the node’s index in the
parent. Any argument left as nil are not checked. For example, to match
the node that is the first child and has a parent of type
&lt;code&gt;argument_list&lt;/code&gt;, use&lt;br/&gt;&lt;code&gt;(match
nil "argument_list" nil nil 0
0)&lt;/code&gt;&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;(query
QUERY)&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Queries the parent with
&lt;code&gt;QUERY&lt;/code&gt;. Matches if the node is captured by any
capture
name.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;no-node&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Matches
null node. When the current line is empty, there is no node at the
beginning, so the node is
nil.&lt;/dd&gt;&lt;/dl&gt;&lt;p&gt;&lt;code&gt;ANCHOR&lt;/code&gt;
presets:&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;code&gt;first-child&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Finds
the first sibling of node, ie, the first child of the
parent.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Finds
the parent
node.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;prev-sibling&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Finds
node’s first
sibling.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;no-indent&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Do
nothing, don’t indent. This is useful for a indenting a line inside a
multiline string, where masterful inactivity is most
preferred.&lt;/dd&gt;&lt;dt&gt;&lt;code&gt;prev-line&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;Find
the named node on the previous line. This can be used when indenting an
empty line: just indent like the previous
node.&lt;/dd&gt;&lt;/dl&gt;&lt;h2 id="Some%20handy%20tools"
class="section"&gt;Some handy tools&lt;/h2&gt;&lt;p&gt;I have two handy
tools for you to work with tree-sitter more easily: first,
&lt;code&gt;tree-sitter-inspect-mode&lt;/code&gt; will show the relevant
information of the node at point in the mode-line; second,
&lt;code&gt;tree-sitter-check-indent&lt;/code&gt; can check the indent
result against a stock major mode. Check out their docstring for more
detail.&lt;/p&gt;&lt;h2 id="Feedback"
class="section"&gt;Feedback&lt;/h2&gt;&lt;p&gt;You can send a message to
&lt;a
href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/lists.gnu.org/mailman/listinfo/emacs-devel"&gt;&lt;em&gt;emacs-devel&lt;/em&gt;&lt;/a&gt;,
or open an issue on the &lt;a
href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/github.com/casouri/emacs"&gt;GitHub
repository&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="An%20example"
class="section"&gt;An example&lt;/h2&gt;&lt;p&gt;All these must be pretty
confusing without seeing a concrete example, so here it is. This example
code is for a demo C major mode, &lt;code&gt;ts-c-mode&lt;/code&gt;,
defined in the “&lt;code&gt;;;; Lab&lt;/code&gt;” section in
&lt;code&gt;tree-sitter.el&lt;/code&gt;. (Here is a &lt;a
href="https://archive.casouri.cc/note/2021/emacs-tree-sitter/https:/github.com/casouri/emacs/blob/350ae9cc19e478f08468443843f63bdf005d9d92/lisp/tree-sitter.el#L640"&gt;link
to the file on
GitHub&lt;/a&gt;.)&lt;/p&gt;&lt;p&gt;Indent:&lt;/p&gt;&lt;pre
class="code-block"&gt;(defvar ts-c-tree-sitter-indent-rules
`((tree-sitter-c ;; Empty line. (no-node prev-line 0) ;; Function/struct
definition body {}. ((match nil "function_definition" "body") parent 0)
((node-is "field_declaration_list") parent 0) ;; Call expression.
((parent-is "call_expression") parent 2) ;; If-else. ((match nil
"if_statement" "condition") parent 2) ((match nil "if_statement"
"consequence") parent 2) ((match nil "if_statement" "alternative") parent
2) ((match nil "switch_statement" "condition") parent 2) ((node-is
"else") parent 0) ;; Switch case. ((parent-is "case_statement") parent 2)
((node-is "case_statement") parent 0) ;; { and }. ((node-is
"compound_statement") parent 2) ((node-is "}") parent 0) ;; Multi-line
string. ((parent-is "string_literal") no-indent 0) ;; List. ,@(cl-loop
for type in '("compound_statement" "initializer_list" "argument_list"
"parameter_list" "field_declaration_list") collect `((match nil ,type nil
0 0) parent 2) collect `((match nil ,type nil 1) first-sibling
0)))))&lt;/pre&gt;&lt;p&gt;Font-lock:&lt;/p&gt;&lt;pre
class="code-block"&gt;(defvar ts-c-tree-sitter-settings-1 '(tree-sitter-c
((null) @font-lock-constant-face (true) @font-lock-constant-face (false)
@font-lock-constant-face (comment) @font-lock-comment-face
(system_lib_string) @ts-c-fontify-system-lib (unary_expression operator:
_ @font-lock-negation-char-face) (string_literal) @font-lock-string-face
(char_literal) @font-lock-string-face (function_definition declarator:
(identifier) @font-lock-function-name-face) (declaration declarator:
(identifier) @font-lock-function-name-face) (function_declarator
declarator: (identifier) @font-lock-function-name-face) (init_declarator
declarator: (identifier) @font-lock-variable-name-face)
(parameter_declaration declarator: (identifier)
@font-lock-variable-name-face) (preproc_def name: (identifier)
@font-lock-variable-name-face) (enumerator name: (identifier)
@font-lock-variable-name-face) (field_identifier)
@font-lock-variable-name-face (parameter_list (parameter_declaration
(identifier) @font-lock-variable-name-face)) (pointer_declarator
declarator: (identifier) @font-lock-variable-name-face) (array_declarator
declarator: (identifier) @font-lock-variable-name-face)
(preproc_function_def name: (identifier) @font-lock-variable-name-face
parameters: (preproc_params (identifier) @font-lock-variable-name-face))
(type_identifier) @font-lock-type-face (primitive_type)
@font-lock-type-face "auto" @font-lock-keyword-face "break"
@font-lock-keyword-face "case" @font-lock-keyword-face "const"
@font-lock-keyword-face "continue" @font-lock-keyword-face "default"
@font-lock-keyword-face "do" @font-lock-keyword-face "else"
@font-lock-keyword-face "enum" @font-lock-keyword-face "extern"
@font-lock-keyword-face "for" @font-lock-keyword-face "goto"
@font-lock-keyword-face "if" @font-lock-keyword-face "register"
@font-lock-keyword-face "return" @font-lock-keyword-face "sizeof"
@font-lock-keyword-face "static" @font-lock-keyword-face "struct"
@font-lock-keyword-face "switch" @font-lock-keyword-face "typedef"
@font-lock-keyword-face "union" @font-lock-keyword-face "volatile"
@font-lock-keyword-face "while" @font-lock-keyword-face "long"
@font-lock-type-face "short" @font-lock-type-face "signed"
@font-lock-type-face "unsigned" @font-lock-type-face "#include"
@font-lock-preprocessor-face "#define" @font-lock-preprocessor-face
"#ifdef" @font-lock-preprocessor-face "#ifndef"
@font-lock-preprocessor-face "#endif" @font-lock-preprocessor-face
"#else" @font-lock-preprocessor-face "#elif" @font-lock-preprocessor-face
)))&lt;/pre&gt;</content>
</entry>
<entry>
<title>Don’t Use Rubber Pin Backings on Backpacks</title>
<link href="https://archive.casouri.cc/note/2021/secure-pin-backing" />
<id>urn:uuid:093e8b2e-1515-11ec-b47c-a70e3cf20eb9</id>
<updated>2021-09-13T22:01:00.00-05:00</updated>
<content type="html">&lt;p&gt;If you like enamel pins, you know there are
three types of backings: rubber, butterfly, and “secure/locking backing”.
I grew up with butterfly backings, but nowadays, when you buy a enamel
pin, more often than not, it comes with rubber
backings.&lt;/p&gt;&lt;p&gt;Rubber backings—they feel insecure at first
sight, but then the difficulty to remove one from the packaging might
give you a false sense of security. Let me tell you: don’t trust them. My
mistrust lost me a pin on my backpack. Thankfully I only lost one—the
others are at most loose or missing one of two backings. Still, that’s
enough proof that rubber backings are not suitable for surfaces that see
a lot of movement, for example, a backpack.&lt;/p&gt;&lt;p&gt;Butterfly
backings have their own problems: under stress or repeated use, they
might loose the little metal butterfly wings. On top of that, they aren’t
that much more secure than rubber backings. They won’t gradually loosen
by time like the rubber backings do, but they can come loose or break
under force.&lt;/p&gt;&lt;p&gt;That left the “secure/locking” backings.
They can be a bit of pain when putting on and taking off—you need to get
a feel for them. But they are secure. Buy a box of them from Amazon for a
couple bucks, and your precious pins won’t gone missing from your
backpack again.&lt;/p&gt;</content>
</entry>
<entry>
<title>自动处理网页里的全角引号和标点挤压</title>
<link href="https://archive.casouri.cc/note/2021/full-width-quote" />
<id>urn:uuid:05c234e6-d6b3-11eb-b625-f744d8291272</id>
<updated>2021-09-03T13:15:00.00-05:00</updated>
<content type="html">&lt;h2 id="%E5%85%A8%E8%A7%92%E5%BC%95%E5%8F%B7"
class="section"&gt;全角引号&lt;/h2&gt;&lt;p&gt;在 Unicode 里&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;问号&lt;span
class="full-width-mark"&gt;、&lt;/span&gt;叹号&lt;span
class="full-width-mark"&gt;、&lt;/span&gt;各种括号都有全角半角两种版本&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;各自有独立的编码&lt;span
class="full-width-mark"&gt;；&lt;/span&gt;但因为莫名的原因&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;最常用的引号却不在此列&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;中英混排的时候想要正确显示直角和半角的引号就很头疼&lt;span
class="full-width-mark"&gt;；&lt;/span&gt;搞不好的话&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;中文里显示半角引号还不算太违和&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;英文里蹦出来一个全角引号就太丑了&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;CSS
没法自动区别什么时候用全角引号&lt;span
class="full-width-mark"&gt;、&lt;/span&gt;什么时候用半角&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;只能靠标记&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;好在还没复杂到需要手工标记的地步&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;只要用程序检查引号前后的字是中文还是英文&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;以此标记全角还是半角&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;就基本不会出错&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;我现在的办法是这样&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;默认字体还是英文先中文后&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;body { font-family: Charter, Source Han Serif CN,
serif; }&lt;/pre&gt;&lt;p&gt;需要全角的引号用 &lt;code&gt;span&lt;/code&gt;
标签包起来&lt;span class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;&amp;lt;span
class="full-width-quote"&amp;gt;“&amp;lt;/span&amp;gt;&lt;/pre&gt;&lt;p&gt;然后用
CSS 指定中文字体&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;span.full-width-quote { font-family: Srouce Han
Serif CN, serif; }&lt;/pre&gt;&lt;p&gt;怎么区别一个引号应该全角还是半角呢&lt;span
class="full-width-mark"&gt;？&lt;/span&gt;我用了一个简单的判断方法&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;如果前或后紧挨着中文字符&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;就全角&lt;span
class="full-width-mark"&gt;；&lt;/span&gt;如果前后都不是中文字符&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;就半角&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;我目前还没发现这个简单判断不够用的情况&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;这样一来还需要判断一个字符是不是中文&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;最简单的办法是检查字符的 Unicode codepoint
在不在中文区间内&lt;span class="full-width-mark"&gt;。&lt;/span&gt;常用汉字和标点符号在
&lt;code&gt;0x4E00&lt;/code&gt;–&lt;code&gt;0x9FFF&lt;/code&gt; 和
&lt;code&gt;0x3000&lt;/code&gt;–&lt;code&gt;0x303F&lt;/code&gt;
两个区间里&lt;span class="full-width-mark"&gt;，&lt;/span&gt;检查这两个就够了&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;其他的区间里都是生僻字&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2
id="%E6%A0%87%E7%82%B9%E6%8C%A4%E5%8E%8B"
class="section"&gt;标点挤压&lt;/h2&gt;&lt;p&gt;全角引号搞好了&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;又会贪心标点挤压&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;没有标点挤压的时候&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;几个标点排在一起确实不大好看&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img
class="half300" alt="没有标点挤压的样子"
src="https://archive.casouri.cc/note/2021/full-width-quote/%E4%BE%8B%E5%AD%901.png"/&gt;
&lt;figcaption&gt;&lt;a
href="https://archive.casouri.cc/note/2021/full-width-quote/https:/archive.casouri.cat/rock/day/day-48/index.html"&gt;余日摇滚第48期&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;挤压以后就不那么空了&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img
class="half300" alt="有标点挤压的样子"
src="https://archive.casouri.cc/note/2021/full-width-quote/%E4%BE%8B%E5%AD%902.png"/&gt;
&lt;figcaption&gt;&lt;a
href="https://archive.casouri.cc/note/2021/full-width-quote/https:/archive.casouri.cat/rock/day/day-48/index.html"&gt;余日摇滚第48期&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;原理是设置
CSS 属性 &lt;code&gt;font-feature-settings: "halt"&lt;/code&gt;&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;启用 OpenType 的
&lt;code&gt;halt&lt;/code&gt; 特性&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;和全角引号一样&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;用程序自动识别需要挤压的标点&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;包在 &lt;code&gt;span&lt;/code&gt;
标签里&lt;span class="full-width-mark"&gt;。&lt;/span&gt;要注意的是&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;你用的字体要有
&lt;code&gt;halt&lt;/code&gt; 这个特性才行&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;我用的思源宋体是有的&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;具体怎么挤压标点符号&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;我没找到现成的标准或者算法&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;下面是我的方法&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;这个方法并不完整&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;只处理比较常见的情况&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;但对我来说够用了&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;如果读者知道更好的算法&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;请一定告诉我&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;首先&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;能挤压的标点符号可以分为三类&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;靠左&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;靠右&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;居中&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img
alt="各种类型的标点符号"
src="https://archive.casouri.cc/note/2021/full-width-quote/%E5%90%84%E7%B1%BB%E7%AC%A6%E5%8F%B7.png"/&gt;
&lt;figcaption&gt;&lt;a
href="https://archive.casouri.cc/note/2021/full-width-quote/https:/www.w3.org/TR/2020/WD-clreq-20201101"&gt;&lt;span
class="full-width-mark"&gt;《&lt;/span&gt;中文排版需求&lt;span class="squeeze
full-width-mark"&gt;》&lt;/span&gt;&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;W3C Working Draft 01 November
2020&lt;span class="full-width-mark"&gt;，&lt;/span&gt;3.1.6
标点符号的宽度调整&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;有修改&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我们不考虑居中的符号&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;因为简体中文普遍不用&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;而我以简体中文写作&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;程序从头到尾遍历每个字符&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;决定每个字符要不要挤压&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;挤不挤压取决于这个字符和其前后的字符&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;以伪码表达为&lt;span
class="full-width-mark"&gt;：&lt;/span&gt;&lt;/p&gt;&lt;pre
class="code-block"&gt;遍历 字符： 如果 此字符为靠左标点 且 后一字符为标点： 挤压此字符 如果 此字符为靠右标点 且
前一字符为靠右标点： 挤压此字符&lt;/pre&gt;&lt;p&gt;这个算法运行的结果是这样&lt;span class="squeeze
full-width-mark"&gt;：&lt;/span&gt;&lt;span
class="full-width-mark"&gt;（&lt;/span&gt;&lt;span class="squeeze
full-width-mark"&gt;（&lt;/span&gt;文字&lt;span class="squeeze
full-width-mark"&gt;）&lt;/span&gt;&lt;span class="squeeze
full-width-mark"&gt;）&lt;/span&gt;&lt;span class="squeeze
full-width-mark"&gt;，&lt;/span&gt;&lt;span
class="full-width-mark"&gt;（&lt;/span&gt;文&lt;span class="squeeze
full-width-mark"&gt;）&lt;/span&gt;&lt;span
class="full-width-mark"&gt;「&lt;/span&gt;字&lt;span class="squeeze
full-width-mark"&gt;」&lt;/span&gt;&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a
id="footref:subset" class="footref-anchor obviously-a-link"
aria-label="Jump to footnote" href="#footdef%3Asubset"&gt;如果你用
&lt;code&gt;pyftsubset&lt;/code&gt; 压缩过字体文件&lt;sup
class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;注意它默认会把
&lt;code&gt;halt&lt;/code&gt; 这样的 OTF 特性扔掉&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;这样一来即使加上挤压标签也没有效果&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;压缩的时候加上
&lt;code&gt;--layout-features='*'&lt;/code&gt; 这个选项就可以保留所有 OTF
特性了&lt;span class="full-width-mark"&gt;。&lt;/span&gt;也可以用
&lt;code&gt;--layout-features='halt'&lt;/code&gt; 只保留
&lt;code&gt;halt&lt;/code&gt; 特性&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;&lt;div
id="footdef:subset" class="footdef"&gt;&lt;div class="def-footref
obviously-a-link"&gt;&lt;a aria-label="Jump back to main text"
href="#footref%3Asubset"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div
class="def-footdef"&gt;参见 &lt;a
href="https://archive.casouri.cc/note/2019/reduce-font-loading-time-in-my-blog/index.html"&gt;&lt;em&gt;Reduce
Font Loading Time in My Blog&lt;/em&gt;&lt;/a&gt;&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2
id="%E7%A0%B4%E6%8A%98%E5%8F%B7"
class="section"&gt;破折号&lt;/h2&gt;&lt;p&gt;我还发现破折号有时会显示成 em dash&lt;span
class="full-width-mark"&gt;（&lt;/span&gt;因为破折号在 Unicode 里其实就是 em
dash&lt;span class="squeeze full-width-mark"&gt;）&lt;/span&gt;&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;解决方法和全角引号一样&lt;span
class="full-width-mark"&gt;，&lt;/span&gt;包上全角的
&lt;code&gt;span&lt;/code&gt; 标签就可以了&lt;span
class="full-width-mark"&gt;——&lt;/span&gt;这样就能正确显示破折号&lt;span
class="full-width-mark"&gt;。&lt;/span&gt;&lt;/p&gt;</content>
</entry>
</feed>
