<item>
<title>Better-looking Verbatim Markup in Org Mode</title>
<link>https://archive.casouri.cat/note/2020/better-looking-verbatim-markup-in-org-mode</link>
<guid>https://archive.casouri.cat/note/2020/better-looking-verbatim-markup-in-org-mode</guid>
<description><![CDATA[<p>
Org mode has two verbatim markups: <code>~code~</code> and <code>=verbatim=</code>. I think Markdown’s <code>`code`</code> looks better as backticks are smaller, thus more unobtrusive when in body text and tables. I made <code>~</code> and <code>=</code> in Org Mode to display as <code>`</code>, the result looks pretty good:
</p>


<div class="figure">
<p><img src="/note/2020/better-looking-verbatim-markup-in-org-mode/demo.png" alt="demo.png" />
</p>
</div>

<div id="outline-container-org2bdd240" class="outline-2">
<h2 id="org2bdd240"><span class="section-number-2">1</span> New method (<span class="timestamp-wrapper"><span class="timestamp">&lt;2020-07-23 Thu&gt;</span></span>)</h2>
<div class="outline-text-2" id="text-1">
<p>
The old method has some problems including 1) delimiters disappears for unknown reason 2) we need to redefine Org Mode’s function. Here is a new method that solves both problems.
</p>

<p>
Basically we add another function to <code>jit-lock-functions</code> which runs after Org Mode has fontified the buffer text. Then we make any <code>~</code> and <code>=</code> character that has <code>org-code</code> face or <code>org-verbatim</code> face display <code>`</code> instead.
</p>

<p>
To enabled it just add <code>org-backtick-mode</code> to <code>org-mdoe-hook</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #e45649;">defun</span> <span style="color: #a626a4;">org-backtick-fontify</span> (beg end)
  <span style="color: #9a9ea2;">"Fontify ~ and = between BEG and END."</span>
  (goto-char beg)
  (<span style="color: #e45649;">while</span> (re-search-forward (<span style="color: #e45649;">rx</span> (<span style="color: #e45649;">or</span> <span style="color: #50a14f;">"~"</span> <span style="color: #50a14f;">"="</span>)) end t)
    (<span style="color: #e45649;">let*</span> ((text-props (text-properties-at (match-beginning 0)))
           (face (plist-get text-props 'face)))
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Make it display backtick if the face indicates that</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">it&#8217;s a code/verbatim delimiter.</span>
      (<span style="color: #e45649;">if</span> (<span style="color: #e45649;">or</span> (equal face '(org-code))
              (equal face '(org-verbatim)))
          (put-text-property
           (match-beginning 0) (match-end 0) 'display <span style="color: #50a14f;">"`"</span>)
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Clean up our face if it&#8217;s not a code/verbatim</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">delimiter anymore.</span>
        (<span style="color: #e45649;">when</span> (equal (plist-get text-props 'display) <span style="color: #50a14f;">"`"</span>)
          (put-text-property
           (match-beginning 0) (match-end 0) 'display nil)))))
  (cons 'jit-lock-bounds (cons beg end)))

(<span style="color: #e45649;">define-minor-mode</span> <span style="color: #a626a4;">org-backtick-mode</span>
  <span style="color: #9a9ea2;">"Display ~ and = as backticks."</span>
  <span style="color: #a626a4;">:lighter</span> <span style="color: #50a14f;">""</span>
  (<span style="color: #e45649;">if</span> org-backtick-mode
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">We want to run after org-mode&#8217;s font-lock function.</span>
      (add-hook 'jit-lock-functions #'org-backtick-fontify 91 t)
    (remove-hook 'jit-lock-functions #'org-backtick-fontify t))
  (jit-lock-refontify))
</pre>
</div>
</div>
</div>


<div id="outline-container-org8c2c8bf" class="outline-2">
<h2 id="org8c2c8bf"><span class="section-number-2">2</span> Old method</h2>
<div class="outline-text-2" id="text-2">
<p>
The idea is to add an <code>display</code> text property to the markers when fontifying them. First, in <code>org-emphasis-alist</code>, I added an extra fourth entry for <code>~</code> and <code>=</code>: the text property we will add to <code>~</code> and <code>=</code> in fontification function.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #50a14f;">"="</span> org-verbatim verbatim (display <span style="color: #50a14f;">"`"</span>))
(<span style="color: #50a14f;">"~"</span> org-code verbatim (display <span style="color: #50a14f;">"`"</span>))
</pre>
</div>

<p>
Sadly, there is no opportunity for hooks or advising the fontification function, I had to redefine <code>org-do-emphasis-faces</code>. Towards the end of the function, we first change the <code>pcase</code> form to extract our extra entry added earlier, we change
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #e45649;">pcase-let</span> ((`(,_ ,face ,_) (assoc marker org-emphasis-alist)))
  ...)
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #e45649;">pcase-let</span> ((`(,_ ,face ,_ ,props) (assoc marker org-emphasis-alist)))
  ...)
</pre>
</div>

<p>
Then, before 
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #e45649;">when</span> org-hide-emphasis-markers
  (add-text-properties (match-end 4) (match-beginning 5)
                       '(invisible org-link))
  (add-text-properties (match-beginning 3) (match-end 3)
                       '(invisible org-link)))
</pre>
</div>

<p>
we add
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #e45649;">when</span> props
  (add-text-properties (match-end 4) (match-beginning 5)
                       props)
  (add-text-properties (match-beginning 3) (match-end 3)
                       props))
</pre>
</div>

<p>
“Wait”, you may ask, “why not use <code>org-hide-emphasis-markers</code>?” You can try, and you will regret it. The invisible markers make editing text around them a nightmare. 
</p>

<p>
Finally, here is the full code:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #e45649;">with-eval-after-load</span> 'org
  (<span style="color: #e45649;">setq</span> org-emphasis-alist
        '((<span style="color: #50a14f;">"*"</span> bold)
          (<span style="color: #50a14f;">"/"</span> italic)
          (<span style="color: #50a14f;">"_"</span> underline)
          (<span style="color: #50a14f;">"="</span> org-verbatim verbatim (display <span style="color: #50a14f;">"`"</span>))
          (<span style="color: #50a14f;">"~"</span> org-code verbatim (display <span style="color: #50a14f;">"`"</span>))
          (<span style="color: #50a14f;">"+"</span>
           (<span style="color: #a626a4;">:strike-through</span> t))))

  (<span style="color: #e45649;">defun</span> <span style="color: #a626a4;">org-do-emphasis-faces</span> (limit)
    <span style="color: #9a9ea2;">"Run through the buffer and emphasize strings."</span>
    (<span style="color: #e45649;">let</span> ((quick-re (format <span style="color: #50a14f;">"</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">(</span><span style="color: #50a14f;">[%s]</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">|</span><span style="color: #50a14f;">^</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">)</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">(</span><span style="color: #50a14f;">[~=*/_+]</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">)</span><span style="color: #50a14f;">"</span>
                            (car org-emphasis-regexp-components))))
      (<span style="color: #e45649;">catch</span> <span style="color: #b751b6;">:exit</span>
        (<span style="color: #e45649;">while</span> (re-search-forward quick-re limit t)
          (<span style="color: #e45649;">let*</span> ((marker (match-string 2))
                 (verbatim? (member marker '(<span style="color: #50a14f;">"~"</span> <span style="color: #50a14f;">"="</span>))))
            (<span style="color: #e45649;">when</span> (<span style="color: #e45649;">save-excursion</span>
                    (goto-char (match-beginning 0))
                    (<span style="color: #e45649;">and</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not match table hlines.</span>
                     (not (<span style="color: #e45649;">and</span> (equal marker <span style="color: #50a14f;">"+"</span>)
                               (org-match-line
                                <span style="color: #50a14f;">"[ \t]*</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">(</span><span style="color: #50a14f;">|[-+]+|?</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">|</span><span style="color: #50a14f;">\\+[-+]+\\+</span><span style="color: #4078f2;">\\</span><span style="color: #4078f2;">)</span><span style="color: #50a14f;">[ \t]*$"</span>)))
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not match headline stars.  Do not consider</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">stars of a headline as closing marker for bold</span>
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">markup either.</span>
                     (not (<span style="color: #e45649;">and</span> (equal marker <span style="color: #50a14f;">"*"</span>)
                               (<span style="color: #e45649;">save-excursion</span>
                                 (forward-char)
                                 (skip-chars-backward <span style="color: #50a14f;">"*"</span>)
                                 (looking-at-p org-outline-regexp-bol))))
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Match full emphasis markup regexp.</span>
                     (looking-at (<span style="color: #e45649;">if</span> verbatim? org-verbatim-re org-emph-re))
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not span over paragraph boundaries.</span>
                     (not (string-match-p org-element-paragraph-separate
                                          (match-string 2)))
                     <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">Do not span over cells in table rows.</span>
                     (not (<span style="color: #e45649;">and</span> (<span style="color: #e45649;">save-match-data</span> (org-match-line <span style="color: #50a14f;">"[ \t]*|"</span>))
                               (string-match-p <span style="color: #50a14f;">"|"</span> (match-string 4))))))
              <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">beg</span>
              (<span style="color: #e45649;">pcase-let</span> ((`(,_ ,face ,_ ,props) (assoc marker org-emphasis-alist)))
                <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">end</span>
                (font-lock-prepend-text-property
                 (match-beginning 2) (match-end 2) 'face face)
                (<span style="color: #e45649;">when</span> verbatim?
                  (org-remove-flyspell-overlays-in
                   (match-beginning 0) (match-end 0))
                  (remove-text-properties (match-beginning 2) (match-end 2)
                                          '(display t invisible t intangible t)))
                (add-text-properties (match-beginning 2) (match-end 2)
                                     '(font-lock-multiline t org-emphasis t))
                <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">beg</span>
                (<span style="color: #e45649;">when</span> props
                  (add-text-properties (match-end 4) (match-beginning 5)
                                       props)
                  (add-text-properties (match-beginning 3) (match-end 3)
                                       props))
                <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">end</span>
                (<span style="color: #e45649;">when</span> org-hide-emphasis-markers
                  (add-text-properties (match-end 4) (match-beginning 5)
                                       '(invisible org-link))
                  (add-text-properties (match-beginning 3) (match-end 3)
                                       '(invisible org-link)))
                (<span style="color: #e45649;">throw</span> <span style="color: #b751b6;">:exit</span> t)))))))))
</pre>
</div>
</div>
</div>
]]></description>

<pubDate>Tue, 07 Jul 2020 21:38:00 -0400</pubDate>
</item>
