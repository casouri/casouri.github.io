<item>
<title>Insert Math Symbol in Emacs</title>
<link>https://archive.casouri.cat/note/2020/insert-math-symbol-in-emacs</link>
<guid>https://archive.casouri.cat/note/2020/insert-math-symbol-in-emacs</guid>
<description><![CDATA[<p>
Typing math symbols is often a tedious task. You either search through a bunch of symbol panels and click the one you want, or type TeX macros that you may or may not remember, or execute complex key bindings to enter a limited set of symbols. I recently learned about TeXmacs’ solution to symbol insertion: you type a symbol that’s more or less similar to the one you have in mind and use <code>TAB</code> to mutate it into the one desired. Say you want to enter <code>⊂</code>, you type <code>&lt;</code> and hit <code>TAB</code> several times, go through <code>≤</code>, <code>∈</code>,  <code>⊏</code> and finally arrive at <code>⊂</code>. It’s easy to remember, fast to insert, and can encode a lot of symbols.
</p>

<p>
TeXmacs is great, but I want to do the same thing in Emacs. Here is a demo of the command I use:
</p>


<div id="orgb370a5a" class="figure">
<p><img src="note/2020/insert-math-symbol-in-emacs/transform2.gif" alt="transform2.gif" />
</p>
</div>

<p>
It has two features mimicking TeXmacs: 1) you can hit a key (say <code>TAB</code>) and go through each variant of the symbol before point. 2) you can add an “accent modifier” after the symbol and hit the same key (<code>TAB</code>) to accent it. In the above demo I accented <code>⊃</code> into <code>⊇</code> by adding a <code>_</code> accent modifier and hitting <code>TAB</code>.
</p>

<p>
Bind <code>transform-previous-char</code> to some key, and that key would do both tasks: transform and accent. You can also hit <code>C-n/p</code> to go back and forth when transforming. If you want to customize the symbols, look at <code>transform-list</code> and <code>accent-list</code>. And make sure accent modifiers is not in <code>transform-list</code>, in that case it is always treated as a modifier, rather than a variant.
</p>

<p>
There are some minor limitations. First, my command doesn’t support multi-character symbols; second, accent modifiers are order sensitive, e.g., you have to apply <code>/</code> after <code>_</code>.
</p>

<p>
I have set up some default variant and accents.
</p>
<pre class="example" id="org6a7b837">
Variant

*×·⊗⊙	+⊕	|⊦⊨	/÷	\∖
&lt;∈⊂⊏	&gt;∋⊃⊐	=≈	v∨∪	^∧∩	0∅
Rℝ	Zℤ	Qℚ	Nℕ	Cℂ
aαΑ∀	bβΒ	gγΓ	dδΔ	eεΕ∃	zζΖ	hηΗ	qθΘ
iιΙ	kκΚ	lλΛ	mμΜ	nνΝ∩	xξΞ	oοΟ	pπΠ
rρΡ	sσΣ	tτΤ	yυΥ	fφΦ	cχΧ	uψΨ∪	wωΩ

Accent

_:	&lt;≤	⊂⊆	⊏⊑	&gt;≥	⊃⊇	⊐⊒
/:	=≠	&lt;≮	≤≰	∈∉	⊂⊄	⊆⊈
	&gt;≯	≥≱	∋∌	⊃⊅	⊇⊉
</pre>

<p>
Finally, the code. You can also find it in my <a href="https://github.com/casouri/lunarymacs/blob/master/site-lisp/transform.el">config</a>. Make sure you enable lexical binding.
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">-*- lexical-binding: t; -*-</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">cl-lib</span><span style="color: #2C79F5;">)</span>
<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">require</span> '<span style="color: #A8289C;">subr-x</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">transform-list</span>
  <span style="color: #A8289C;">(</span>mapcar <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">(</span>x<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>mapcar #'identity x<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
          <span style="color: #489446;">(</span>split-string <span style="color: #DA7A48;">(</span>string-join
                         '<span style="color: #A8289C;">(</span><span style="color: #489446;">"*&#215;&#183;&#8855;&#8857; +&#8853; |&#8870;&#8872; /&#247; \\&#8726;"</span>
                           <span style="color: #489446;">"&lt;&#8712;&#8834;&#8847; &gt;&#8715;&#8835;&#8848; =&#8776;"</span>
                           <span style="color: #489446;">"v&#8744;&#8746; ^&#8743;&#8745; 0&#8709;"</span>
                           <span style="color: #489446;">"R&#8477; Z&#8484; Q&#8474; N&#8469; C&#8450;"</span>
                           <span style="color: #489446;">"a&#945;&#913;&#8704; b&#946;&#914; g&#947;&#915; d&#948;&#916; e&#949;&#917;&#8707; z&#950;&#918; h&#951;&#919; q&#952;&#920;"</span>
                           <span style="color: #489446;">"i&#953;&#921; k&#954;&#922; l&#955;&#923; m&#956;&#924; n&#957;&#925;&#8745; x&#958;&#926; o&#959;&#927; p&#960;&#928;"</span>
                           <span style="color: #489446;">"r&#961;&#929; s&#963;&#931; t&#964;&#932; y&#965;&#933; f&#966;&#934; c&#967;&#935; u&#968;&#936;&#8746; w&#969;&#937;"</span><span style="color: #A8289C;">)</span>
                         <span style="color: #489446;">" "</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Each element of the list is a list of related variants."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defvar</span> <span style="color: #A8289C;">accent-list</span>
  <span style="color: #A8289C;">(</span>mapcar <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">(</span>c<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>cons <span style="color: #A8289C;">(</span>car c<span style="color: #A8289C;">)</span>
                            <span style="color: #A8289C;">(</span>mapcar <span style="color: #987816;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">(</span>s<span style="color: #2C79F5;">)</span>
                                      <span style="color: #2C79F5;">(</span>mapcar #'identity s<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
                                    <span style="color: #987816;">(</span>split-string <span style="color: #2C79F5;">(</span>cdr c<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
          '<span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>?_ . <span style="color: #489446;">"&lt;&#8804; &#8834;&#8838; &#8847;&#8849; &gt;&#8805; &#8835;&#8839; &#8848;&#8850;"</span><span style="color: #DA7A48;">)</span>
            <span style="color: #DA7A48;">(</span>?/ . <span style="color: #489446;">"=&#8800; &lt;&#8814; &#8804;&#8816; &#8712;&#8713; &#8834;&#8836; &#8838;&#8840; &gt;&#8815; &#8805;&#8817; &#8715;&#8715;&#824; &#8835;&#8837; &#8839;&#8841;"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span>

  <span style="color: #9a9ea2;">"Each car is the accent modifier, cdr is a list ((ORIGINAL ACCENT) ...)."</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform--get-variant-list</span> <span style="color: #A8289C;">(</span>char<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Find CHAR in &#8216;</span><span style="color: #A8289C;">transform-list</span><span style="color: #9a9ea2;">&#8217;, return (index . variant-list).</span>
<span style="color: #9a9ea2;">Return nil if none found. CHAR is a character."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">catch</span> '<span style="color: #A8289C;">ret</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">dolist</span> <span style="color: #DA7A48;">(</span>variant-list transform-list nil<span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">cl-loop</span> for variant in variant-list
               for idx from 0 to <span style="color: #A8289C;">(</span>1- <span style="color: #987816;">(</span>length variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
               if <span style="color: #A8289C;">(</span>eq variant char<span style="color: #A8289C;">)</span>
               do <span style="color: #A8289C;">(</span><span style="color: #E04E49;">throw</span> '<span style="color: #A8289C;">ret</span> <span style="color: #987816;">(</span>cons idx variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform--make-step-fn</span> <span style="color: #A8289C;">(</span>variant-list init-idx<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Return a stepping function that steps through each variation.</span>
<span style="color: #9a9ea2;">At first the index is INIT-IDX.</span>
<span style="color: #9a9ea2;">VARIANT-LIST is a list of variant characters.</span>

<span style="color: #9a9ea2;">The step function takes a integer &#8220;step&#8221; that changes the index</span>
<span style="color: #9a9ea2;">of current variant, e.g. 1 is next, -1 is prev. It returns the</span>
<span style="color: #9a9ea2;">current index after adding the &#8220;step&#8221; with current index.</span>

<span style="color: #9a9ea2;">The step function with step across the variant list and change</span>
<span style="color: #9a9ea2;">the character before point to the current variant."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>variant-index <span style="color: #A8289C;">(</span><span style="color: #E04E49;">or</span> init-idx 0<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #DA7A48;">(</span>step<span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">step</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">setq</span> variant-index <span style="color: #A8289C;">(</span>+ step variant-index<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">manage ring</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">when</span> <span style="color: #A8289C;">(</span>eq variant-index <span style="color: #987816;">(</span>length variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setq</span> variant-index 0<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">when</span> <span style="color: #A8289C;">(</span>&lt; variant-index 0<span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">setq</span> variant-index <span style="color: #987816;">(</span>1- <span style="color: #2C79F5;">(</span>length variant-list<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">edit &amp; message</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">atomic-change-group</span>
        <span style="color: #A8289C;">(</span>delete-char -1<span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span>insert <span style="color: #987816;">(</span>nth variant-index variant-list<span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span>message <span style="color: #489446;">"%s"</span> <span style="color: #A8289C;">(</span>transform--make-message variant-list
                                             variant-index<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform--make-message</span> <span style="color: #A8289C;">(</span>variant-list index<span style="color: #A8289C;">)</span>
  <span style="color: #9a9ea2;">"Make a string that displays each variant in VARIANT-LIST.</span>
<span style="color: #9a9ea2;">Highlight the one marked by INDEX."</span>
  <span style="color: #A8289C;">(</span>string-join <span style="color: #489446;">(</span><span style="color: #E04E49;">cl-loop</span> for variant in variant-list
                        for idx from 0 to <span style="color: #DA7A48;">(</span>1- <span style="color: #A8289C;">(</span>length variant-list<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
                        if <span style="color: #DA7A48;">(</span>eq idx index<span style="color: #DA7A48;">)</span>
                        collect <span style="color: #DA7A48;">(</span>propertize <span style="color: #A8289C;">(</span>char-to-string variant<span style="color: #A8289C;">)</span>
                                            'face 'highlight<span style="color: #DA7A48;">)</span>
                        else collect <span style="color: #DA7A48;">(</span>char-to-string variant<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
               <span style="color: #489446;">"&#8201;"</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">transform-previous-char</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Transform char before point.</span>

<span style="color: #9a9ea2;">If previous char is &#8220;/&#8221; or &#8220;_&#8221;, apply &#8216;</span><span style="color: #A8289C;">accent-previous-char</span><span style="color: #9a9ea2;">&#8217;</span>
<span style="color: #9a9ea2;">instead."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">if</span> <span style="color: #489446;">(</span>member <span style="color: #DA7A48;">(</span>char-before<span style="color: #DA7A48;">)</span> <span style="color: #DA7A48;">(</span>mapcar #'car accent-list<span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
      <span style="color: #489446;">(</span>accent-previous-char<span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">if-let</span> <span style="color: #DA7A48;">(</span><span style="color: #A8289C;">(</span>c <span style="color: #987816;">(</span>transform--get-variant-list <span style="color: #2C79F5;">(</span>char-before<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">let*</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>index <span style="color: #2C79F5;">(</span>car c<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
               <span style="color: #987816;">(</span>variant-list <span style="color: #2C79F5;">(</span>cdr c<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
               <span style="color: #987816;">(</span>step-fn <span style="color: #2C79F5;">(</span>transform--make-step-fn variant-list index<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
               <span style="color: #987816;">(</span>map <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">let</span> <span style="color: #80a880;">(</span><span style="color: #887070;">(</span>map <span style="color: #2C79F5;">(</span>make-sparse-keymap<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      <span style="color: #80a880;">(</span>define-key map <span style="color: #887070;">(</span>kbd <span style="color: #489446;">"C-n"</span><span style="color: #887070;">)</span>
                        <span style="color: #887070;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>funcall step-fn 1<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      <span style="color: #80a880;">(</span>define-key map <span style="color: #887070;">(</span>kbd <span style="color: #489446;">"C-p"</span><span style="color: #887070;">)</span>
                        <span style="color: #887070;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>funcall step-fn -1<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      <span style="color: #80a880;">(</span>define-key map <span style="color: #887070;">(</span>this-command-keys<span style="color: #887070;">)</span>
                        <span style="color: #887070;">(</span><span style="color: #E04E49;">lambda</span> <span style="color: #2C79F5;">()</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #2C79F5;">)</span> <span style="color: #2C79F5;">(</span>funcall step-fn 1<span style="color: #2C79F5;">)</span><span style="color: #887070;">)</span><span style="color: #80a880;">)</span>
                      map<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span>
          <span style="color: #A8289C;">(</span>funcall step-fn 1<span style="color: #A8289C;">)</span>
          <span style="color: #A8289C;">(</span>set-transient-map map t<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
      <span style="color: #DA7A48;">(</span><span style="color: #987816;">user-error</span> <span style="color: #489446;">"No variant found"</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>

<span style="color: #2C79F5;">(</span><span style="color: #E04E49;">defun</span> <span style="color: #A8289C;">accent-previous-char</span> <span style="color: #A8289C;">()</span>
  <span style="color: #9a9ea2;">"Accent previous char by its trailing accent modifier."</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">interactive</span><span style="color: #A8289C;">)</span>
  <span style="color: #A8289C;">(</span><span style="color: #E04E49;">let</span> <span style="color: #489446;">(</span><span style="color: #DA7A48;">(</span>modifier-list <span style="color: #A8289C;">(</span>mapcar #'car accent-list<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span>
    <span style="color: #489446;">(</span><span style="color: #E04E49;">if</span> <span style="color: #DA7A48;">(</span>not <span style="color: #A8289C;">(</span>member <span style="color: #987816;">(</span>char-before<span style="color: #987816;">)</span> modifier-list<span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span>
        <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">base case, prev char is normal char</span>
        nil
      <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">recursion case  &lt;char&gt;&lt;mod&gt;|</span>
      <span style="color: #DA7A48;">(</span><span style="color: #E04E49;">let</span> <span style="color: #A8289C;">(</span><span style="color: #987816;">(</span>modifier <span style="color: #2C79F5;">(</span>char-before<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
            old-char new-char<span style="color: #A8289C;">)</span>
        <span style="color: #A8289C;">(</span><span style="color: #E04E49;">atomic-change-group</span>
          <span style="color: #987816;">(</span>delete-char -1<span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span>accent-previous-char<span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> old-char <span style="color: #2C79F5;">(</span>char-before<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
          <span style="color: #9a9ea2;">;; </span><span style="color: #9a9ea2;">find accented char</span>
          <span style="color: #987816;">(</span><span style="color: #E04E49;">setq</span> new-char <span style="color: #2C79F5;">(</span>car <span style="color: #80a880;">(</span>alist-get
                               old-char
                               <span style="color: #887070;">(</span>alist-get modifier accent-list<span style="color: #887070;">)</span><span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span>
          <span style="color: #987816;">(</span><span style="color: #E04E49;">if</span> <span style="color: #2C79F5;">(</span><span style="color: #E04E49;">or</span> <span style="color: #80a880;">(</span>not new-char<span style="color: #80a880;">)</span> <span style="color: #80a880;">(</span>eq new-char 32<span style="color: #80a880;">)</span><span style="color: #2C79F5;">)</span>
              <span style="color: #2C79F5;">(</span><span style="color: #987816;">user-error</span> <span style="color: #489446;">"No accent found"</span><span style="color: #2C79F5;">)</span>
            <span style="color: #2C79F5;">(</span>delete-char -1<span style="color: #2C79F5;">)</span>
            <span style="color: #2C79F5;">(</span>insert new-char<span style="color: #2C79F5;">)</span><span style="color: #987816;">)</span><span style="color: #A8289C;">)</span><span style="color: #DA7A48;">)</span><span style="color: #489446;">)</span><span style="color: #A8289C;">)</span><span style="color: #2C79F5;">)</span>
</pre>
</div>
]]></description>
<pubDate>Wed, 26 Feb 2020 10:16:00 -0500</pubDate>
</item>
