<item>
<title>Theme and Font in Emacs</title>
<link>https://archive.casouri.cat/note/2019/theme-and-font-in-emacs</link>
<guid>https://archive.casouri.cat/note/2019/theme-and-font-in-emacs</guid>
<description><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org7d589aa">1. Theme</a>
<ul>
<li><a href="#org57a1c30">1.1. Face</a></li>
<li><a href="#orgc2bd646">1.2. My configuration</a></li>
</ul>
</li>
<li><a href="#org12eef75">2. Font</a>
<ul>
<li><a href="#orgb63c2ed">2.1. My configuration</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
Theme and font almost drove me nuts when I first try to configure Emacs by myself (instead of using Spacemacs). They don’t “just work”, at least for me, at that time. In this post I introduce some basic information about themes and font setting in Emacs and how do I configure them.
</p>

<div id="outline-container-org7d589aa" class="outline-2">
<h2 id="org7d589aa"><span class="section-number-2">1</span> Theme</h2>
<div class="outline-text-2" id="text-1">
<p>
A theme is basically a set of faces. You can enable (apply) a theme by <code>load-theme</code> and disable a theme by <code>disable-theme</code>. If you installed some theme but cannot find it when you invoke <code>load-theme</code>, it’s probably because the theme file is not in <code>custom-theme-load-path</code>. By default it only contains <code>user-emacs-directory</code>, a.k.a. <code>~/.emacs.d</code>.
</p>
</div>

<div id="outline-container-org57a1c30" class="outline-3">
<h3 id="org57a1c30"><span class="section-number-3">1.1</span> Face</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Face is the styling of a piece of text in Emacs. It controls the background color, foreground color, weight, underline, slant, etc. For more information see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Faces.html#Faces">(Info) Face</a>. A full list of available attributes see <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html">(Info) Face Attributes</a>.
</p>
</div>
</div>

<div id="outline-container-orgc2bd646" class="outline-3">
<h3 id="orgc2bd646"><span class="section-number-3">1.2</span> My configuration</h3>
<div class="outline-text-3" id="text-1-2">
<p>
First we want to be able to toggle between several most used themes. I use two themes — a light theme and a dark theme.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defvar luna-toggle-theme-list ()
  "Themes that you can toggle bwtween by `luna-switch-theme'")

(defun luna-switch-theme ()
  "Switch between themes in `luna-toggle-theme-list'"
  (interactive)
  ;; move the fist element to last
  (let ((index (or (cl-position luna-current-theme luna-toggle-theme-list)
                   (progn (message "`luna-current-theme' is not in `luna-toggle-theme-list', default to the first one") 0)))
        (len (length luna-toggle-theme-list)))
    (luna-load-theme (nth (% (1+ index) len) luna-toggle-theme-list) t)))
</pre>
</div>

<p>
We also want a hook that run whenever theme changes. To be honest, I forgot why I add the condition case. You can remove it and see what happens.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defvar luna-load-theme-hook ()
  "Hook ran after `load-theme'")

(defun luna-run-load-theme-hook (&amp;rest _)
  "Run `luna-load-theme-hook'."
  (condition-case err
      (run-hook-with-args 'luna-load-theme-hook)
    ((error (message (error-message-string err))))))

(advice-add #'load-theme :after #'luna-run-load-theme-hook)
</pre>
</div>

<p>
Because loading a custom theme is just applying a bunch of faces, you can load multiple theme on top of each other. Therefore it doesn’t make sense to have the “curent theme”. But I never use multiple themes at once and I need to know the current theme from time to time. So I just record the last loaded theme as the “current theme”.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun luna-set-current-theme (theme &amp;rest _)
  "Adveiced before `load-theme', set `luna-current-theme' to THEME."
  (setq luna-current-theme theme))

(advice-add #'load-theme :before #'luna-set-current-theme)
</pre>
</div>

<p>
If you load theme A on startup, and switch to theme B, then shut down Emacs, next time when you start Emacs, theme A will be loaded. Intuitively you would expect theme B, so you need something to remember the theme loaded and load that theme on startup. Customize is a “beginner friendly way to configure Emacs”, but <del>everyone</del> I mostly use it as a session persistent storage.
</p>

<p>
Every time I use <code>luna-switch-theme</code> or <code>luna-load-theme</code>, the new theme is recorded.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defcustom luna-theme nil
  "The theme used on startup.
This way luanrymacs remembers the theme."
  :type 'symbol
  :group 'convenience)

(defun luna-load-theme (&amp;optional theme no-confirm no-enable)
  "Disable `luna-currnt-theme' and oad THEME.
Set `luna-theme' to THEME."
  (disable-theme luna-current-theme)
  (load-theme (or theme luna-theme (car luna-toggle-theme-list)) no-confirm no-enable)
  (when (or theme (not (custom-variable-p 'luna-theme)))
    (customize-set-variable 'luna-theme theme)))
</pre>
</div>

<p>
Then in <code>init.el</code> I simply have
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(luna-load-theme nil t)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org12eef75" class="outline-2">
<h2 id="org12eef75"><span class="section-number-2">2</span> Font</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://idiocy.org/emacs-fonts-and-fontsets.html">Emacs, fonts and fontsets</a> explains how does fonts work in Emacs and how to set them.
</p>
</div>

<div id="outline-container-orgb63c2ed" class="outline-3">
<h3 id="orgb63c2ed"><span class="section-number-3">2.1</span> My configuration</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Similar to theme, I have facility to select a font to load and remember the last font loaded.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defcustom luna-font nil
  "Like `luna-theme', used to cache configuration across sessions."
  :type 'string
  :group 'convenience)

(defcustom luna-cjk-font nil
  "Like `luna-font'."
  :type 'string
  :group 'convenience)

(defvar luna-font-alist
  '((sf-mono-13 . (:family "SF Mono" :size 13)))
  "An alist of all the fonts you can switch between by `luna-load-font'.
Key is a symbol as the name, value is a plist specifying the font spec.
More info about spec in `font-spec'.")

(defvar luna-cjk-font-alist
  '((soure-han-serif-13 . (:family "Source Han Serif SC"
                                   :size 13)))
  "Similar to `luna-font-alist' but used for CJK scripts.
Use `luna-load-cjk-font' to load them.")

(defun luna-load-font (&amp;optional font-name)
  "Prompt for a font and set it.
Fonts are specified in `luna-font-alist'.

Changes are saved to custom.el in a idle timer."
  (interactive (list
                (completing-read "Choose a font: "
                                 (mapcar (lambda (cons) (symbol-name (car cons)))
                                         luna-font-alist))))

  (let* ((arg font-name)
         (font-name (or font-name luna-font))
         (font (apply #'font-spec
                      (if font-name (alist-get (intern font-name)
                                               luna-font-alist)
                        (cdar luna-font-alist)))))
    (set-frame-font font nil t)
    ;; seems that there isn't a good way to get font-object directly
    (add-to-list 'default-frame-alist `(font . ,(face-attribute 'default :font)))
    (when (or arg (not (custom-variable-p 'luna-font)))
      (customize-set-variable 'luna-font font-name))))

(defun luna-load-cjk-font (&amp;optional font-name)
  "Prompt for a font and set it.
Fonts are specified in `luna-font-alist'.

Changes are saved to custom.el in a idle timer."
  (interactive (list
                (completing-read "Choose a font: "
                                 (mapcar (lambda (cons) (symbol-name (car cons)))
                                         luna-cjk-font-alist))))
  (let* ((arg font-name)
         (font-name (or font-name luna-cjk-font))
         (font-spec (apply #'font-spec
                           (if font-name
                               (alist-get (intern font-name)
                                          luna-cjk-font-alist)
                             (cdar luna-cjk-font-alist)))))
    (dolist (charset '(kana han cjk-misc))
      (set-fontset-font t charset font-spec))
    (when (or arg (not (custom-variable-p 'luna-cjk-font)))
      (customize-set-variable 'luna-cjk-font font-name))))
</pre>
</div>

<p>
In <code>init.el</code> I write
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(luna-load-font)
(luna-load-cjk-font)
</pre>
</div>
</div>
</div>
</div>
]]></description>

<pubDate>Sat, 03 Aug 2019 11:38:00 -0400</pubDate>
</item>
