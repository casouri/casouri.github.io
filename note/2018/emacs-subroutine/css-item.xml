<item>
<title>Emacs Subroutine</title>
<link>https://archive.casouri.co.uk/note/2018/emacs-subroutine/</link>
<guid>https://archive.casouri.co.uk/note/2018/emacs-subroutine/</guid>
<description><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-09-23 Mon 10:51 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Emacs Subroutine</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Yuan Fu" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>
<script type="text/javascript" src="../../script.js"></script>
<link rel="icon" type="image/png" href="../../../favicon.png">
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../../index.html"> UP </a>
 |
 <a accesskey="H" href="../../index.html"> HOME </a>
</div><div id="content">
<h1 class="title">Emacs Subroutine</h1>
<p>
Some goodies I found when glancing through <code>subr.el</code>:
</p>

<pre class="example">
(defalias 'beep 'ding) ;preserve lingual purity
</pre>

<pre class="example">
add-to-ordered-list
add-to-history
define-symbol-prop
locate-library
process-lines
read-char-choice
read-xxx
atomic-change-group
xxx-change-group
momentary-string-display
play-sound
subrp
track-mouse
with-temp-file
with-output-to-string
while-no-input
with-demoted-errors
combine-after-change-calls
with-file-modes
subst-char-in-string
load-history-regexp
forward-whitespace
text-clone-create
define-mail-user-agent
backtrace-frames
make-progress-reporter
with-mutex

(subr-x.el)

string-trim-left
string-trim-xxx
string-remove-prefix

(seq.el)

seq-doseq
seq-let
seq-do-indexed
seq-copy
seq-subseq
seq-drop
seq-take-while
seq-group-by
</pre>

<p>
康斯帕瓦：
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun caar (x)
  "Return the car of the car of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car x)))

(defun cadr (x)
  "Return the car of the cdr of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr x)))

(defun cdar (x)
  "Return the cdr of the car of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car x)))

(defun cddr (x)
  "Return the cdr of the cdr of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr x)))

(defun caaar (x)
  "Return the `car' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (car x))))

(defun caadr (x)
  "Return the `car' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (cdr x))))

(defun cadar (x)
  "Return the `car' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (car x))))

(defun caddr (x)
  "Return the `car' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (cdr x))))

(defun cdaar (x)
  "Return the `cdr' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (car x))))

(defun cdadr (x)
  "Return the `cdr' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (cdr x))))

(defun cddar (x)
  "Return the `cdr' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (car x))))

(defun cdddr (x)
  "Return the `cdr' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (cdr x))))

(defun caaaar (x)
  "Return the `car' of the `car' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (car (car x)))))

(defun caaadr (x)
  "Return the `car' of the `car' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (car (cdr x)))))

(defun caadar (x)
  "Return the `car' of the `car' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (cdr (car x)))))

(defun caaddr (x)
  "Return the `car' of the `car' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (car (cdr (cdr x)))))

(defun cadaar (x)
  "Return the `car' of the `cdr' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (car (car x)))))

(defun cadadr (x)
  "Return the `car' of the `cdr' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (car (cdr x)))))

(defun caddar (x)
  "Return the `car' of the `cdr' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (cdr (car x)))))

(defun cadddr (x)
  "Return the `car' of the `cdr' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (car (cdr (cdr (cdr x)))))

(defun cdaaar (x)
  "Return the `cdr' of the `car' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (car (car x)))))

(defun cdaadr (x)
  "Return the `cdr' of the `car' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (car (cdr x)))))

(defun cdadar (x)
  "Return the `cdr' of the `car' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (cdr (car x)))))

(defun cdaddr (x)
  "Return the `cdr' of the `car' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (car (cdr (cdr x)))))

(defun cddaar (x)
  "Return the `cdr' of the `cdr' of the `car' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (car (car x)))))

(defun cddadr (x)
  "Return the `cdr' of the `cdr' of the `car' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (car (cdr x)))))

(defun cdddar (x)
  "Return the `cdr' of the `cdr' of the `cdr' of the `car' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (cdr (car x)))))

(defun cddddr (x)
  "Return the `cdr' of the `cdr' of the `cdr' of the `cdr' of X."
  (declare (compiler-macro internal--compiler-macro-cXXr))
  (cdr (cdr (cdr (cdr x)))))
</pre>
</div>
</div>
</body>
</html>]]></description>

<pubDate>Sat, 22 Dec 2018 19:26:00 -0500</pubDate>
</item>
