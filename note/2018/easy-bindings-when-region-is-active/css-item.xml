<item>
<title>Easy Bindings when Region Is Active</title>
<link>https://archive.casouri.cat/note/2018/easy-bindings-when-region-is-active</link>
<guid>https://archive.casouri.cat/note/2018/easy-bindings-when-region-is-active</guid>
<description><![CDATA[<p>
In Emacs, "region active" means <code>transient-mark-mode</code> is on, which roughly means you selected some text.
In this state, you can bind some "easy" bindings, i.e., bindings without modifiers.
These easy bindings can greatly improve your text editing experience. Here is what I binded:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key</th>
<th scope="col" class="org-left">Operation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>p</code></td>
<td class="org-left"><code>yank</code> (paste)</td>
</tr>

<tr>
<td class="org-left"><code>y</code></td>
<td class="org-left"><code>kill-ring-save</code> (copy)</td>
</tr>

<tr>
<td class="org-left"><code>C-y</code></td>
<td class="org-left"><code>kill-ring-save</code> (copy)</td>
</tr>

<tr>
<td class="org-left"><code>Y</code></td>
<td class="org-left">(copy but don't exist <code>transient-mark-mode</code>)</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left"><code>s</code></td>
<td class="org-left"><code>isolate-quick-add</code></td>
</tr>

<tr>
<td class="org-left"><code>S</code></td>
<td class="org-left"><code>isolate-long-add</code></td>
</tr>

<tr>
<td class="org-left"><code>d</code></td>
<td class="org-left"><code>isolate-quick-delete</code></td>
</tr>

<tr>
<td class="org-left"><code>D</code></td>
<td class="org-left"><code>isolate-long-delete</code></td>
</tr>

<tr>
<td class="org-left"><code>c</code></td>
<td class="org-left"><code>isolate-quick-change</code></td>
</tr>

<tr>
<td class="org-left"><code>C</code></td>
<td class="org-left"><code>isolate-long-change</code></td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left"><code>f</code></td>
<td class="org-left"><code>er/mark-defun</code> (select function point)</td>
</tr>

<tr>
<td class="org-left"><code>w</code></td>
<td class="org-left"><code>er/mark-word</code> (select word at point)</td>
</tr>

<tr>
<td class="org-left"><code>W</code></td>
<td class="org-left"><code>er/mark-symbol</code> (select symbol at point)</td>
</tr>

<tr>
<td class="org-left"><code>P</code></td>
<td class="org-left"><code>mark-paragraph</code> (select paragraph at point)</td>
</tr>

<tr>
<td class="org-left"><code>q</code></td>
<td class="org-left"><code>er/mark-inside-quotes</code> (select inside quote)</td>
</tr>

<tr>
<td class="org-left"><code>Q</code></td>
<td class="org-left"><code>er/mark-outside-quotes</code> (select including quote)</td>
</tr>

<tr>
<td class="org-left"><code>b</code></td>
<td class="org-left"><code>er/mark-inside-pairs</code> (select inside pair)</td>
</tr>

<tr>
<td class="org-left"><code>B</code></td>
<td class="org-left"><code>er/mark-outside-pairs</code> (selct including pair)</td>
</tr>
</tbody>
</table>

<p>
Some remarks:
</p>

<ol class="org-ol">
<li>I bind <code>C-y</code> to <code>yank</code> out side selection,
so <code>C-y</code> pastes when nothing is selected and copies when something is selected.</li>
<li><code>isolate-xxx</code> commands are from <a href="https://github.com/casouri/isolate">isolate.el</a>, basically <a href="https://github.com/emacs-evil/evil-surround/blob/master/readme.org">evil-surround</a> for vanilla Emacs.</li>
<li>marking commands are like Vim text objects, I normally start region with <code>set-mark-command</code>
and use these short cuts to select the text object that I want.</li>
</ol>

<p>
<b><span class="timestamp-wrapper"><span class="timestamp">&lt;2019-08-03 Sat&gt; </span></span> Update:</b>
</p>

<p>
Code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defconst angel-transient-mode-map-alist
  `((mark-active
     ,@(let ((map (make-sparse-keymap)))
         ;; operations
         (define-key map "p" (lambda (b e)
                               (interactive "r") (delete-region b e) (yank)))
         (define-key map "x" #'exchange-point-and-mark)
         (define-key map ";" #'comment-dwim)
         (define-key map "y" #'kill-ring-save)
         (define-key map (kbd "C-y") #'kill-ring-save)
         (define-key map "Y" (lambda
                               (b e)
                               (interactive "r")
                               (kill-new (buffer-substring b e))
                               (message "Region saved")))
         ;; isolate
         (define-key map "s" #'isolate-quick-add)
         (define-key map "S" #'isolate-long-add)
         (define-key map "d" #'isolate-quick-delete)
         (define-key map "D" #'isolate-long-delete)
         (define-key map "c" #'isolate-quick-change)
         (define-key map "C" #'isolate-long-change)
         ;; mark things
         (define-key map "f" #'er/mark-defun)
         (define-key map "w" #'er/mark-word)
         (define-key map "W" #'er/mark-symbol)
         (define-key map "P" #'mark-paragraph)
         ;; inner &amp; outer
         ;; (define-key map "C-i" inner-map)
         ;; (define-key map "C-a" outer-map)
         ;; (define-key inner-map "q" #'er/mark-inside-quotes)
         ;; (define-key outer-map "q" #'er/mark-outside-quotes)
         ;; (define-key inner-map "b" #'er/mark-inside-pairs)
         ;; (define-key outer-map "b" #'er/mark-outside-pairs)
         (define-key map "q" #'er/mark-inside-quotes)
         (define-key map "b" #'er/mark-inside-pairs)

         ;; expand-region
         (define-key map (kbd "C--") #'er/contract-region)
         (define-key map (kbd "C-=") #'er/expand-region)
         map))))

(add-to-list 'emulation-mode-map-alists
             'angel-transient-mode-map-alist t)
</pre>
</div>
]]></description>

<pubDate>Thu, 15 Nov 2018 00:00:00 -0500</pubDate>
</item>
