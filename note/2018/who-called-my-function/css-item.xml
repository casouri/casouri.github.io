<item>
<title>Who Called My Function?</title>
<link>https://archive.casouri.cat/note/2018/who-called-my-function</link>
<guid>https://archive.casouri.cat/note/2018/who-called-my-function</guid>
<description><![CDATA[<p>
Someone asked why his Emacs starts up with two split screen.
Apparently something in his <code>init.el</code> caused that.
</p>

<p>
But how can we find what caused the problem?
I searched around and found a way to check "backtrace frame" in Emacs: <code>backtrace-frames</code>.
</p>

<p>
Here is what I cooked up:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(advice-add 'split-window-right :before (lambda (&amp;rest _) (print (backtrace-frames))))
(defun some-function () (split-window-right))
</pre>
</div>

<p>
So when I call the function <code>some-funtion</code>,
a split window is created with following information printed:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">((t backtrace-frames nil nil)
 (nil print
      ((backtrace-frames))
      nil)
 (t
  (lambda
    (&amp;rest _)
    (print
     (backtrace-frames)))
  nil nil)
 (t apply
    ((lambda
       (&amp;rest _)
       (print
        (backtrace-frames)))
     nil)
    nil)
 (t split-window-right nil nil)
 (t some-function nil nil)
 (t eval
    ((some-function)
     nil)
    nil)
 (t elisp--eval-last-sexp
    (t)
    nil)
 (t eval-last-sexp
    (t)
    nil)
 (t eval-print-last-sexp
    (nil)
    nil)
 (t funcall-interactively
    (eval-print-last-sexp nil)
    nil)
 (t call-interactively
    (eval-print-last-sexp nil nil)
    nil)
 (t command-execute
    (eval-print-last-sexp)
    nil))
</pre>
</div>

<p>
We can see <code>some-funtion</code> is right before <code>split-window</code>. Cool.
As for the other <code>t</code> and <code>nil</code> stuff, I chose to not bother.
</p>
]]></description>

<pubDate>Sun, 14 Oct 2018 00:00:00 -0400</pubDate>
</item>
