<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Emacs Notes</title>
  <link href="https://archive.casouri.cat/note" rel="self" />
  <updated>2021-12-21T17:07:00.00-05:00</updated>
  <author>
    <name>Yuan Fu</name>
  </author>
  <icon>https://archive.casouri.cat/favicon.png</icon>
  <id>urn:uuid:53fd03d4-ec1b-11eb-8cca-e7401fdbc2e2</id>
  
  <entry><title>A prelude for writing Emacs dynamic modules</title><link href="https://archive.casouri.cat/note/2021/emacs-module-prelude"/><id>urn:uuid:b973fd64-5ad2-11ec-87a6-b729d55f528f</id><updated>2021-12-11T14:36:00.00-05:00</updated><content type="html">&lt;p&gt;When writing &lt;a id="footref:xeft" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Axeft"&gt;an Emacs dynamic module for Xapian&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;, I found that calling Lisp functions in a dynamic module is painfully tedious. For example, the equivalent of&lt;/p&gt;&lt;pre class="code-block"&gt;(define-error 'xeft-error "Generic Xeft error" 'error)&lt;/pre&gt;&lt;p&gt;is&lt;/p&gt;&lt;pre class="code-block"&gt;emacs_value Qdefine_error = env-&amp;gt;intern (env, "define-error");
emacs_value Qxeft_error = env-&amp;gt;intern (env, "xeft-error");
emacs_value Qerror = env-&amp;gt;intern (env, "error");
char **text = "Generic Xeft error";
emacs_value message = env-&amp;gt;make_string (env, text , strlen (text));
emacs_value args[] = {Qxeft_error, message, Qerror};
int nargs = 3;
env-&amp;gt;funcall (env, Qdefine_error, nargs, args);&lt;/pre&gt;&lt;p&gt;Even though we usually only write a little Lisp for  defining the exposed functions and errors in a dynamic module, this is too much. Naturally I wrote some wrappers. With my wrappers, I can write the following instead:&lt;/p&gt;&lt;pre class="code-block"&gt;emp_funcall (env, "define-error", 3,
             emp_intern (env, "xeft-error"),
             emp_build_string (env, "Generic Xeft error"),
             emp_intern (env, "error"));&lt;/pre&gt;&lt;p&gt;I put these wrappers together into &lt;code&gt;emacs-module-prelude&lt;/code&gt;. Currently it provides these functions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;emp_define_function&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_funcall&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_intern&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_provide&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_signal_message1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_define_error&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_nilp&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_copy_string_contents&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;emp_build_string&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can find it at &lt;a href="https://archive.casouri.cat/note/2021/emacs-module-prelude/https:/github.com/casouri/emacs-module-prelude"&gt;&lt;em&gt;emacs-module-prelude&lt;/em&gt;&lt;/a&gt;. I can’t say that I’m a seasoned C programmer so use at your own risk. Corrections are very welcome.&lt;/p&gt;&lt;div id="footdef:xeft" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Axeft"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;For my note-searching package: &lt;a href="https://archive.casouri.cat/note/2021/emacs-module-prelude/https:/github.com/casouri/xeft"&gt;Xeft&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;</content></entry>
  <entry><title>Using Fontsets in Emacs</title><link href="https://archive.casouri.cat/note/2021/fontset"/><id>urn:uuid:336b8c2c-4d8b-11ec-967b-17e83717b0eb</id><updated>2021-11-24T17:01:00.00-05:00</updated><content type="html">&lt;h2 id="Fontset" class="section"&gt;Fontset?&lt;/h2&gt;&lt;p&gt;Fontset is a feature of Emacs that allows you to bundle together multiple fonts and use them as a single font, such that it covers more characters than a single font could have. For example, you can combine a Latin font, a Greek font and a Chinese font together.&lt;/p&gt;&lt;p&gt;With fontsets, we can use different Unicode fonts for different faces. For example, serif Latin and Chinese font for a “serif” face, and sans serif Latin and Chinese font for a “sans” face. Without fontsets, we can only set different Latin fonts to faces and use a single fall-back Chinese font.&lt;/p&gt;&lt;p&gt;&lt;img alt="A graph showing different fonts with different faces" src="https://archive.casouri.cat/note/2021/fontset/fonts%20&amp;amp;%20faces.svg"/&gt;&lt;/p&gt;&lt;h2 id="Create%20a%20fontset" class="section"&gt;Create a fontset&lt;/h2&gt;&lt;p&gt;A fontset is recognized by its name. Each fontset has two names, one short and one long. The short name looks like &lt;code&gt;fontset-xxx&lt;/code&gt;. The long name is a &lt;a href="https://archive.casouri.cat/note/2021/fontset/https:/wiki.archlinux.org/title/X_Logical_Font_Description"&gt;X Logical Font Description&lt;/a&gt; with last two fields being &lt;code&gt;fontset&lt;/code&gt; and &lt;code&gt;xxx&lt;/code&gt;. For example,&lt;/p&gt;&lt;pre class="code-block"&gt;-*-ibm plex mono-medium-*-*-*-13-*-*-*-*-*-fontset-my fontset&lt;/pre&gt;&lt;p&gt;Emacs come with three fontsets by default: &lt;code&gt;fontset-startup&lt;/code&gt;, &lt;code&gt;fontset-standard&lt;/code&gt; and &lt;code&gt;fontset-default&lt;/code&gt;. We only care about &lt;code&gt;fontset-default&lt;/code&gt;; it is the ultimate fall-back when Emacs cannot find a font to display a character. But more on that later.&lt;/p&gt;&lt;p&gt;To create a fontset, you can use &lt;code&gt;create-fontset-from-fontset-spec&lt;/code&gt; and pass it a bunch of X Logical Font Descriptions, each for a font you want to include. I find that tedious. Instead, I like to create a fontset with a single ASCII font and use &lt;code&gt;set-fontset-font&lt;/code&gt; to add other fonts later, like this:&lt;/p&gt;&lt;pre class="code-block"&gt;(create-fontset-from-fontset-spec
 (font-xlfd-name
  (font-spec :family "IBM Plex Mono"
             :size 13
             :registry "fontset-my fontset")))&lt;/pre&gt;&lt;p&gt;Make sure you put the short fontset name under the &lt;code&gt;:registry&lt;/code&gt; spec. The code above creates the fontset, and returns its long name,&lt;/p&gt;&lt;pre class="code-block"&gt;-*-ibm plex mono-*-*-*-*-13-*-*-*-*-*-fontset-my fontset&lt;/pre&gt;&lt;p&gt;Now we can add a Chinese font and a Greek font:&lt;/p&gt;&lt;pre class="code-block"&gt;(set-fontset-font
 "fontset-my fontset"
 'han (font-spec :family "Source Han Serif" :size 12))
(set-fontset-font
 "fontset-my fontset"
 'greek (font-spec :family "Academica"))&lt;/pre&gt;&lt;p&gt;If you are not familiar with &lt;code&gt;set-fontset-font&lt;/code&gt;, &lt;a href="https://archive.casouri.cat/note/2021/fontset/http:/idiocy.org/emacs-fonts-and-fontsets.html"&gt;&lt;em&gt;Emacs, fonts and fontsets&lt;/em&gt;&lt;/a&gt; is a good read.&lt;/p&gt;&lt;h2 id="Apply%20a%20fonset" class="section"&gt;Apply a fonset&lt;/h2&gt;&lt;p&gt;Although the manual says we can use a fontset wherever a font is appropriate, it is not entirely true. If you pass your fontset through the &lt;code&gt;:font&lt;/code&gt; attribute in &lt;code&gt;set-face-attribute&lt;/code&gt;, &lt;a id="footref:takes-ascii" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Atakes-ascii"&gt;Emacs takes the ASCII font from the fontset and only uses the ASCII font for the face&lt;sup class="inline-footref"&gt;1&lt;/sup&gt;&lt;/a&gt;. The real way to do it is to use the undocumented &lt;code&gt;:fontset&lt;/code&gt; attribute:&lt;/p&gt;&lt;pre class="code-block"&gt;(set-face-attribute
 'some-face nil :fontset "fontset-my fontset")&lt;/pre&gt;&lt;p&gt;That’s not all. While the above code works for most faces, setting &lt;code&gt;:fontset&lt;/code&gt; for &lt;code&gt;default&lt;/code&gt; will not work as you expected, because Emacs again &lt;a id="footref:default" class="footref-anchor obviously-a-link" aria-label="Jump to footnote" href="#footdef%3Adefault"&gt;only takes the ASCII font, even if you use the &lt;code&gt;fontset&lt;/code&gt; attribute&lt;sup class="inline-footref"&gt;2&lt;/sup&gt;&lt;/a&gt;. So don’t set the fontset for the &lt;code&gt;default&lt;/code&gt; face; instead, just modify &lt;code&gt;fontset-default&lt;/code&gt; (its the ultimate fall-back fontset we mentioned earlier) for Unicode fonts, and use whatever method you like for ASCII font. If you read &lt;a href="https://archive.casouri.cat/note/2021/fontset/http:/idiocy.org/emacs-fonts-and-fontsets.html"&gt;&lt;em&gt;Emacs, fonts and fontsets&lt;/em&gt;&lt;/a&gt;, you’ll know we can modify &lt;code&gt;fontset-default&lt;/code&gt; by either&lt;/p&gt;&lt;pre class="code-block"&gt;(set-fontset-font "fontset-default" ...)&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;&lt;pre class="code-block"&gt;(set-fontset-font t ...)&lt;/pre&gt;&lt;p&gt;Technically you could set the &lt;code&gt;font&lt;/code&gt; attribute of a frame to a fontset by &lt;code&gt;set-frame-font&lt;/code&gt; and it works fine. But as soon as you change any font-related attributes in &lt;code&gt;default&lt;/code&gt; face, like font size, your fontset in the frame attribute will be overwritten by the font derived from &lt;code&gt;default&lt;/code&gt; face. So the best way is still to just modify &lt;code&gt;fontset-default&lt;/code&gt;.&lt;/p&gt;&lt;div id="footdef:takes-ascii" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Atakes-ascii"&gt;1&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;According to &lt;a href="https://archive.casouri.cat/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3391"&gt;the source&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;&lt;div id="footdef:default" class="footdef"&gt;&lt;div class="def-footref obviously-a-link"&gt;&lt;a aria-label="Jump back to main text" href="#footref%3Adefault"&gt;2&lt;/a&gt;&lt;/div&gt;&lt;div class="def-footdef"&gt;Basically, if the face is &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;set-face-attribute&lt;/code&gt; calls &lt;code&gt;set_font_frame_param&lt;/code&gt; (&lt;a href="https://archive.casouri.cat/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3514"&gt;source&lt;/a&gt;), which only looks at the &lt;code&gt;:font&lt;/code&gt; attribute (&lt;a href="https://archive.casouri.cat/note/2021/fontset/https:/github.com/emacs-mirror/emacs/blob/11e5c7d8ca58cc946930048b5c88c8f582d4d5d8/src/xfaces.c#L3685"&gt;source&lt;/a&gt;).&lt;/div&gt;&lt;/div&gt;&lt;h2 id="Further%20reading" class="section"&gt;Further reading&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Command &lt;code&gt;lists-fontsets&lt;/code&gt; lists all the defined fontsets.&lt;/li&gt;&lt;li&gt;Command &lt;code&gt;describe-fontset&lt;/code&gt; shows which font is each character assigned to in a fontset.&lt;/li&gt;&lt;li&gt;Manual page: &lt;a href="https://archive.casouri.cat/note/2021/fontset/https:/www.gnu.org/software/emacs/manual/html_node/emacs/Fontsets.html"&gt;&lt;em&gt;Fontsets, Emacs User Manual&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Another manual page: &lt;a href="https://archive.casouri.cat/note/2021/fontset/https:/www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html"&gt;&lt;em&gt;Fontsets, Emacs Lisp Manual&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content></entry>
</feed>
